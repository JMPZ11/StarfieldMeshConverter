#pragma once
#include <unordered_map>
#include <string_view>
#include "hkReflection.h"

namespace hkreflex {
	class hkClassBase;
}

namespace hktypes {
	class hkTypeMapper {
	public:
		static hkTypeMapper& GetSingleton() {
			static hkTypeMapper instance;
			return instance;
		}

		std::string GetCType(hkreflex::hkClassBase* type);

		std::string GetCType(std::string_view type);

		static bool IsMapped(hkreflex::hkClassBase* type);

		static bool IsBasicTypes(hkreflex::hkClassBase* type, bool check_parent = true);

	protected:
		hkTypeMapper() = default;

		const std::unordered_map<std::string_view, std::string_view> _map{
			{ "hkMatrix4Impl<float>", "hkMatrix4Holder"},
			{ "hkQuaternion", "Eigen::Quaternionf" },
			{ "T*<hkbStateMachine::EventPropertyArray>", "hkbStateMachine::EventPropertyArray" },
			{ "hkEnum<hkbCustomTestGeneratorComplexTypes::CustomEnum, hkUint8>", "hkbCustomTestGeneratorComplexTypes::CustomEnum" },
			{ "hkRelArray<hknpConvexHull::Edge>", "std::vector<hknpConvexHull::Edge>" },
			{ "hkRefPtr<hkaiEdgePath>", "hkaiEdgePath" },
			{ "hkRelArray<hkFloat3>", "std::vector<hkFloat3>" },
			{ "T*<hkRefPtr<hkaiCollisionAvoidance::ObstacleGenerator>>", "hkaiCollisionAvoidance::ObstacleGenerator" },
			{ "hkArray<hclObjectSpaceDeformer::ThreeBlendEntryBlock, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::ThreeBlendEntryBlock>" },
			{ "hkArray<hclObjectSpaceDeformer::LocalBlockPN, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::LocalBlockPN>" },
			{ "T*<hknpVehicleData>", "hknpVehicleData" },
			{ "hkRelArray<hknpConvexHull::Face>", "std::vector<hknpConvexHull::Face>" },
			{ "hkEnum<hclLocalRangeConstraintSet::ShapeType, unsigned int>", "hclLocalRangeConstraintSet::ShapeType" },
			{ "T*<hkaiCornerPredictor::UserEdgeTraversal>", "hkaiCornerPredictor::UserEdgeTraversal" },
			{ "hkRefPtr<hknpRefMassDistribution>", "hknpRefMassDistribution" },
			{ "hkaiIndex<int>", "int" },
			{ "hkRefPtr<hkaiAstarCostModifier>", "hkaiAstarCostModifier" },
			{ "hkFlags<hknpConstraintGroup::FlagsEnum, unsigned short>", "hknpConstraintGroup::FlagsEnum" },
			{ "hkFlags<hknpCollisionControl::Enum, unsigned short>", "hknpCollisionControl::Enum" },
			{ "T*<hknpTyremarksWheel>", "hknpTyremarksWheel" },
			{ "hkFlags<hknpCollisionFlags::Enum, int>", "hknpCollisionFlags::Enum" },
			{ "hkArray<hkcdCompressedAabbCodecs::Aabb4BytesCodec, hkContainerHeapAllocator>", "std::vector<hkcdCompressedAabbCodecs::Aabb4BytesCodec>" },
			{ "T*<hkxEnvironment::Variable>", "hkxEnvironment::Variable" },
			{ "hkEnum<hkpConstraintMotor::MotorType, signed char>", "hkpConstraintMotor::MotorType" },
			{ "hkRefPtr<hkaAnimation>", "hkaAnimation" },
			{ "T*<hkaiNavMeshClearanceCacheSeeding::CacheData>", "hkaiNavMeshClearanceCacheSeeding::CacheData" },
			{ "hkArray<hclBoneSpaceDeformer::FourBlendEntryBlock, hkContainerHeapAllocator>", "std::vector<hclBoneSpaceDeformer::FourBlendEntryBlock>" },
			{ "hkaiMinArray<hkViewPtr<hkaiCollisionAvoidance::Character>>", "hkaiMinArray<hkaiCollisionAvoidance::Character>" },
			{ "T*<hkMemoryResourceHandle>", "hkMemoryResourceHandle" },
			{ "hkFlags<hknpManifoldViewerBase::ManifoldWeldingEvent::WeldingStatusEnum, unsigned char>", "hknpManifoldViewerBase::ManifoldWeldingEvent::WeldingStatusEnum" },
			{ "hkEnum<CustomManualSelectorGenerator::ReplanningAI, hkUint8>", "CustomManualSelectorGenerator::ReplanningAI" },
			{ "hkFlags<hkbEventInfo::Flags, hkUint32>", "hkbEventInfo::Flags" },
			{ "hkEnum<hknpManifoldEvent::Status, hkUint8>", "hknpManifoldEvent::Status" },
			{ "hkFlags<hkbCustomTestGeneratorComplexTypes::CustomFlag, hkInt32>", "hkbCustomTestGeneratorComplexTypes::CustomFlag" },
			{ "hkEnum<hclMeshMeshDeformOperator::ScaleNormalBehaviour, unsigned int>", "hclMeshMeshDeformOperator::ScaleNormalBehaviour" },
			{ "T*<hknpFirstPersonGun>", "hknpFirstPersonGun" },
			{ "hkEnum<hkaiSplitGenerationUtils::SplitMethod, unsigned char>", "hkaiSplitGenerationUtils::SplitMethod" },
			{ "hkRefPtr<hkaiNavigator>", "hkaiNavigator" },
			{ "hkArray<hkRefPtr<hkMeshTexture>, hkContainerHeapAllocator>", "std::vector<hkMeshTexture>" },
			{ "hkInt32Be", "int" },
			{ "T*<hkaiNavVolume>", "hkaiNavVolume" },
			{ "hkArray<hclCompressibleLinkConstraintSet::Link, hkContainerHeapAllocator>", "std::vector<hclCompressibleLinkConstraintSet::Link>" },
			{ "T*<T*<hctClothSetupObjectData>>", "hctClothSetupObjectData" },
			{ "hkEnum<hknpShapeTagCodec::Type, unsigned char>", "hknpShapeTagCodec::Type" },
			{ "hkEnum<hclRuntimeConversionInfo::VectorConversion, hkUint8>", "hclRuntimeConversionInfo::VectorConversion" },
			{ "hkEnum<CustomLookAtTwistModifier::GainState, signed char>", "CustomLookAtTwistModifier::GainState" },
			{ "hkEnum<hkMeshSection::PrimitiveType, unsigned char>", "hkMeshSection::PrimitiveType" },
			{ "T*<hkRefPtr<hkxMeshSection>>", "hkxMeshSection" },
			{ "hkEnum<CustomManualSelectorGenerator::ChangeTypeOfSelectedIndexAfterActivate, unsigned char>", "CustomManualSelectorGenerator::ChangeTypeOfSelectedIndexAfterActivate" },
			{ "hkEnum<hctAttributeDescription20151::Hint, hkInt8>", "hctAttributeDescription20151::Hint" },
			{ "hkSet<hkUint32, hkContainerHeapAllocator, hkMapOperations<hkUint32>>", "hkSet<uint32_t, hkContainerHeapAllocator>" },
			{ "hkRefPtr<hkaiNavMesh>", "hkaiNavMesh" },
			{ "hkEnum<hknpCharacterSurfaceInfo::SupportedState, hkUint8>", "hknpCharacterSurfaceInfo::SupportedState" },
			{ "hkEnum<CustomManualSelectorGenerator::OffsetType, int>", "CustomManualSelectorGenerator::OffsetType" },
			{ "hkArray<hkcdPlanarGeometryPrimitives::Plane, hkContainerHeapAllocator>", "std::vector<hkcdPlanarGeometryPrimitives::Plane>" },
			{ "hkEnum<hkbTransitionEffect::SelfTransitionMode, signed char>", "hkbTransitionEffect::SelfTransitionMode" },
			{ "hkHandle<hkUint32, -1>", "hkHandle<uint32_t>" },
			{ "hkEnum<CustomLookAtTwistModifier::SetAngleMethod, hkInt8>", "CustomLookAtTwistModifier::SetAngleMethod" },
			{ "T*<hkxLight>", "hkxLight" },
			{ "hkEnum<hkxMaterialEffect::EffectType, unsigned char>", "hkxMaterialEffect::EffectType" },
			{ "hkArray<fsnpCustomMeshParameter::TriangleData, hkContainerHeapAllocator>", "std::vector<fsnpCustomMeshParameter::TriangleData>" },
			{ "hkEnum<hclBufferLayout::TriangleFormat, hkUint8>", "hclBufferLayout::TriangleFormat" },
			{ "hkEnum<hclOperatorType, unsigned int>", "hclOperatorType" },
			{ "hkEnum<hkaiSplitGenerationUtils::SplitAndGenerateOptions, hkUint8>", "hkaiSplitGenerationUtils::SplitAndGenerateOptions" },
			{ "T*<hclVirtualCollisionPointsData::BarycentricPair>", "hclVirtualCollisionPointsData::BarycentricPair" },
			{ "hkEnum<CustomManualSelectorGenerator::RideSync, unsigned char>", "CustomManualSelectorGenerator::RideSync" },
			{ "hkUint16Le", "uint16_t" },
			{ "hkHashMap<unsigned long long, T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>>", "hkHashMap<uint64_t, hkHashMap<IHavokObject, object>>" },
			{ "hkEnum<CustomManualSelectorGenerator::OffsetType, hkInt32>", "CustomManualSelectorGenerator::OffsetType" },
			{ "T*<hkbCharacterStringData::FileNameMeshNamePair>", "hkbCharacterStringData::FileNameMeshNamePair" },
			{ "hkRefPtr<hkaiNavMeshInstance>", "hkaiNavMeshInstance" },
			{ "hkEnum<CustomManualSelectorGenerator::ReplanningAI, unsigned char>", "CustomManualSelectorGenerator::ReplanningAI" },
			{ "hkUint8Le", "uint8_t" },
			{ "hkEnum<hknpManifoldEvent::Status, unsigned char>", "hknpManifoldEvent::Status" },
			{ "hkEnum<CustomManualSelectorGenerator::AnimeEndEventType, int>", "CustomManualSelectorGenerator::AnimeEndEventType" },
			{ "T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>", "hkHashMap<IHavokObject, object>" },
			{ "T*<hclMoveParticlesOperator::VertexParticlePair>", "hclMoveParticlesOperator::VertexParticlePair" },
			{ "T*<hkbHandle>", "hkbHandle" },
			{ "T*<hclStorageSetupMeshSection::SectionTriangleSelectionChannel>", "hclStorageSetupMeshSection::SectionTriangleSelectionChannel" },
			{ "hkEnum<CustomLookAtTwistModifier::SetAngleMethod, signed char>", "CustomLookAtTwistModifier::SetAngleMethod" },
			{ "hkcdDynamicTree::Tree<hkcdDynamicTree::DynamicStorage16>", "hkcdDynamicTree::TreeDynamicStorage16" },
			{ "hkEnum<CustomManualSelectorGenerator::ChangeTypeOfSelectedIndexAfterActivate, hkUint8>", "CustomManualSelectorGenerator::ChangeTypeOfSelectedIndexAfterActivate" },
			{ "hkRefPtr<hkbCharacterStringData>", "hkbCharacterStringData" },
			{ "hkEnum<hknpCompoundShapeBoundingVolumeType::Enum, unsigned char>", "hknpCompoundShapeBoundingVolumeType::Enum" },
			{ "hkRefPtr<hkbStateMachine::TransitionInfoArray>", "hkbStateMachine::TransitionInfoArray" },
			{ "hkEnum<CustomLookAtTwistModifier::MultiRotationAxisType, signed char>", "CustomLookAtTwistModifier::MultiRotationAxisType" },
			{ "hkEnum<hkxMaterial::Transparency, hkUint8>", "hkxMaterial::Transparency" },
			{ "T*<hkRefPtr<hkbBehaviorGraph>>", "hkbBehaviorGraph" },
			{ "hkEnum<CustomBoneFixModifier::GainState, signed char>", "CustomBoneFixModifier::GainState" },
			{ "hkEnum<hkbNode::CloneState, hkInt8>", "hkbNode::CloneState" },
			{ "hkEnum<hknpFirstPersonGun::Type, unsigned char>", "hknpFirstPersonGun::Type" },
			{ "hkEnum<hkbTwistModifier::RotationAxisCoordinates, signed char>", "hkbTwistModifier::RotationAxisCoordinates" },
			{ "hkEnum<CustomManualSelectorGenerator::RideSync, hkUint8>", "CustomManualSelectorGenerator::RideSync" },
			{ "hkFlags<hknpLodBodyFlags::Enum, unsigned char>", "hknpLodBodyFlags::Enum" },
			{ "hkArray<hkaMeshBinding::Mapping, hkContainerHeapAllocator>", "std::vector<hkaMeshBinding::Mapping>" },
			{ "hkFlags<hkbCustomTestGeneratorComplexTypes::CustomFlag, signed char>", "hkbCustomTestGeneratorComplexTypes::CustomFlag" },
			{ "hkArray<hkxBlendShapeCollectionChannel::BlendShape, hkContainerHeapAllocator>", "std::vector<hkxBlendShapeCollectionChannel::BlendShape>" },
			{ "T*<hkaiNavMeshClearanceCacheManager::LayerData>", "hkaiNavMeshClearanceCacheManager::LayerData" },
			{ "unsigned short", "uint16_t" },
			{ "hkEnum<CustomManualSelectorGenerator::AnimeEndEventType, hkInt32>", "CustomManualSelectorGenerator::AnimeEndEventType" },
			{ "T*<hkMemoryResourceHandle::ExternalLink>", "hkMemoryResourceHandle::ExternalLink" },
			{ "hkArray<hkRefPtr<hkxMesh>, hkContainerHeapAllocator>", "std::vector<hkxMesh>" },
			{ "hkEnum<hknpLinearSurfaceVelocity::ProjectMethod, unsigned char>", "hknpLinearSurfaceVelocity::ProjectMethod" },
			{ "hkArray<hkcdCompressedAabbCodecs::Aabb5BytesCodec, hkContainerHeapAllocator>", "std::vector<hkcdCompressedAabbCodecs::Aabb5BytesCodec>" },
			{ "hkArray<T*<hclBufferDefinition>, hkContainerHeapAllocator>", "std::vector<hclBufferDefinition>" },
			{ "hkEnum<hkbRoleAttribute::Role, short>", "hkbRoleAttribute::Role" },
			{ "hkEnum<hkxAttribute::Hint, hkUint8>", "hkxAttribute::Hint" },
			{ "hkArray<hkaiNavMesh::Face, hkContainerHeapAllocator>", "std::vector<hkaiNavMesh::Face>" },
			{ "hkEnum<CustomLookAtTwistModifier::GainState, hkInt8>", "CustomLookAtTwistModifier::GainState" },
			{ "hkEnum<hkbGeneratorTransitionEffect::ToGeneratorState, signed char>", "hkbGeneratorTransitionEffect::ToGeneratorState" },
			{ "hkEnum<hknpWorld::AdditionMode, unsigned char>", "hknpWorld::AdditionMode" },
			{ "hkEnum<CustomLookAtTwistModifier::MultiRotationAxisType, hkInt8>", "CustomLookAtTwistModifier::MultiRotationAxisType" },
			{ "T*<hkaAnimationBinding>", "hkaAnimationBinding" },
			{ "T*<hkRefPtr<hkxIndexBuffer>>", "hkxIndexBuffer" },
			{ "hkEnum<CustomBoneFixModifier::GainState, hkInt8>", "CustomBoneFixModifier::GainState" },
			{ "hkEnum<hknpVehicleWheelCollide::WheelCollideType, unsigned char>", "hknpVehicleWheelCollide::WheelCollideType" },
			{ "T*<hkReflect::Type>", "IHavokObject" },
			{ "T*<hkaiModifiedSections>", "hkaiModifiedSections" },
			{ "hkArray<hkbFootIkControlsModifier::Leg, hkContainerHeapAllocator>", "std::vector<hkbFootIkControlsModifier::Leg>" },
			{ "hkEnum<hknpFirstPersonGun::KeyboardKey, unsigned char>", "hknpFirstPersonGun::KeyboardKey" },
			{ "hkEnum<hclVertexFloatInput::VertexFloatType, hkUint32>", "hclVertexFloatInput::VertexFloatType" },
			{ "hkArray<hkRootLevelContainer::NamedVariant, hkContainerHeapAllocator>", "std::vector<hkRootLevelContainer::NamedVariant>" },
			{ "T*<hkHandle<unsigned int, 2147483647>>", "hkHandle<uint32_t>" },
			{ "T*<hkaiStreamingSetInstance::DynUserEdgeConnection>", "hkaiStreamingSetInstance::DynUserEdgeConnection" },
			{ "hkEnum<hkaAnimation::AnimationType, int>", "hkaAnimation::AnimationType" },
			{ "hkaiIndex<hkInt32>", "int" },
			{ "T*<hkaiPathRequestManager>", "hkaiPathRequestManager" },
			{ "hkEnum<hkpConstraintMotor::MotorType, hkInt8>", "hkpConstraintMotor::MotorType" },
			{ "T*<hkRefPtr<hkbGenerator>>", "hkbGenerator" },
			{ "T*<hkaSkeletonMapper>", "hkaSkeletonMapper" },
			{ "T*<hkbVariableValueSet>", "hkbVariableValueSet" },
			{ "T*<hkcdPlanarGeometryPrimitives::Plane>", "hkcdPlanarGeometryPrimitives::Plane" },
			{ "hkEnum<hkbEventRangeData::EventRangeMode, hkInt8>", "hkbEventRangeData::EventRangeMode" },
			{ "hkEnum<hkbExpressionData::ExpressionEventMode, hkInt8>", "hkbExpressionData::ExpressionEventMode" },
			{ "hkEnum<hkbBodyIkControlPriority::Enum, hkInt8>", "hkbBodyIkControlPriority::Enum" },
			{ "T*<hkaiAnnotatedStreamingSet>", "hkaiAnnotatedStreamingSet" },
			{ "hkArray<hkaiNavVolumePathRequestInfo, hkContainerHeapAllocator>", "std::vector<hkaiNavVolumePathRequestInfo>" },
			{ "hkRefPtr<hkxMaterialShader>", "hkxMaterialShader" },
			{ "T*<hkaiNavMeshPathRequest>", "hkaiNavMeshPathRequest" },
			{ "hkEnum<hknpCharacterSurfaceInfo::SupportedState, unsigned char>", "hknpCharacterSurfaceInfo::SupportedState" },
			{ "T*<hkWeakPtrTest::Foo>", "hkWeakPtrTest::Foo" },
			{ "T*<hkQsTransformf>", "hkQsTransformf" },
			{ "hkEnum<hkaiPointCloudSilhouetteGenerator::DetailLevel, hkUint8>", "hkaiPointCloudSilhouetteGenerator::DetailLevel" },
			{ "hkArray<hkbEventProperty, hkContainerHeapAllocator>", "std::vector<hkbEventProperty>" },
			{ "hkEnum<hclRuntimeConversionInfo::VectorConversion, unsigned char>", "hclRuntimeConversionInfo::VectorConversion" },
			{ "hkFlags<hknpManifoldViewerBase::VdbManifold::StatusEnum, unsigned short>", "hknpManifoldViewerBase::VdbManifold::StatusEnum" },
			{ "hkEnum<hknpActivationState::Enum, unsigned char>", "hknpActivationState::Enum" },
			{ "T*<hclObjectSpaceDeformer::LocalBlockPNTB>", "hclObjectSpaceDeformer::LocalBlockPNTB" },
			{ "hkEnum<hknpActivationControl::Enum, unsigned char>", "hknpActivationControl::Enum" },
			{ "hkEnum<hknpWorld::UpdateCachesMode, unsigned char>", "hknpWorld::UpdateCachesMode" },
			{ "T*<hknpCollisionFilter>", "hknpCollisionFilter" },
			{ "hkEnum<hknpCollisionDispatchType::Enum, unsigned char>", "hknpCollisionDispatchType::Enum" },
			{ "hkSet<unsigned long long, hkContainerHeapAllocator, hkMapOperations<unsigned long long>>", "hkSet<uint64_t, hkContainerHeapAllocator>" },
			{ "hkEnum<hknpMaterial::TriggerType, unsigned char>", "hknpMaterial::TriggerType" },
			{ "hkEnum<hknpMotionType::Enum, unsigned char>", "hknpMotionType::Enum" },
			{ "T*<hkaBoneAttachment>", "hkaBoneAttachment" },
			{ "T*<hkRefPtr<hkxLight>>", "hkxLight" },
			{ "hkEnum<hknpWorld::ActivationMode, unsigned char>", "hknpWorld::ActivationMode" },
			{ "hkArray<hkRefPtr<hclNamedSetupMesh>, hkContainerHeapAllocator>", "std::vector<hclNamedSetupMesh>" },
			{ "hkEnum<hknpWorld::PivotLocation, unsigned char>", "hknpWorld::PivotLocation" },
			{ "T*<hkaiNavVolumeInstanceData::CellInstance>", "hkaiNavVolumeInstanceData::CellInstance" },
			{ "hkEnum<hknpWorld::UpdateMotionMode, unsigned char>", "hknpWorld::UpdateMotionMode" },
			{ "hkArray<hkHashSet<int>, hkContainerHeapAllocator>", "std::vector<hkHashSet<int>>" },
			{ "T*<hkaiNavVolume::Edge>", "hkaiNavVolume::Edge" },
			{ "hkFlags<hkaiGatePath::BoundarySegmentBits, hkUint8>", "hkaiGatePath::BoundarySegmentBits" },
			{ "hkArray<hclVirtualCollisionPointsData::EdgeFanLandscape, hkContainerHeapAllocator>", "std::vector<hclVirtualCollisionPointsData::EdgeFanLandscape>" },
			{ "hkFlags<hknpConstraint::FlagsEnum, unsigned short>", "hknpConstraint::FlagsEnum" },
			{ "hkTuple<hkaiIndex<hkInt32>, hkaiNavMeshCutConfiguration::BigFaceInfo, void, void, void, void, void, void>", "hkTuple2<int, hkaiNavMeshCutConfiguration::BigFaceInfo>" },
			{ "hkEnum<hknpContactImpulseEvent::Status, unsigned char>", "hknpContactImpulseEvent::Status" },
			{ "hkEnum<hkaiPathFollowingBehavior::PathType, unsigned char>", "hkaiPathFollowingBehavior::PathType" },
			{ "hkArray<hkRefPtr<hkbAuxiliaryNodeInfo>, hkContainerHeapAllocator>", "std::vector<hkbAuxiliaryNodeInfo>" },
			{ "hkArray<hkcdSimdTree::Node, hkContainerHeapAllocator>", "std::vector<hkcdSimdTree::Node>" },
			{ "hkUint64Be", "uint64_t" },
			{ "hkArray<hkaiNavMeshClearanceCacheManager::LayerData, hkContainerHeapAllocator>", "std::vector<hkaiNavMeshClearanceCacheManager::LayerData>" },
			{ "hkEnum<hknpSurfaceVelocity::Space, unsigned char>", "hknpSurfaceVelocity::Space" },
			{ "hkEnum<hknpMaterial::MassChangerCategory, unsigned char>", "hknpMaterial::MassChangerCategory" },
			{ "hkArray<hkBool, hkContainerHeapAllocator>", "std::vector<bool>" },
			{ "hkEnum<hkaiCharacter::State, int>", "hkaiCharacter::State" },
			{ "T*<hkRefPtr<hkaiCollisionAvoidance::Character>>", "hkaiCollisionAvoidance::Character" },
			{ "hkEnum<hknpMaterial::CombinePolicy, unsigned char>", "hknpMaterial::CombinePolicy" },
			{ "T*<hknpVehicleWheelCollide>", "hknpVehicleWheelCollide" },
			{ "hkFlags<hknpBodyQuality::FlagsEnum, unsigned int>", "hknpBodyQuality::FlagsEnum" },
			{ "hkFlags<hkaiModifiedSections::SectionBits, unsigned char>", "hkaiModifiedSections::SectionBits" },
			{ "T*<hkbReferencedGeneratorSyncInfo>", "hkbReferencedGeneratorSyncInfo" },
			{ "hkEnum<hknpShapeType::Enum, unsigned char>", "hknpShapeType::Enum" },
			{ "T*<hkIndexedTransformSet>", "hkIndexedTransformSet" },
			{ "hkFlags<hknpShape::FlagsEnum, unsigned short>", "hknpShape::FlagsEnum" },
			{ "hkArray<const char*, hkContainerHeapAllocator>", "std::vector<std::string>" },
			{ "hkFlags<hknpManifoldViewerBase::ManifoldWeldingEvent::WeldingStatusEnum, hkUint8>", "hknpManifoldViewerBase::ManifoldWeldingEvent::WeldingStatusEnum" },
			{ "T*<hctClothSetupClothData20141Options>", "hctClothSetupClothData20141Options" },
			{ "T*<hkbGenerator>", "hkbGenerator" },
			{ "hkFlags<hknpShapeTagCodec::Hints, unsigned int>", "hknpShapeTagCodec::Hints" },
			{ "hkEnum<hkbBehaviorGraph::VariableMode, signed char>", "hkbBehaviorGraph::VariableMode" },
			{ "hkArray<hclVirtualCollisionPointsData::BarycentricPair, hkContainerHeapAllocator>", "std::vector<hclVirtualCollisionPointsData::BarycentricPair>" },
			{ "hkEnum<hkbBlendCurveUtils::BlendCurve, signed char>", "hkbBlendCurveUtils::BlendCurve" },
			{ "hkEnum<hknpActivationControl::Enum, hkUint8>", "hknpActivationControl::Enum" },
			{ "T*<hclLocalRangeConstraintSet::LocalConstraint>", "hclLocalRangeConstraintSet::LocalConstraint" },
			{ "hkBitFieldBase<hkOffsetBitFieldStorage<hkArray<unsigned int, hkContainerHeapAllocator>>>", "hkBitFieldBase<hkOffsetBitFieldStorage<std::vector<uint32_t>>>" },
			{ "hkEnum<hknpCollisionFilter::Type, unsigned char>", "hknpCollisionFilter::Type" },
			{ "T*<hknpVehicleLinearCastWheelCollide::WheelState>", "hknpVehicleLinearCastWheelCollide::WheelState" },
			{ "hkEnum<hkVertexFormat::ComponentType, unsigned char>", "hkVertexFormat::ComponentType" },
			{ "hk::ValueAttribute<hk::ValueArray<hk::FileDialogFilter>>", "hk::ValueAttribute<std::vector<hk::FileDialogFilter>>" },
			{ "hkEnum<hknpTriggerEvent::Status, unsigned char>", "hknpTriggerEvent::Status" },
			{ "hkArray<hkbVariableBounds, hkContainerHeapAllocator>", "std::vector<hkbVariableBounds>" },
			{ "hkEnum<hkaiGatePathUtil::GateTypeValues, unsigned char>", "hkaiGatePathUtil::GateTypeValues" },
			{ "T*<hknpPhysicsSystemData>", "hknpPhysicsSystemData" },
			{ "hkEnum<hkSemanticsAttribute::Semantics, signed char>", "hkSemanticsAttribute::Semantics" },
			{ "hkTuple<int, hkaiModifiedSections::Section, void, void, void, void, void, void>", "hkTuple2<int, hkaiModifiedSections::Section>" },
			{ "hkFlags<hknpManifoldViewerBase::VdbManifold::StatusEnum, hkUint16>", "hknpManifoldViewerBase::VdbManifold::StatusEnum" },
			{ "hkEnum<hknpVehicleWheelCollide::WheelCollideType, hkUint8>", "hknpVehicleWheelCollide::WheelCollideType" },
			{ "hkEnum<hkSemanticsAttribute::Semantics, hkInt8>", "hkSemanticsAttribute::Semantics" },
			{ "T*<hclSceneDataSetupMesh>", "hclSceneDataSetupMesh" },
			{ "hkMinHeap<hkaiMinArrayEntry<hkViewPtr<hkaiCollisionAvoidance::Character>>, hkMinHeapDefaultOperations<hkaiMinArrayEntry<hkViewPtr<hkaiCollisionAvoidance::Character>>>>", "hkMinHeap<hkaiMinArrayEntry<hkaiCollisionAvoidance::Character>>" },
			{ "hkRefPtr<hkcdDynamicAabbTree>", "hkcdDynamicAabbTree" },
			{ "hkArray<hknpParticleFaceVerticesWithEffMass, hkContainerHeapAllocator>", "std::vector<hknpParticleFaceVerticesWithEffMass>" },
			{ "hkEnum<hknpFirstPersonGun::KeyboardKey, hkUint8>", "hknpFirstPersonGun::KeyboardKey" },
			{ "hkArray<hkUint16, hkContainerHeapAllocator>", "std::vector<uint16_t>" },
			{ "hkEnum<hknpFirstPersonGun::Type, hkUint8>", "hknpFirstPersonGun::Type" },
			{ "hkEnum<hknpActivationState::Enum, hkUint8>", "hknpActivationState::Enum" },
			{ "hkEnum<hkbCustomTestGeneratorComplexTypes::CustomEnum, unsigned char>", "hkbCustomTestGeneratorComplexTypes::CustomEnum" },
			{ "hkEnum<hknpWorld::UpdateCachesMode, hkUint8>", "hknpWorld::UpdateCachesMode" },
			{ "hkArray<hkHashMapDetail::MapTuple<T*<hkReflect::Type>, T*<void>>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<IHavokObject, object>>" },
			{ "hkEnum<hkGizmoAttribute::GizmoType, signed char>", "hkGizmoAttribute::GizmoType" },
			{ "hkEnum<hknpMotionType::Enum, hkUint8>", "hknpMotionType::Enum" },
			{ "hkEnum<hknpWorld::PivotLocation, hkUint8>", "hknpWorld::PivotLocation" },
			{ "hkFlags<hkaiGatePath::BoundarySegmentBits, unsigned char>", "hkaiGatePath::BoundarySegmentBits" },
			{ "hkEnum<hknpWorld::UpdateMotionMode, hkUint8>", "hknpWorld::UpdateMotionMode" },
			{ "hkEnum<hclSetupMesh::VertexChannelType, hkUint32>", "hclSetupMesh::VertexChannelType" },
			{ "T*<hkbCustomTestGeneratorNestedTypesBase>", "hkbCustomTestGeneratorNestedTypesBase" },
			{ "hkFlags<hknpConstraint::FlagsEnum, hkUint16>", "hknpConstraint::FlagsEnum" },
			{ "hkEnum<hknpWorld::AdditionMode, hkUint8>", "hknpWorld::AdditionMode" },
			{ "T*<hkxNodeSelectionSet>", "hkxNodeSelectionSet" },
			{ "T*<hkRefPtr<hknpConvexShape>>", "hknpConvexShape" },
			{ "hkEnum<hkbJigglerModifier::JiggleCoordinates, signed char>", "hkbJigglerModifier::JiggleCoordinates" },
			{ "hkInt32", "int" },
			{ "hkEnum<hknpWorld::ActivationMode, hkUint8>", "hknpWorld::ActivationMode" },
			{ "hkEnum<hkbTwistModifier::SetAngleMethod, hkInt8>", "hkbTwistModifier::SetAngleMethod" },
			{ "T*<hkaiDirectedGraphExplicitCost::Edge>", "hkaiDirectedGraphExplicitCost::Edge" },
			{ "hkEnum<hknpContactImpulseEvent::Status, hkUint8>", "hknpContactImpulseEvent::Status" },
			{ "hkEnum<hkaiPathFollowingBehavior::PathType, hkUint8>", "hkaiPathFollowingBehavior::PathType" },
			{ "hkArray<T*<hclTransformSetDefinition>, hkContainerHeapAllocator>", "std::vector<hclTransformSetDefinition>" },
			{ "hkHashSet<hkaiIndex<hkInt32>>", "hkHashSet<int>" },
			{ "hkReflect::QualifiedType<hkReflect::PointerType>", "IHavokObject" },
			{ "hkEnum<hknpLinearSurfaceVelocity::ProjectMethod, hkUint8>", "hknpLinearSurfaceVelocity::ProjectMethod" },
			{ "T*<hclSimClothPose>", "hclSimClothPose" },
			{ "T*<hclBoneSpaceDeformer::LocalBlockPN>", "hclBoneSpaceDeformer::LocalBlockPN" },
			{ "hkEnum<hknpSurfaceVelocity::Space, hkUint8>", "hknpSurfaceVelocity::Space" },
			{ "hkEnum<hknpMaterial::MassChangerCategory, hkUint8>", "hknpMaterial::MassChangerCategory" },
			{ "hkEnum<hkbVariableInfo::VariableType, signed char>", "hkbVariableInfo::VariableType" },
			{ "hkHashMap<int, hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>>", "hkHashMap<int, hkaiDynamicUserEdgeSetInfo::ExternalEdges>" },
			{ "hkFlags<hkbCustomTestGeneratorComplexTypes::CustomFlag, unsigned int>", "hkbCustomTestGeneratorComplexTypes::CustomFlag" },
			{ "T*<hkbIntVariableSequencedData::Sample>", "hkbIntVariableSequencedData::Sample" },
			{ "hkArray<hkGpuTraceResult, hkContainerHeapAllocator>", "std::vector<hkGpuTraceResult>" },
			{ "T*<T*<hclCollidable>>", "hclCollidable" },
			{ "hkEnum<hknpMaterial::CombinePolicy, hkUint8>", "hknpMaterial::CombinePolicy" },
			{ "T*<hkRefVariant>", "hkReferencedObject*" },
			{ "T*<hkRefPtr<hkaiMaterialPainter>>", "hkaiMaterialPainter" },
			{ "hkEnum<hclTriangleSelectionInput::TriangleSelectionType, hkUint32>", "hclTriangleSelectionInput::TriangleSelectionType" },
			{ "hkEnum<hknpMaterial::TriggerType, hkUint8>", "hknpMaterial::TriggerType" },
			{ "hkEnum<hkxVertexDescription::DataUsage, unsigned short>", "hkxVertexDescription::DataUsage" },
			{ "T*<hkbEventDrivenBlendingObject::InternalState>", "hkbEventDrivenBlendingObject::InternalState" },
			{ "hkFlags<hknpConstraintGroup::FlagsEnum, hkUint16>", "hknpConstraintGroup::FlagsEnum" },
			{ "hk::ValueAttribute<hkUint16>", "hk::ValueAttribute<uint16_t>" },
			{ "hkFlags<hknpBodyQuality::FlagsEnum, hkUint32>", "hknpBodyQuality::FlagsEnum" },
			{ "hkEnum<hkbWorldFromModelModeData::WorldFromModelMode, signed char>", "hkbWorldFromModelModeData::WorldFromModelMode" },
			{ "T*<hknpParticleCollisionPair>", "hknpParticleCollisionPair" },
			{ "hkRefPtr<hkMeshShape>", "hkMeshShape" },
			{ "hkFlags<hknpLodBodyFlags::Enum, hkUint8>", "hknpLodBodyFlags::Enum" },
			{ "T*<hknpVehicleVelocityDamper>", "hknpVehicleVelocityDamper" },
			{ "hkEnum<hknpCollisionDispatchType::Enum, hkUint8>", "hknpCollisionDispatchType::Enum" },
			{ "hkRefPtr<hkbHandle>", "hkbHandle" },
			{ "T*<hkRefPtr<hkaiCharacter>>", "hkaiCharacter" },
			{ "hkEnum<hknpShapeType::Enum, hkUint8>", "hknpShapeType::Enum" },
			{ "T*<hkcdDynamicTree::CodecRawUlong>", "hkcdDynamicTree::CodecRawUlong" },
			{ "hkEnum<hkMeshTexture::FilterMode, hkInt8>", "hkMeshTexture::FilterMode" },
			{ "hkFlags<hknpShape::FlagsEnum, hkUint16>", "hknpShape::FlagsEnum" },
			{ "hkMapOperations<unsigned int>", "hkMapOperations" },
			{ "hkEnum<hknpShapeTagCodec::Type, hkUint8>", "hknpShapeTagCodec::Type" },
			{ "T*<hknpRefMassDistribution>", "hknpRefMassDistribution" },
			{ "T*<T*<hclConstraintSetSetupObject>>", "hclConstraintSetSetupObject" },
			{ "hkFlags<hknpShapeTagCodec::Hints, hkUint32>", "hknpShapeTagCodec::Hints" },
			{ "T*<hclBlendSomeVerticesOperator::BlendEntry>", "hclBlendSomeVerticesOperator::BlendEntry" },
			{ "T*<T*<hclTransformSetDefinition>>", "hclTransformSetDefinition" },
			{ "hkEnum<hkbRigidBodySetup::Type, unsigned char>", "hkbRigidBodySetup::Type" },
			{ "hkArray<hkbExpressionData, hkContainerHeapAllocator>", "std::vector<hkbExpressionData>" },
			{ "hkEnum<hknpCollisionFilter::Type, hkUint8>", "hknpCollisionFilter::Type" },
			{ "hkArray<hkHashMapDetail::MapTuple<int, hkRefPtr<hkaiStreamingSet>>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiStreamingSet>>" },
			{ "hkEnum<hctAttributeDescription20151::ForcedType, hkInt8>", "hctAttributeDescription20151::ForcedType" },
			{ "hkEnum<hkaiAnnotatedStreamingSet::Side, unsigned char>", "hkaiAnnotatedStreamingSet::Side" },
			{ "hkcdDynamicTree::Tree<hkcdDynamicTree::DefaultDynamicStorage<hkcdDynamicTree::CodecRaw<unsigned long long>>>", "hkcdDynamicTree::TreeDefaultDynamicStorageCodecRaw_Ulong" },
			{ "T*<hkRefPtr<hkxMaterialShader>>", "hkxMaterialShader" },
			{ "hkArray<T*<hclStorageSetupMeshSection::SectionEdgeSelectionChannel>, hkContainerHeapAllocator>", "std::vector<hclStorageSetupMeshSection::SectionEdgeSelectionChannel>" },
			{ "hkEnum<hknpCompoundShapeBoundingVolumeType::Enum, hkUint8>", "hknpCompoundShapeBoundingVolumeType::Enum" },
			{ "hkEnum<hkVertexFormat::ComponentType, hkUint8>", "hkVertexFormat::ComponentType" },
			{ "hkEnum<hknpTriggerEvent::Status, hkUint8>", "hknpTriggerEvent::Status" },
			{ "hkRefPtr<hkaiNavMeshGeneration::OverlappingMaterialCombiner>", "hkaiNavMeshGeneration::OverlappingMaterialCombiner" },
			{ "hkRefPtr<hkaiNavVolume>", "hkaiNavVolume" },
			{ "hkEnum<hkbTransitionEffect::EventMode, signed char>", "hkbTransitionEffect::EventMode" },
			{ "hkRefPtr<hkIndexedTransformSet>", "hkIndexedTransformSet" },
			{ "hkArray<T*<hclStateTransitionSetupObject>, hkContainerHeapAllocator>", "std::vector<hclStateTransitionSetupObject>" },
			{ "hkEnum<hkbToolNodeType::NodeType, hkUint16>", "hkbToolNodeType::NodeType" },
			{ "T*<hkVector4>", "hkVector4Holder" },
			{ "hkArray<hclObjectSpaceDeformer::LocalBlockUnpackedPN, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::LocalBlockUnpackedPN>" },
			{ "hkHashMap<hkHandle<unsigned int, -1>, hkaiDynamicUserEdgeSetInfo>", "hkHashMap<hkHandle<uint32_t>, hkaiDynamicUserEdgeSetInfo>" },
			{ "T*<T*<hkbRealVariableSequencedData>>", "hkbRealVariableSequencedData" },
			{ "hkEnum<hkbCharacterControllerModifier::MotionMode, hkInt8>", "hkbCharacterControllerModifier::MotionMode" },
			{ "T*<hclSimulationSetupMesh>", "hclSimulationSetupMesh" },
			{ "hkBool8Le", "bool" },
			{ "hkInt8", "int8_t" },
			{ "hkRefPtr<hclSimulationSetupMesh>", "hclSimulationSetupMesh" },
			{ "hkaiCopyOnWritePtr<hkaiNavMeshClearanceCache, hkaiCopyOnWriteDefaultTraits<hkaiNavMeshClearanceCache>>", "hkaiCopyOnWritePtr<hkaiNavMeshClearanceCache>" },
			{ "hkFloat64Le", "double" },
			{ "hkEnum<hkaiOverlappingTriangles::WalkableTriangleSettings, hkUint8>", "hkaiOverlappingTriangles::WalkableTriangleSettings" },
			{ "T*<hclConstraintSet>", "hclConstraintSet" },
			{ "hkRefPtr<hclCollidable>", "hclCollidable" },
			{ "hkArray<hkQsTransform, hkContainerHeapAllocator>", "std::vector<hkQsTransform>" },
			{ "T*<hkbFootIkModifier::Leg>", "hkbFootIkModifier::Leg" },
			{ "hkArray<hkRefPtr<hkaSkeleton>, hkContainerHeapAllocator>", "std::vector<hkaSkeleton>" },
			{ "hkArray<hkDefaultCompoundMeshShape::MeshSection, hkContainerHeapAllocator>", "std::vector<hkDefaultCompoundMeshShape::MeshSection>" },
			{ "hkArray<hkbBodyIkControlPin, hkContainerHeapAllocator>", "std::vector<hkbBodyIkControlPin>" },
			{ "hkEnum<hkpConstraintAtom::AtomType, hkUint16>", "hkpConstraintAtom::AtomType" },
			{ "hkArray<hkRefPtr<hkxIndexBuffer>, hkContainerHeapAllocator>", "std::vector<hkxIndexBuffer>" },
			{ "T*<hkcdPlanarSolid::NodeStorage>", "hkcdPlanarSolid::NodeStorage" },
			{ "hkEnum<hclSetupMesh::VertexChannelType, unsigned int>", "hclSetupMesh::VertexChannelType" },
			{ "T*<hkQTransformf>", "hkQTransform" },
			{ "hkFlags<hkbVariableBindingSet::Binding::InternalBindingFlags, hkInt8>", "hkbVariableBindingSet::Binding::InternalBindingFlags" },
			{ "T*<float>", "float" },
			{ "hkaiCopyOnWritePtr<hkaiStreamingSetInstance, hkaiCopyOnWriteDefaultTraits<hkaiStreamingSetInstance>>", "hkaiCopyOnWritePtr<hkaiStreamingSetInstance>" },
			{ "T*<hkaiPackedKey_<hkaiIndex<hkInt32>, hkaiIndex<hkInt32>>>", "uint32_t" },
			{ "hkArray<hkRefPtr<hkxMeshSection>, hkContainerHeapAllocator>", "std::vector<hkxMeshSection>" },
			{ "hkEnum<hclVertexGatherSetupObject::Direction, unsigned int>", "hclVertexGatherSetupObject::Direction" },
			{ "T*<hkaiNavigatorStalenessChecker>", "hkaiNavigatorStalenessChecker" },
			{ "hkTuple<hkaiIndex<hkInt32>, hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>, void, void, void, void, void, void>", "hkTuple2<int, hkaiDynamicUserEdgeSetInfo::ExternalEdges>" },
			{ "hkArray<T*<hkbTransitionEffect>, hkContainerHeapAllocator>", "std::vector<hkbTransitionEffect>" },
			{ "hkUint16", "uint16_t" },
			{ "hkEnum<hkaiUserEdgeUtils::UserEdgeDirection, unsigned char>", "hkaiUserEdgeUtils::UserEdgeDirection" },
			{ "T*<hkcdDefaultStaticMeshTree>", "hkcdDefaultStaticMeshTree" },
			{ "hkEnum<hkxMaterial::TextureType, int>", "hkxMaterial::TextureType" },
			{ "hkHashMap<hkHandle<hkUint32, -1>, hkaiDynamicUserEdgeSetInfo>", "hkHashMap<hkHandle<uint32_t>, hkaiDynamicUserEdgeSetInfo>" },
			{ "hkArray<hkaiOverlapManager::PendingUpdate, hkContainerHeapAllocator>", "std::vector<hkaiOverlapManager::PendingUpdate>" },
			{ "T*<T*<hclBufferDefinition>>", "hclBufferDefinition" },
			{ "hkEnum<hkGizmoAttribute::GizmoType, hkInt8>", "hkGizmoAttribute::GizmoType" },
			{ "T*<hkReflect::BoolType>", "IHavokObject" },
			{ "T*<hkxEnum>", "hkxEnum" },
			{ "hkArray<hkaiNavMeshGenerationUtilsSettings::OverrideSettings, hkContainerHeapAllocator>", "std::vector<hkaiNavMeshGenerationUtilsSettings::OverrideSettings>" },
			{ "hkEnum<hclSimClothBufferSetupObject::Type, unsigned int>", "hclSimClothBufferSetupObject::Type" },
			{ "hkHashBase<hkaiIndex<hkInt32>>", "hkHashBase<int>" },
			{ "hkEnum<hkaiSplitGenerationUtils::SplitMethod, hkUint8>", "hkaiSplitGenerationUtils::SplitMethod" },
			{ "hkArray<unsigned char, hkContainerHeapAllocator>", "std::vector<uint8_t>" },
			{ "hkEnum<hkxSpline::ControlType, hkUint8>", "hkxSpline::ControlType" },
			{ "T*<hknpCompressedMeshShape>", "hknpCompressedMeshShape" },
			{ "hkEnum<hclBoneSpaceMeshMeshDeformOperator::ScaleNormalBehaviour, unsigned int>", "hclBoneSpaceMeshMeshDeformOperator::ScaleNormalBehaviour" },
			{ "hkArray<hknpVehicleInstance::WheelInfo, hkContainerHeapAllocator>", "std::vector<hknpVehicleInstance::WheelInfo>" },
			{ "hkArray<hkVariableTweakingHelper::RealVariableInfo, hkContainerHeapAllocator>", "std::vector<hkVariableTweakingHelper::RealVariableInfo>" },
			{ "T*<bool>", "bool" },
			{ "hkRefPtr<hclSimClothSetupObject>", "hclSimClothSetupObject" },
			{ "hkFlags<hkaiEdgeGeometry::FaceFlagBits, hkUint8>", "hkaiEdgeGeometry::FaceFlagBits" },
			{ "T*<hknpVehicleTransmission>", "hknpVehicleTransmission" },
			{ "T*<hkRefPtr<hknpPhysicsSystemData>>", "hknpPhysicsSystemData" },
			{ "hkEnum<hkxSpline::ControlType, unsigned char>", "hkxSpline::ControlType" },
			{ "hkRefPtr<hkaSkeletonMapper>", "hkaSkeletonMapper" },
			{ "hkEnum<hkxVertexDescription::DataType, unsigned short>", "hkxVertexDescription::DataType" },
			{ "hkEnum<hkxIndexBuffer::IndexType, signed char>", "hkxIndexBuffer::IndexType" },
			{ "hkArray<hkcdDefaultStaticMeshTree::PrimitiveDataRun, hkContainerHeapAllocator>", "std::vector<hkcdDefaultStaticMeshTree::PrimitiveDataRun>" },
			{ "char[N]<9>", "std::string" },
			{ "hkFlags<hk::ExposeBase::AccessValues, hkUint8>", "hk::ExposeBase::AccessValues" },
			{ "hkArray<hkxMaterial::TextureStage, hkContainerHeapAllocator>", "std::vector<hkxMaterial::TextureStage>" },
			{ "hkEnum<hkxVertexFloatDataChannel::VertexFloatDimensions, unsigned char>", "hkxVertexFloatDataChannel::VertexFloatDimensions" },
			{ "hkEnum<hkxMaterialShader::ShaderType, unsigned char>", "hkxMaterialShader::ShaderType" },
			{ "hkEnum<hkxLight::LightType, hkInt8>", "hkxLight::LightType" },
			{ "T*<hclMeshBoneDeformOperator::TriangleBonePair>", "hclMeshBoneDeformOperator::TriangleBonePair" },
			{ "hkEnum<hkxMaterial::Transparency, unsigned char>", "hkxMaterial::Transparency" },
			{ "hkEnum<hkxMaterial::UVMappingAlgorithm, unsigned int>", "hkxMaterial::UVMappingAlgorithm" },
			{ "hkEnum<hkxLight::LightType, signed char>", "hkxLight::LightType" },
			{ "T*<hkReflect::IntType>", "IHavokObject" },
			{ "T*<hkxMaterial::TextureStage>", "hkxMaterial::TextureStage" },
			{ "T*<hkMeshMaterial>", "hkMeshMaterial" },
			{ "hkArray<hclObjectSpaceDeformer::LocalBlockPNTB, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::LocalBlockPNTB>" },
			{ "hkEnum<hkxAttribute::Hint, unsigned char>", "hkxAttribute::Hint" },
			{ "hkFlags<hkbCustomTestGeneratorComplexTypes::CustomFlag, hkInt8>", "hkbCustomTestGeneratorComplexTypes::CustomFlag" },
			{ "hkArray<hkbFootIkModifier::Leg, hkContainerHeapAllocator>", "std::vector<hkbFootIkModifier::Leg>" },
			{ "hkUint32Le", "uint32_t" },
			{ "T*<hclStateDependencyGraph>", "hclStateDependencyGraph" },
			{ "hkTuple<hkaiIndex<hkInt32>, hkaiNavMeshInstanceData::FaceDynUserEdgeBases, void, void, void, void, void, void>", "hkTuple2<int, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>" },
			{ "T*<hkxSpline::ControlPoint>", "hkxSpline::ControlPoint" },
			{ "hkEnum<hkxVertexDescription::DataType, hkUint16>", "hkxVertexDescription::DataType" },
			{ "T*<hkHashMapDetail::MapTuple<int, hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>>>", "hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::ExternalEdges>" },
			{ "hkEnum<hkxVertexDescription::DataUsage, hkUint16>", "hkxVertexDescription::DataUsage" },
			{ "hkEnum<hkxIndexBuffer::IndexType, hkInt8>", "hkxIndexBuffer::IndexType" },
			{ "hkEnum<hkxVertexFloatDataChannel::VertexFloatDimensions, hkUint8>", "hkxVertexFloatDataChannel::VertexFloatDimensions" },
			{ "T*<hclObjectSpaceDeformer::TwoBlendEntryBlock>", "hclObjectSpaceDeformer::TwoBlendEntryBlock" },
			{ "hkArray<hkArray<hkAabb, hkContainerHeapAllocator>, hkContainerHeapAllocator>", "std::vector<std::vector<hkAabb>>" },
			{ "hkEnum<hkxMaterialShader::ShaderType, hkUint8>", "hkxMaterialShader::ShaderType" },
			{ "T*<hclSkinOperator::BoneInfluence>", "hclSkinOperator::BoneInfluence" },
			{ "T*<T*<hkbTransitionEffect>>", "hkbTransitionEffect" },
			{ "hkEnum<hkMeshTexture::TextureUsageType, hkInt8>", "hkMeshTexture::TextureUsageType" },
			{ "hkEnum<hkxMaterialEffect::EffectType, hkUint8>", "hkxMaterialEffect::EffectType" },
			{ "hkArray<hclVolumeConstraintMx::ApplyBatchData, hkContainerHeapAllocator>", "std::vector<hclVolumeConstraintMx::ApplyBatchData>" },
			{ "hkEnum<hkxMaterial::TextureType, hkInt32>", "hkxMaterial::TextureType" },
			{ "hkArray<hkRefPtr<hkaiMaterialPainter>, hkContainerHeapAllocator>", "std::vector<hkaiMaterialPainter>" },
			{ "hkEnum<hkaiSilhouetteMerger::MergeType, hkUint8>", "hkaiSilhouetteMerger::MergeType" },
			{ "hkEnum<hkxMaterial::UVMappingAlgorithm, hkUint32>", "hkxMaterial::UVMappingAlgorithm" },
			{ "hkEnum<hkbCharacterControlCommand::CharacterControlCommand, unsigned char>", "hkbCharacterControlCommand::CharacterControlCommand" },
			{ "hkArray<hknpMinMaxQuadTree::MinMaxLevel, hkContainerHeapAllocator>", "std::vector<hknpMinMaxQuadTree::MinMaxLevel>" },
			{ "hkEnum<hclLocalRangeConstraintSet::ShapeType, hkUint32>", "hclLocalRangeConstraintSet::ShapeType" },
			{ "T*<hclSimClothSetupObject::PerInstanceCollidable>", "hclSimClothSetupObject::PerInstanceCollidable" },
			{ "unsigned long long", "uint64_t" },
			{ "hkViewPtr<hknpCompressedMeshShape>", "hknpCompressedMeshShape" },
			{ "T*<hkbHandIkControlsModifier::Hand>", "hkbHandIkControlsModifier::Hand" },
			{ "hkEnum<hkbTransitionEffect::SelfTransitionMode, hkInt8>", "hkbTransitionEffect::SelfTransitionMode" },
			{ "hkFlags<hkbLayerGenerator::LayerFlagBits, unsigned short>", "hkbLayerGenerator::LayerFlagBits" },
			{ "hkEnum<hkp6DofConstraintData::AxisMode, unsigned char>", "hkp6DofConstraintData::AxisMode" },
			{ "hkEnum<hkCommand::PrimaryType, hkUint8>", "hkCommand::PrimaryType" },
			{ "hkHashMap<T*<hkReflect::Type>, T*<void>>", "hkHashMap<IHavokObject, object>" },
			{ "T*<hkMultipleVertexBuffer::LockedElement>", "hkMultipleVertexBuffer::LockedElement" },
			{ "hkEnum<hkpCallbackConstraintMotor::CallbackType, unsigned int>", "hkpCallbackConstraintMotor::CallbackType" },
			{ "T*<hkaiReferencedArray<hkVector4>>", "hkaiReferencedArray<Vector4>" },
			{ "hkEnum<hkModelerNodeTypeAttribute::ModelerType, signed char>", "hkModelerNodeTypeAttribute::ModelerType" },
			{ "hkRefPtr<hkbEventRangeDataArray>", "hkbEventRangeDataArray" },
			{ "hkEnum<hkpPointToPathConstraintData::OrientationConstraintType, signed char>", "hkpPointToPathConstraintData::OrientationConstraintType" },
			{ "T*<hkaiOverlapManager::PendingUpdate>", "hkaiOverlapManager::PendingUpdate" },
			{ "T*<T*<hclStorageSetupMeshSection::BoneInfluences>>", "hclStorageSetupMeshSection::BoneInfluences" },
			{ "hkArray<hclStandardLinkConstraintSetMx::Single, hkContainerHeapAllocator>", "std::vector<hclStandardLinkConstraintSetMx::Single>" },
			{ "hkEnum<hkMeshSection::PrimitiveType, hkUint8>", "hkMeshSection::PrimitiveType" },
			{ "T*<hkGpuTraceResult>", "hkGpuTraceResult" },
			{ "hkEnum<hkpConeLimitConstraintAtom::MeasurementMode, unsigned char>", "hkpConeLimitConstraintAtom::MeasurementMode" },
			{ "hkEnum<hkpConstraintAtom::SolvingMethod, unsigned char>", "hkpConstraintAtom::SolvingMethod" },
			{ "hkEnum<hkpConstraintAtom::AtomType, unsigned short>", "hkpConstraintAtom::AtomType" },
			{ "T*<hkRefPtr<hkxVertexAnimation>>", "hkxVertexAnimation" },
			{ "hkEnum<hkp6DofConstraintData::AxisMode, hkUint8>", "hkp6DofConstraintData::AxisMode" },
			{ "T*<hclStateTransition::SimClothTransitionData>", "hclStateTransition::SimClothTransitionData" },
			{ "T*<hkaiVolumeNavigatorManager>", "hkaiVolumeNavigatorManager" },
			{ "hkEnum<hkpCallbackConstraintMotor::CallbackType, hkUint32>", "hkpCallbackConstraintMotor::CallbackType" },
			{ "hkHashMap<hkaiIndex<hkInt32>, hkaiNavMeshCutConfiguration::FaceInfo>", "hkHashMap<int, hkaiNavMeshCutConfiguration::FaceInfo>" },
			{ "hkTuple<int, hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>, void, void, void, void, void, void>", "hkTuple2<int, hkaiDynamicUserEdgeSetInfo::ExternalEdges>" },
			{ "hkEnum<hkbAssetBundle::BundleType, signed char>", "hkbAssetBundle::BundleType" },
			{ "hkArray<hkMeshBoneIndexMapping, hkContainerHeapAllocator>", "std::vector<hkMeshBoneIndexMapping>" },
			{ "hkArray<hclBonePlanesSetupObject::PerParticleAngle, hkContainerHeapAllocator>", "std::vector<hclBonePlanesSetupObject::PerParticleAngle>" },
			{ "hkEnum<hkModelerNodeTypeAttribute::ModelerType, hkInt8>", "hkModelerNodeTypeAttribute::ModelerType" },
			{ "T*<hkUint8>", "uint8_t" },
			{ "hkEnum<hkpPointToPathConstraintData::OrientationConstraintType, hkInt8>", "hkpPointToPathConstraintData::OrientationConstraintType" },
			{ "hkEnum<hkbCharacterControllerModifier::InitialVelocityCoordinates, signed char>", "hkbCharacterControllerModifier::InitialVelocityCoordinates" },
			{ "hkEnum<hkpConeLimitConstraintAtom::MeasurementMode, hkUint8>", "hkpConeLimitConstraintAtom::MeasurementMode" },
			{ "hkEnum<hkaiPath::ReferenceFrame, hkUint8>", "hkaiPath::ReferenceFrame" },
			{ "hkEnum<hkbShapeSetup::Type, hkInt8>", "hkbShapeSetup::Type" },
			{ "hkArray<hkaAnnotationTrack, hkContainerHeapAllocator>", "std::vector<hkaAnnotationTrack>" },
			{ "hkEnum<hkpConstraintAtom::SolvingMethod, hkUint8>", "hkpConstraintAtom::SolvingMethod" },
			{ "hkRefPtr<hkaiStreamingSet>", "hkaiStreamingSet" },
			{ "hkViewPtr<hkaiVolumeNavigator>", "hkaiVolumeNavigator" },
			{ "hkRefPtr<hkaiNavMeshCutter>", "hkaiNavMeshCutter" },
			{ "hkHashMap<hkaiIndex<hkInt32>, hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>>", "hkHashMap<int, hkaiDynamicUserEdgeSetInfo::ExternalEdges>" },
			{ "hkEnum<hkbClipGenerator::PlaybackMode, signed char>", "hkbClipGenerator::PlaybackMode" },
			{ "hkArray<hkRefPtr<hkMemoryResourceContainer>, hkContainerHeapAllocator>", "std::vector<hkMemoryResourceContainer>" },
			{ "hkTuple<int, hkaiDefaultDynamicUserEdgeSetInfo::Section, void, void, void, void, void, void>", "hkTuple2<int, hkaiDefaultDynamicUserEdgeSetInfo::Section>" },
			{ "hkEnum<hkbVariableBindingSet::Binding::BindingType, signed char>", "hkbVariableBindingSet::Binding::BindingType" },
			{ "hkEnum<hkbAlignBoneModifier::AlignModeABAM, signed char>", "hkbAlignBoneModifier::AlignModeABAM" },
			{ "hkRefPtr<hknpConvexPolytopeShape::Connectivity>", "hknpConvexPolytopeShape::Connectivity" },
			{ "hkEnum<hkaiNavVolumeGenerationSettings::CellWidthToResolutionRounding, unsigned char>", "hkaiNavVolumeGenerationSettings::CellWidthToResolutionRounding" },
			{ "hkEnum<hkAttributeHideCriteria::Types, signed char>", "hkAttributeHideCriteria::Types" },
			{ "hkArray<hknpShapeInstanceId, hkContainerHeapAllocator>", "std::vector<hknpShapeInstanceId>" },
			{ "hkcdDynamicTree::DynamicStorage<0, hkcdDynamicTree::AnisotropicMetric, hkcdDynamicTree::Codec32>", "hkcdDynamicTree::DynamicStorageAnisotropicMetricCodec32" },
			{ "hkFlags<hkVertexFormat::HintFlags, unsigned char>", "hkVertexFormat::HintFlags" },
			{ "const char*", "std::string" },
			{ "hkEnum<hkbEventDrivenBlendingObject::InternalState::FadingState, signed char>", "hkbEventDrivenBlendingObject::InternalState::FadingState" },
			{ "hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>>", "hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::ExternalEdges>" },
			{ "hkEnum<hkVertexFormat::ComponentUsage, unsigned char>", "hkVertexFormat::ComponentUsage" },
			{ "hkRefPtr<hkaiVolume>", "hkaiVolume" },
			{ "hkEnum<hkMeshTexture::TextureUsageType, signed char>", "hkMeshTexture::TextureUsageType" },
			{ "hkFlags<hk::ExposeBase::ScopeValues, hkUint8>", "hk::ExposeBase::ScopeValues" },
			{ "T*<hkHashMapDetail::MapTuple<int, hkaiModifiedSections::Section>>", "hkHashMapDetail::MapTuple<int, hkaiModifiedSections::Section>" },
			{ "T*<PropertyBagTest::GraphObject>", "PropertyBagTest::GraphObject" },
			{ "T*<hkVector4f>", "hkVector4Holder" },
			{ "hkEnum<hkMeshTexture::FilterMode, signed char>", "hkMeshTexture::FilterMode" },
			{ "T*<hkRefPtr<hkaMeshBinding>>", "hkaMeshBinding" },
			{ "hkEnum<hkMeshTexture::Format, signed char>", "hkMeshTexture::Format" },
			{ "T*<hkxVertexAnimation::UsageMap>", "hkxVertexAnimation::UsageMap" },
			{ "signed char", "int8_t" },
			{ "hkFlags<hkbCustomTestGeneratorComplexTypes::CustomFlag, int>", "hkbCustomTestGeneratorComplexTypes::CustomFlag" },
			{ "hkFlags<hkaiLineOfSightUtil::UserEdgeFlagBits, unsigned char>", "hkaiLineOfSightUtil::UserEdgeFlagBits" },
			{ "hkEnum<hkbDockingGenerator::BlendType, hkInt8>", "hkbDockingGenerator::BlendType" },
			{ "long", "int" },
			{ "hkEnum<hkMeshSection::MeshSectionIndexType, unsigned char>", "hkMeshSection::MeshSectionIndexType" },
			{ "hkFlags<hkbCustomTestGeneratorComplexTypes::CustomFlag, unsigned short>", "hkbCustomTestGeneratorComplexTypes::CustomFlag" },
			{ "hkHandle<unsigned int, -1>", "hkHandle<uint32_t>" },
			{ "hkFlags<hkVertexFormat::HintFlags, hkUint8>", "hkVertexFormat::HintFlags" },
			{ "hkEnum<hkCommand::PrimaryType, unsigned char>", "hkCommand::PrimaryType" },
			{ "hkRefPtr<hkaiNavMeshPathRequestInfo>", "hkaiNavMeshPathRequestInfo" },
			{ "hkArray<T*<hclConstraintSet>, hkContainerHeapAllocator>", "std::vector<hclConstraintSet>" },
			{ "hkEnum<hclVertexGatherSetupObject::Direction, hkUint32>", "hclVertexGatherSetupObject::Direction" },
			{ "hkEnum<hkVertexFormat::ComponentUsage, hkUint8>", "hkVertexFormat::ComponentUsage" },
			{ "T*<hkbEventPayload>", "hkbEventPayload" },
			{ "hkRefPtr<hkxEnum>", "hkxEnum" },
			{ "hkEnum<hkbEvaluateHandleModifier::HandleChangeMode, hkInt8>", "hkbEvaluateHandleModifier::HandleChangeMode" },
			{ "T*<hclVirtualCollisionPointsData::TriangleFan>", "hclVirtualCollisionPointsData::TriangleFan" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<int, hkRefPtr<hkaiStreamingSet>>>", "hkHashBase<hkHashMapDetail::MapTuple<int, hkaiStreamingSet>>" },
			{ "hkEnum<hkMeshTexture::Format, hkInt8>", "hkMeshTexture::Format" },
			{ "hkEnum<hkMeshSection::MeshSectionIndexType, hkUint8>", "hkMeshSection::MeshSectionIndexType" },
			{ "T*<hknpTyremarkPoint>", "hknpTyremarkPoint" },
			{ "T*<hkaiDynamicUserEdgeSetInfo::UserEdgePair>", "hkaiDynamicUserEdgeSetInfo::UserEdgePair" },
			{ "hkEnum<hclStateTransition::TransitionType, hkUint32>", "hclStateTransition::TransitionType" },
			{ "T*<hkbRealVariableSequencedData::Sample>", "hkbRealVariableSequencedData::Sample" },
			{ "hkHashMap<hkaiIndex<hkInt32>, hkaiDynamicUserEdgeSetInfo::Section>", "hkHashMap<int, hkaiDynamicUserEdgeSetInfo::Section>" },
			{ "T*<unsigned short>", "uint16_t" },
			{ "hkUlong", "uint64_t" },
			{ "hkEnum<hkaiUserEdgeUtils::UserEdgeDirection, hkUint8>", "hkaiUserEdgeUtils::UserEdgeDirection" },
			{ "hkaiPackedKey_<hkaiIndex<int>, hkaiIndex<int>>", "uint32_t" },
			{ "hkHashMapDetail::MapTuple<unsigned long long, T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>>", "hkHashMapDetail::MapTuple<uint64_t, hkHashMap<IHavokObject, object>>" },
			{ "hkEnum<hclStateTransition::TransitionType, unsigned int>", "hclStateTransition::TransitionType" },
			{ "hkUint64Le", "uint64_t" },
			{ "hkArray<hkRefPtr<hkaiCharacter>, hkContainerHeapAllocator>", "std::vector<hkaiCharacter>" },
			{ "hkEnum<hkAttributeHideCriteria::Types, hkInt8>", "hkAttributeHideCriteria::Types" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, int>>", "hkHashBase<hkHashMapDetail::MapTuple<int, int>>" },
			{ "hkUint32Be", "uint32_t" },
			{ "T*<hkDefaultCompoundMeshShape>", "hkDefaultCompoundMeshShape" },
			{ "hkHandle<hkUint32, 2147483647>", "hkHandle<uint32_t>" },
			{ "hkRefPtr<hkaiCollisionAvoidance::ReferencedScoreModifier>", "hkaiCollisionAvoidance::ReferencedScoreModifier" },
			{ "T*<hkMultipleVertexBuffer::ElementInfo>", "hkMultipleVertexBuffer::ElementInfo" },
			{ "hkUint16Be", "uint16_t" },
			{ "hkUint8Be", "uint8_t" },
			{ "T*<hkaiSingleCharacterBehavior::RequestedGoalPoint>", "hkaiSingleCharacterBehavior::RequestedGoalPoint" },
			{ "T*<hkVariableTweakingHelper::RealVariableInfo>", "hkVariableTweakingHelper::RealVariableInfo" },
			{ "hkSet<hkIntRealPair, hkContainerHeapAllocator, hkMapOperations<hkIntRealPair>>", "hkSet<hkIntRealPair, hkContainerHeapAllocator>" },
			{ "T*<hkaiReferencedArray<hkQTransform>>", "hkaiReferencedArray<hkQTransform>" },
			{ "hkInt64Be", "long" },
			{ "hkInt64Le", "long" },
			{ "T*<fsnpCustomMeshParameter::PrimitiveData>", "fsnpCustomMeshParameter::PrimitiveData" },
			{ "hkEnum<hkbCustomTestGeneratorComplexTypes::CustomEnum, short>", "hkbCustomTestGeneratorComplexTypes::CustomEnum" },
			{ "hkInt32Le", "int" },
			{ "hk::ValueAttribute<T*<hkUint16>>", "hk::ValueAttribute<uint16_t>" },
			{ "hkInt16Be", "short" },
			{ "hkInt16Le", "short" },
			{ "TestContainerThingEnd<hkReal, 2>", "TestContainerThingEnd<float>" },
			{ "hkFlags<hkbBodyIkControlBits::Enum, hkUint16>", "hkbBodyIkControlBits::Enum" },
			{ "hkInt8Be", "int8_t" },
			{ "T*<hclOperatorSetupObject>", "hclOperatorSetupObject" },
			{ "hkInt8Le", "int8_t" },
			{ "hkEnum<hkbBodyIkControlsModifier::PosePredictionMode, hkInt8>", "hkbBodyIkControlsModifier::PosePredictionMode" },
			{ "hkEnum<hkLinkAttribute::Link, signed char>", "hkLinkAttribute::Link" },
			{ "T*<T*<hkbStateMachine::StateInfo>>", "hkbStateMachine::StateInfo" },
			{ "char", "uint8_t" },
			{ "long long", "long" },
			{ "hkArray<hclGatherSomeVerticesOperator::VertexPair, hkContainerHeapAllocator>", "std::vector<hclGatherSomeVerticesOperator::VertexPair>" },
			{ "unsigned long", "uint32_t" },
			{ "hkEnum<hkbStateMachine::StateMachineSelfTransitionMode, signed char>", "hkbStateMachine::StateMachineSelfTransitionMode" },
			{ "hkArray<hknpBody, hkContainerHeapAllocator>", "std::vector<hknpBody>" },
			{ "hkArray<hkInt16, hkContainerHeapAllocator>", "std::vector<short>" },
			{ "unsigned int", "uint32_t" },
			{ "hkViewPtr<hkaiWorld>", "hkaiWorld" },
			{ "T*<hknpShapeInstance>", "hknpShapeInstance" },
			{ "hkArray<hkbStateMachine::DelayedTransitionInfo, hkContainerHeapAllocator>", "std::vector<hkbStateMachine::DelayedTransitionInfo>" },
			{ "hkSet<unsigned int, hkContainerHeapAllocator, hkMapOperations<unsigned int>>", "hkSet<uint32_t, hkContainerHeapAllocator>" },
			{ "hkArray<T*<hclClothState>, hkContainerHeapAllocator>", "std::vector<hclClothState>" },
			{ "unsigned char", "uint8_t" },
			{ "hkInt16", "short" },
			{ "T*<hclStateTransitionSetupObject>", "hclStateTransitionSetupObject" },
			{ "hkEnum<hkbTransitionEffect::EventMode, hkInt8>", "hkbTransitionEffect::EventMode" },
			{ "hkFlags<hkPropertyFlags::Enum, unsigned int>", "hkPropertyFlags::Enum" },
			{ "T*<hclBoneSpaceDeformer::LocalBlockP>", "hclBoneSpaceDeformer::LocalBlockP" },
			{ "hkFlags<hkbCustomTestGeneratorComplexTypes::CustomFlag, hkUint32>", "hkbCustomTestGeneratorComplexTypes::CustomFlag" },
			{ "hkArray<hclVolumeConstraint::ApplyData, hkContainerHeapAllocator>", "std::vector<hclVolumeConstraint::ApplyData>" },
			{ "hkAtomic::Variable<hkUint8>", "hkAtomic::Variable<uint8_t>" },
			{ "hkEnum<hctAttributeDescription20151::Hint, signed char>", "hctAttributeDescription20151::Hint" },
			{ "T*<hkRefPtr<hkxSkinBinding>>", "hkxSkinBinding" },
			{ "hkEnum<hctAttributeDescription20151::ForcedType, signed char>", "hctAttributeDescription20151::ForcedType" },
			{ "hkFlags<hk::ExposeBase::ScopeValues, unsigned char>", "hk::ExposeBase::ScopeValues" },
			{ "hkcdDynamicTree::CodecRaw<hkUlong>", "hkcdDynamicTree::CodecRaw<uint64_t>" },
			{ "hkFlags<hk::ExposeBase::AccessValues, unsigned char>", "hk::ExposeBase::AccessValues" },
			{ "hkReflect::Decl::DeclFlags", "int" },
			{ "hkEnum<hk::PreferredSerializationFormat::Format, unsigned int>", "hk::PreferredSerializationFormat::Format" },
			{ "hkArray<hclVirtualCollisionPointsData::TriangleFanSection, hkContainerHeapAllocator>", "std::vector<hclVirtualCollisionPointsData::TriangleFanSection>" },
			{ "T*<hkbEventRangeData>", "hkbEventRangeData" },
			{ "T*<hkSkinnedMeshShape::BoneSection>", "hkSkinnedMeshShape::BoneSection" },
			{ "hkEnum<hkGpuTraceResult::ScopeType, unsigned short>", "hkGpuTraceResult::ScopeType" },
			{ "T*<T*<hclStorageSetupMeshSection::SectionEdgeSelectionChannel>>", "hclStorageSetupMeshSection::SectionEdgeSelectionChannel" },
			{ "hkEnum<hkbCustomTestGeneratorComplexTypes::CustomEnum, hkUint16>", "hkbCustomTestGeneratorComplexTypes::CustomEnum" },
			{ "hkEnum<hkMonitorStreamFrameInfo::AbsoluteTimeCounter, unsigned int>", "hkMonitorStreamFrameInfo::AbsoluteTimeCounter" },
			{ "hkArray<hkaSkeletonMapperData::ChainMapping, hkContainerHeapAllocator>", "std::vector<hkaSkeletonMapperData::ChainMapping>" },
			{ "hkFlags<hkPropertyFlags::Enum, hkUint32>", "hkPropertyFlags::Enum" },
			{ "hkFlags<hkReflect::Decl::DeclFlagBits, int>", "hkReflect::Decl::DeclFlagBits" },
			{ "hkRefPtr<hkxSkinBinding>", "hkxSkinBinding" },
			{ "hkArray<hknpExtendedExternMeshShapeGeometry::Triangle, hkContainerHeapAllocator>", "std::vector<hknpExtendedExternMeshShapeGeometry::Triangle>" },
			{ "hkFloat32Be", "float" },
			{ "hkEnum<hkLinkAttribute::Link, hkInt8>", "hkLinkAttribute::Link" },
			{ "hkViewPtr<hkaiCollisionAvoidance::Character>", "hkaiCollisionAvoidance::Character" },
			{ "hkEnum<hk::PreferredSerializationFormat::Format, hkUint32>", "hk::PreferredSerializationFormat::Format" },
			{ "hkEnum<hkGpuTraceResult::ScopeType, hkUint16>", "hkGpuTraceResult::ScopeType" },
			{ "hkEnum<hkMonitorStreamFrameInfo::AbsoluteTimeCounter, hkUint32>", "hkMonitorStreamFrameInfo::AbsoluteTimeCounter" },
			{ "hkUintReal", "uint32_t" },
			{ "hkEnum<hkaAnimation::AnimationType, hkInt32>", "hkaAnimation::AnimationType" },
			{ "T*<hkaiAvoidanceSolver::BoundaryObstacle>", "hkaiAvoidanceSolver::BoundaryObstacle" },
			{ "hkEnum<hkaiReferenceFrameAndExtrusion::UpVectorTransformMethod, hkUint8>", "hkaiReferenceFrameAndExtrusion::UpVectorTransformMethod" },
			{ "hkLong", "long" },
			{ "T*<hkaAnnotationTrack::Annotation>", "hkaAnnotationTrack::Annotation" },
			{ "hkEnum<hkbParticleSystemEventPayload::SystemType, unsigned char>", "hkbParticleSystemEventPayload::SystemType" },
			{ "hkArray<hkMultipleVertexBuffer::VertexBufferInfo, hkContainerHeapAllocator>", "std::vector<hkMultipleVertexBuffer::VertexBufferInfo>" },
			{ "hkFlags<hkaiNavVolume::CellEdgeFlagBits, hkUint8>", "hkaiNavVolume::CellEdgeFlagBits" },
			{ "hkArray<hclVolumeConstraintMx::ApplySingleData, hkContainerHeapAllocator>", "std::vector<hclVolumeConstraintMx::ApplySingleData>" },
			{ "hkEnum<hkbGeneratorTransitionEffect::Stage, signed char>", "hkbGeneratorTransitionEffect::Stage" },
			{ "hkUint32", "uint32_t" },
			{ "hkUint8", "uint8_t" },
			{ "T*<hkaiNavigatorManager>", "hkaiNavigatorManager" },
			{ "hkFlags<hkbCustomTestGeneratorComplexTypes::CustomFlag, hkInt16>", "hkbCustomTestGeneratorComplexTypes::CustomFlag" },
			{ "T*<hknpHeightFieldGeometry>", "hknpHeightFieldGeometry" },
			{ "hkInt64", "long" },
			{ "hkArray<hkHashSet<hkaiIndex<hkInt32>>, hkContainerHeapAllocator>", "std::vector<hkHashSet<int>>" },
			{ "T*<hclObjectSpaceDeformer::LocalBlockPN>", "hclObjectSpaceDeformer::LocalBlockPN" },
			{ "T*<hkbPoseStoringGeneratorOutputstd::vectorener::StoredPose>", "hkbPoseStoringGeneratorOutputstd::vectorener::StoredPose" },
			{ "hkRefPtr<hkaiNavigator::NavigatorSettings>", "hkaiNavigator::NavigatorSettings" },
			{ "hkArray<hknpVehicleDefaultBrake::WheelBrakingProperties, hkContainerHeapAllocator>", "std::vector<hknpVehicleDefaultBrake::WheelBrakingProperties>" },
			{ "hkEnum<hkaiCharacter::State, hkUint8>", "hkaiCharacter::State" },
			{ "hk::ValueAttribute<unsigned short>", "hk::ValueAttribute<uint16_t>" },
			{ "hkUint64", "uint64_t" },
			{ "hkFlags<hkbStateMachine::TransitionInfo::TransitionFlags, hkInt16>", "hkbStateMachine::TransitionInfo::TransitionFlags" },
			{ "hkEnum<hkaiWorld::CharacterCallbackType, unsigned char>", "hkaiWorld::CharacterCallbackType" },
			{ "hkArray<hkRefPtr<hkaAnimationBinding>, hkContainerHeapAllocator>", "std::vector<hkaAnimationBinding>" },
			{ "hkColor::Argb", "Color" },
			{ "hkRefPtr<hkxSpline>", "hkxSpline" },
			{ "hkEnum<hkbSimulationControlCommand::SimulationControlCommand, unsigned char>", "hkbSimulationControlCommand::SimulationControlCommand" },
			{ "hkArray<hkaiReferenceFrame, hkContainerHeapAllocator>", "std::vector<hkaiReferenceFrame>" },
			{ "hkHandle<unsigned short, 65535>", "hkHandle<uint16_t>" },
			{ "hkHashMapDetail::MapTuple<int, hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>>", "hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::ExternalEdges>" },
			{ "T*<hkaiNavigator>", "hkaiNavigator" },
			{ "hkRefPtr<hkxMesh>", "hkxMesh" },
			{ "hkArray<hkRefPtr<hkaiCollisionAvoidance::ObstacleGenerator>, hkContainerHeapAllocator>", "std::vector<hkaiCollisionAvoidance::ObstacleGenerator>" },
			{ "hkEnum<hkbFootIkModifier::AlignMode, signed char>", "hkbFootIkModifier::AlignMode" },
			{ "T*<hknp1dAngularFollowCamCinfo::CameraSet>", "hknp1dAngularFollowCamCinfo::CameraSet" },
			{ "hkEnum<hkbSenseHandleModifier::SensingMode, hkInt8>", "hkbSenseHandleModifier::SensingMode" },
			{ "hkRefPtr<hkbBehaviorGraph>", "hkbBehaviorGraph" },
			{ "hkEnum<hclVertexSelectionInput::VertexSelectionType, hkUint32>", "hclVertexSelectionInput::VertexSelectionType" },
			{ "hkFlags<hkbBlendingTransitionEffect::FlagBits, hkUint16>", "hkbBlendingTransitionEffect::FlagBits" },
			{ "T*<hkaiReferencedArray<hkaiUserEdgeUtils::UserEdgePair>>", "hkaiReferencedArray<hkaiUserEdgeUtils::UserEdgePair>" },
			{ "T*<hkReflect::StringType>", "IHavokObject" },
			{ "hkFlags<hkbBodyIkControlBits::Enum, short>", "hkbBodyIkControlBits::Enum" },
			{ "T*<hclObjectSpaceDeformer::LocalBlockUnpackedPNT>", "hclObjectSpaceDeformer::LocalBlockUnpackedPNT" },
			{ "T*<hkxVertexBuffer>", "hkxVertexBuffer" },
			{ "hkRefPtr<hknpBodyQuality>", "hknpBodyQuality" },
			{ "hkcdDynamicTree::Tree<hkcdDynamicTree::DefaultDynamicStorage<hkcdDynamicTree::CodecRaw<unsigned int>>>", "hkcdDynamicTree::TreeDefaultDynamicStorageCodecRaw_Uint" },
			{ "hkReflect::QualifiedType<hkReflect::BoolType>", "IHavokObject" },
			{ "hkFreestd::vectorArray<hknpMaterial, 8>", "hkFreestd::vectorArrayHknpMaterial" },
			{ "hkEnum<hkaAnimatedReferenceFrame::hkaReferenceFrameTypeEnum, signed char>", "hkaAnimatedReferenceFrame::hkaReferenceFrameTypeEnum" },
			{ "TestContainerThingEnd<float, 2>", "TestContainerThingEnd<float>" },
			{ "T*<hclObjectSpaceDeformer::LocalBlockP>", "hclObjectSpaceDeformer::LocalBlockP" },
			{ "hkEnum<hkaSkeletonMapperData::MappingType, int>", "hkaSkeletonMapperData::MappingType" },
			{ "hkArray<hkaiStreamingCollectionInstanceInfo, hkContainerHeapAllocator>", "std::vector<hkaiStreamingCollectionInstanceInfo>" },
			{ "hkEnum<hkaAnimationBinding::BlendHint, signed char>", "hkaAnimationBinding::BlendHint" },
			{ "hkEnum<hkaSplineCompressedAnimation::TrackCompressionParams::ScalarQuantization, unsigned char>", "hkaSplineCompressedAnimation::TrackCompressionParams::ScalarQuantization" },
			{ "hkRefPtr<hkaiDynamicNavMeshQueryMediator>", "hkaiDynamicNavMeshQueryMediator" },
			{ "hkEnum<hkaSplineCompressedAnimation::TrackCompressionParams::RotationQuantization, unsigned char>", "hkaSplineCompressedAnimation::TrackCompressionParams::RotationQuantization" },
			{ "hkEnum<hclMeshMeshDeformSetupObject::TriangleWeightMode, hkUint32>", "hclMeshMeshDeformSetupObject::TriangleWeightMode" },
			{ "hkArray<hknpMaterialDescriptor, hkContainerHeapAllocator>", "std::vector<hknpMaterialDescriptor>" },
			{ "hkEnum<hkaiWorld::ClearanceResetMethod, hkUint8>", "hkaiWorld::ClearanceResetMethod" },
			{ "hkEnum<hkaAnimatedReferenceFrame::hkaReferenceFrameTypeEnum, hkInt8>", "hkaAnimatedReferenceFrame::hkaReferenceFrameTypeEnum" },
			{ "hkRefPtr<hkGeometry>", "hkGeometry" },
			{ "hkEnum<hkaSkeletonMapperData::MappingType, hkInt32>", "hkaSkeletonMapperData::MappingType" },
			{ "T*<hkaiNavMesh>", "hkaiNavMesh" },
			{ "hkArray<hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::Section>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::Section>>" },
			{ "hkTuple<int, hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>, void, void, void, void, void, void>", "hkTuple2<int, std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>>" },
			{ "hkEnum<hkaAnimationBinding::BlendHint, hkInt8>", "hkaAnimationBinding::BlendHint" },
			{ "hkEnum<hkaSplineCompressedAnimation::TrackCompressionParams::ScalarQuantization, hkUint8>", "hkaSplineCompressedAnimation::TrackCompressionParams::ScalarQuantization" },
			{ "hkEnum<hkaSplineCompressedAnimation::TrackCompressionParams::RotationQuantization, hkUint8>", "hkaSplineCompressedAnimation::TrackCompressionParams::RotationQuantization" },
			{ "hkArray<hkVariableTweakingHelper::BoolVariableInfo, hkContainerHeapAllocator>", "std::vector<hkVariableTweakingHelper::BoolVariableInfo>" },
			{ "hkEnum<hclSimClothBufferSetupObject::Type, hkUint32>", "hclSimClothBufferSetupObject::Type" },
			{ "hkHandle<short, 32767>", "hkHandle<short>" },
			{ "hkArray<hkaiPackedKey_<hkaiIndex<hkInt32>, hkaiIndex<hkInt32>>, hkContainerHeapAllocator>", "std::vector<uint32_t>" },
			{ "hkEnum<hkaiGatePathUtil::GateTypeValues, hkUint8>", "hkaiGatePathUtil::GateTypeValues" },
			{ "hkArray<hkaiIndex<hkInt32>, hkContainerHeapAllocator>", "std::vector<int>" },
			{ "hkArray<hkVariableTweakingHelper::Vector4VariableInfo, hkContainerHeapAllocator>", "std::vector<hkVariableTweakingHelper::Vector4VariableInfo>" },
			{ "hkEnum<hclVertexSelectionInput::VertexSelectionType, unsigned int>", "hclVertexSelectionInput::VertexSelectionType" },
			{ "T*<hkxNode>", "hkxNode" },
			{ "hkArray<hkQTransform, hkContainerHeapAllocator>", "std::vector<hkQTransform>" },
			{ "hkEnum<hclVertexFloatInput::VertexFloatType, unsigned int>", "hclVertexFloatInput::VertexFloatType" },
			{ "hkEnum<hclTriangleSelectionInput::TriangleSelectionType, unsigned int>", "hclTriangleSelectionInput::TriangleSelectionType" },
			{ "hkEnum<hkbConstraintSetup::Type, signed char>", "hkbConstraintSetup::Type" },
			{ "hkEnum<hkbCustomTestGeneratorComplexTypes::CustomEnum, int>", "hkbCustomTestGeneratorComplexTypes::CustomEnum" },
			{ "hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiModifiedSections::Section>", "hkHashMapDetail::MapTuple<int, hkaiModifiedSections::Section>" },
			{ "hkEnum<hclEdgeSelectionInput::EdgeSelectionType, unsigned int>", "hclEdgeSelectionInput::EdgeSelectionType" },
			{ "hkEnum<hkbSenseHandleModifier::SensingMode, signed char>", "hkbSenseHandleModifier::SensingMode" },
			{ "hkFreestd::vectorArrayElement<hknpMaterial>", "hkFreestd::vectorArrayElementHknpMaterial" },
			{ "hkEnum<hclSetupMesh::TriangleChannelType, unsigned int>", "hclSetupMesh::TriangleChannelType" },
			{ "hkEnum<hclSetupMesh::EdgeChannelType, unsigned int>", "hclSetupMesh::EdgeChannelType" },
			{ "hkEnum<hclMeshMeshDeformSetupObject::TriangleWeightMode, unsigned int>", "hclMeshMeshDeformSetupObject::TriangleWeightMode" },
			{ "char[N]<128>", "std::string" },
			{ "T*<hkBaseObject>", "hkBaseObject" },
			{ "hkArray<hkaiSearchExpansionRecord::hkaiSingleExpansionRecord, hkContainerHeapAllocator>", "std::vector<hkaiSearchExpansionRecord::hkaiSingleExpansionRecord>" },
			{ "hkEnum<hclEdgeSelectionInput::EdgeSelectionType, hkUint32>", "hclEdgeSelectionInput::EdgeSelectionType" },
			{ "hkArray<hclBonePlanesSetupObject::GlobalPlane, hkContainerHeapAllocator>", "std::vector<hclBonePlanesSetupObject::GlobalPlane>" },
			{ "hkEnum<hkbBlendingTransitionEffect::EndMode, signed char>", "hkbBlendingTransitionEffect::EndMode" },
			{ "hkEnum<hclSetupMesh::TriangleChannelType, hkUint32>", "hclSetupMesh::TriangleChannelType" },
			{ "hkEnum<hclSetupMesh::EdgeChannelType, hkUint32>", "hclSetupMesh::EdgeChannelType" },
			{ "T*<hkbBodyIkControlsModifier::ControlData>", "hkbBodyIkControlsModifier::ControlData" },
			{ "T*<hknpParticle4Faces>", "hknpParticle4Faces" },
			{ "hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkRefPtr<hkaiStreamingSet>>", "hkHashMapDetail::MapTuple<int, hkaiStreamingSet>" },
			{ "hkEnum<hkbAssetBundle::BundleType, hkInt8>", "hkbAssetBundle::BundleType" },
			{ "T*<hkaiAstarEdgeFilter>", "hkaiAstarEdgeFilter" },
			{ "hkEnum<hkaiNavMeshGenerationUtilsSettings::EdgeMatchingMetric, unsigned int>", "hkaiNavMeshGenerationUtilsSettings::EdgeMatchingMetric" },
			{ "hkRefPtr<hclClothData>", "hclClothData" },
			{ "hkEnum<hkbNode::CloneState, signed char>", "hkbNode::CloneState" },
			{ "hkScopedPtr<hknpParticleShapeProperties>", "hknpParticleShapeProperties" },
			{ "hkEnum<hkbAttachmentSetup::AttachmentType, signed char>", "hkbAttachmentSetup::AttachmentType" },
			{ "hkArray<hkbLayerGenerator::LayerInternalState, hkContainerHeapAllocator>", "std::vector<hkbLayerGenerator::LayerInternalState>" },
			{ "hkEnum<hkbCustomTestGeneratorComplexTypes::CustomEnum, hkInt16>", "hkbCustomTestGeneratorComplexTypes::CustomEnum" },
			{ "hkArray<hclBlendSomeVerticesOperator::BlendEntry, hkContainerHeapAllocator>", "std::vector<hclBlendSomeVerticesOperator::BlendEntry>" },
			{ "hkEnum<hkbCustomTestGeneratorComplexTypes::CustomEnum, unsigned short>", "hkbCustomTestGeneratorComplexTypes::CustomEnum" },
			{ "hkArray<hclObjectSpaceDeformer::LocalBlockP, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::LocalBlockP>" },
			{ "hkEnum<hclObjectSpaceMeshMeshDeformOperator::ScaleNormalBehaviour, unsigned int>", "hclObjectSpaceMeshMeshDeformOperator::ScaleNormalBehaviour" },
			{ "T*<hkaiNavMeshQueryMediator>", "hkaiNavMeshQueryMediator" },
			{ "hkEnum<hclClothData::Platform, unsigned int>", "hclClothData::Platform" },
			{ "T*<hkbBlenderGeneratorChild>", "hkbBlenderGeneratorChild" },
			{ "hkArray<hkVector2, hkContainerHeapAllocator>", "std::vector<hkVector2>" },
			{ "hkEnum<hclBufferLayout::SlotFlags, unsigned char>", "hclBufferLayout::SlotFlags" },
			{ "hkArray<T*<hctClothSetupClothData20141Options>, hkContainerHeapAllocator>", "std::vector<hctClothSetupClothData20141Options>" },
			{ "T*<hkaiNavVolumeGenerationSettings::MaterialConstructionInfo>", "hkaiNavVolumeGenerationSettings::MaterialConstructionInfo" },
			{ "hkEnum<hclBufferLayout::TriangleFormat, unsigned char>", "hclBufferLayout::TriangleFormat" },
			{ "hkEnum<hkaiNavVolumeGenerationSettings::CellWidthToResolutionRounding, hkUint8>", "hkaiNavVolumeGenerationSettings::CellWidthToResolutionRounding" },
			{ "T*<hkbFootIkDriverInfo::Leg>", "hkbFootIkDriverInfo::Leg" },
			{ "hkArray<hclBoneSpaceDeformer::LocalBlockUnpackedPNT, hkContainerHeapAllocator>", "std::vector<hclBoneSpaceDeformer::LocalBlockUnpackedPNT>" },
			{ "hkViewPtr<hkaiStreamingCollection>", "hkaiStreamingCollection" },
			{ "hkEnum<hclObjectSpaceMeshMeshDeformOperator::ScaleNormalBehaviour, hkUint32>", "hclObjectSpaceMeshMeshDeformOperator::ScaleNormalBehaviour" },
			{ "T*<hclBoneSpaceDeformer::LocalBlockUnpackedPN>", "hclBoneSpaceDeformer::LocalBlockUnpackedPN" },
			{ "hkEnum<hclMeshMeshDeformOperator::ScaleNormalBehaviour, hkUint32>", "hclMeshMeshDeformOperator::ScaleNormalBehaviour" },
			{ "T*<hkRefPtr<hkxMaterial>>", "hkxMaterial" },
			{ "hkArray<hkRefPtr<hkxNodeSelectionSet>, hkContainerHeapAllocator>", "std::vector<hkxNodeSelectionSet>" },
			{ "T*<hknpBodyQuality>", "hknpBodyQuality" },
			{ "hkEnum<hclBoneSpaceMeshMeshDeformOperator::ScaleNormalBehaviour, hkUint32>", "hclBoneSpaceMeshMeshDeformOperator::ScaleNormalBehaviour" },
			{ "hkHandle<hkUint8, 255>", "hkHandle<uint8_t>" },
			{ "T*<hknpMinMaxQuadTree::MinMaxLevel>", "hknpMinMaxQuadTree::MinMaxLevel" },
			{ "hkEnum<hclClothData::Platform, hkUint32>", "hclClothData::Platform" },
			{ "hkSimdReal", "Vector128<float>" },
			{ "hkEnum<hclBufferLayout::SlotFlags, hkUint8>", "hclBufferLayout::SlotFlags" },
			{ "hkEnum<hkbCustomTestGeneratorComplexTypes::CustomEnum, signed char>", "hkbCustomTestGeneratorComplexTypes::CustomEnum" },
			{ "T*<hkSimpleLocalFrame::ChildPointer>", "hkLocalFrame" },
			{ "hkArray<hkaiNavMeshClearanceCacheManager::Registration, hkContainerHeapAllocator>", "std::vector<hkaiNavMeshClearanceCacheManager::Registration>" },
			{ "hkEnum<hkbVariableInfo::VariableType, unsigned char>", "hkbVariableInfo::VariableType" },
			{ "hkEnum<hkbRagdollControllerSetup::Type, signed char>", "hkbRagdollControllerSetup::Type" },
			{ "hkaiReferencedArray<unsigned int>", "hkaiReferencedArray<uint32_t>" },
			{ "hkArray<hknpTyremarkPoint, hkContainerHeapAllocator>", "std::vector<hknpTyremarkPoint>" },
			{ "T*<hkcdDynamicTree::CodecInt16>", "hkcdDynamicTree::CodecInt16" },
			{ "T*<hkaiReferencedArray<hkVector4f>>", "hkaiReferencedArray<Vector4>" },
			{ "hkEnum<hkaiAstarOutputParameters::TerminationCause, unsigned char>", "hkaiAstarOutputParameters::TerminationCause" },
			{ "hkRefPtr<hkaiPathRequestManager>", "hkaiPathRequestManager" },
			{ "hkEnum<hkbWorldEnums::SimulationState, unsigned char>", "hkbWorldEnums::SimulationState" },
			{ "T*<hkHashMapDetail::MapTuple<T*<hkReflect::Type>, T*<void>>>", "hkHashMapDetail::MapTuple<IHavokObject, object>" },
			{ "hkArray<hclAntiPinchConstraintSet::PerParticle, hkContainerHeapAllocator>", "std::vector<hclAntiPinchConstraintSet::PerParticle>" },
			{ "hkEnum<hkbToolNodeType::NodeType, unsigned short>", "hkbToolNodeType::NodeType" },
			{ "T*<hkcdCompressedAabbCodecs::UncompressedAabbCodec>", "hkcdCompressedAabbCodecs::UncompressedAabbCodec" },
			{ "hkArray<hkaSkeleton::LocalFrameOnBone, hkContainerHeapAllocator>", "std::vector<hkaSkeleton::LocalFrameOnBone>" },
			{ "hkEnum<hkbCharacterInfo::Event, unsigned char>", "hkbCharacterInfo::Event" },
			{ "hkEnum<hkbRigidBodySetup::Type, signed char>", "hkbRigidBodySetup::Type" },
			{ "T*<hkHashMapDetail::MapTuple<hkPropertyId, hkReflect::Any>>", "hkHashMapDetail::MapTuple<hkPropertyId, object>" },
			{ "hkEnum<hkbShapeSetup::Type, signed char>", "hkbShapeSetup::Type" },
			{ "hkFlags<hkaiNavMeshPathSearchParameters::OutputPathFlags, unsigned char>", "hkaiNavMeshPathSearchParameters::OutputPathFlags" },
			{ "hkTuple<hkaiDynamicUserEdgeSetInfoBase::ClusterGraphEdge, int, void, void, void, void, void, void>", "hkTuple2<hkaiDynamicUserEdgeSetInfoBase::ClusterGraphEdge, int>" },
			{ "hkEnum<hkbAlignBoneModifier::AlignTargetMode, signed char>", "hkbAlignBoneModifier::AlignTargetMode" },
			{ "T*<hknpMaterial>", "hknpMaterial" },
			{ "hkFlags<hkbCustomTestGeneratorComplexTypes::CustomFlag, unsigned char>", "hkbCustomTestGeneratorComplexTypes::CustomFlag" },
			{ "hkFlags<hkbCustomTestGeneratorComplexTypes::CustomFlag, short>", "hkbCustomTestGeneratorComplexTypes::CustomFlag" },
			{ "hkEnum<hkbCustomTestGeneratorComplexTypes::CustomEnum, unsigned int>", "hkbCustomTestGeneratorComplexTypes::CustomEnum" },
			{ "hkcdDynamicTree::DefaultDynamicStorage<hkcdDynamicTree::CodecRaw<unsigned int>>", "hkcdDynamicTree::DefaultDynamicStorageCodecRaw_Uint" },
			{ "hkEnum<hkbBodyIkControlPriority::Enum, signed char>", "hkbBodyIkControlPriority::Enum" },
			{ "hkArray<hkRefPtr<hkaFootstepAnalysisInfo>, hkContainerHeapAllocator>", "std::vector<hkaFootstepAnalysisInfo>" },
			{ "hkEnum<hkbWorldEnums::SimulationState, hkUint8>", "hkbWorldEnums::SimulationState" },
			{ "hkFlags<hkaiVolumeNavigator::PathQualityBits, unsigned char>", "hkaiVolumeNavigator::PathQualityBits" },
			{ "T*<hclBoneSpaceDeformer::ThreeBlendEntryBlock>", "hclBoneSpaceDeformer::ThreeBlendEntryBlock" },
			{ "hkEnum<hkbCompiledExpressionSet::Token::Operator, signed char>", "hkbCompiledExpressionSet::Token::Operator" },
			{ "hkEnum<hkbCharacterInfo::Event, hkUint8>", "hkbCharacterInfo::Event" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkHandle<hkUint32, -1>, hkaiDynamicUserEdgeSetInfo>>", "hkHashBase<hkHashMapDetail::MapTuple<hkHandle<uint32_t>, hkaiDynamicUserEdgeSetInfo>>" },
			{ "hkRefPtr<hkbBehaviorGraphInternalState>", "hkbBehaviorGraphInternalState" },
			{ "hkOffsetBitFieldStorage<hkArray<unsigned int, hkContainerHeapAllocator>>", "hkOffsetBitFieldStorage<std::vector<uint32_t>>" },
			{ "hkEnum<hkbFootIkModifier::AlignMode, hkInt8>", "hkbFootIkModifier::AlignMode" },
			{ "hkViewPtr<hkaiCollisionAvoidance::System>", "hkaiCollisionAvoidance::System" },
			{ "hkEnum<hkbVariableInfo::VariableType, hkUint8>", "hkbVariableInfo::VariableType" },
			{ "hkEnum<hkbCharacterControlCommand::CharacterControlCommand, hkUint8>", "hkbCharacterControlCommand::CharacterControlCommand" },
			{ "hkEnum<hkbSimulationControlCommand::SimulationControlCommand, hkUint8>", "hkbSimulationControlCommand::SimulationControlCommand" },
			{ "hkEnum<hkbRigidBodySetup::Type, hkInt8>", "hkbRigidBodySetup::Type" },
			{ "hkRefPtr<hkbAttachmentSetup>", "hkbAttachmentSetup" },
			{ "hkEnum<hkbRagdollControllerSetup::Type, hkInt8>", "hkbRagdollControllerSetup::Type" },
			{ "hkEnum<hkbConstraintSetup::Type, hkInt8>", "hkbConstraintSetup::Type" },
			{ "hkArray<hkcdCompressedAabbCodecs::Aabb6BytesCodec, hkContainerHeapAllocator>", "std::vector<hkcdCompressedAabbCodecs::Aabb6BytesCodec>" },
			{ "hkEnum<hkbParticleSystemEventPayload::SystemType, hkUint8>", "hkbParticleSystemEventPayload::SystemType" },
			{ "hkArray<hclObjectSpaceDeformer::LocalBlockUnpackedPNTB, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::LocalBlockUnpackedPNTB>" },
			{ "hkEnum<hkbAlignBoneModifier::AlignTargetMode, hkInt8>", "hkbAlignBoneModifier::AlignTargetMode" },
			{ "hkEnum<hkbAlignBoneModifier::AlignModeABAM, hkInt8>", "hkbAlignBoneModifier::AlignModeABAM" },
			{ "hkFlags<hkbCustomTestGeneratorComplexTypes::CustomFlag, hkUint16>", "hkbCustomTestGeneratorComplexTypes::CustomFlag" },
			{ "hkFlags<hkbCustomTestGeneratorComplexTypes::CustomFlag, hkUint8>", "hkbCustomTestGeneratorComplexTypes::CustomFlag" },
			{ "hkEnum<hkbCustomTestGeneratorComplexTypes::CustomEnum, hkUint32>", "hkbCustomTestGeneratorComplexTypes::CustomEnum" },
			{ "hkEnum<hkbCustomTestGeneratorComplexTypes::CustomEnum, hkInt32>", "hkbCustomTestGeneratorComplexTypes::CustomEnum" },
			{ "T*<hkaiCollisionAvoidance::ObstacleGenerator>", "hkaiCollisionAvoidance::ObstacleGenerator" },
			{ "hkEnum<hkbCustomTestGeneratorComplexTypes::CustomEnum, hkInt8>", "hkbCustomTestGeneratorComplexTypes::CustomEnum" },
			{ "hkRefPtr<hkbBehaviorGraphStringData>", "hkbBehaviorGraphStringData" },
			{ "hkFlags<hkbBodyIkControlBits::Enum, hkInt16>", "hkbBodyIkControlBits::Enum" },
			{ "T*<hclBendStiffnessConstraintSetMx::Single>", "hclBendStiffnessConstraintSetMx::Single" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>>>", "hkHashBase<hkHashMapDetail::MapTuple<int, std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>>>" },
			{ "hkHashMap<hkaiIndex<hkInt32>, hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>>", "hkHashMap<int, std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>>" },
			{ "hkFlags<hkbVariableBindingSet::Binding::InternalBindingFlags, signed char>", "hkbVariableBindingSet::Binding::InternalBindingFlags" },
			{ "hkEnum<hkbCompiledExpressionSet::Token::TokenType, signed char>", "hkbCompiledExpressionSet::Token::TokenType" },
			{ "hkEnum<hkbWorldFromModelModeData::WorldFromModelMode, hkInt8>", "hkbWorldFromModelModeData::WorldFromModelMode" },
			{ "hkFlags<hkbBlendingTransitionEffect::FlagBits, unsigned short>", "hkbBlendingTransitionEffect::FlagBits" },
			{ "hkFlags<hkbStateMachine::TransitionInfo::TransitionFlags, short>", "hkbStateMachine::TransitionInfo::TransitionFlags" },
			{ "hkEnum<hkbStateMachine::StartStateMode, signed char>", "hkbStateMachine::StartStateMode" },
			{ "T*<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>>", "hkHashMapDetail::MapTuple<int, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>" },
			{ "hkEnum<hkbNodeType, unsigned char>", "hkbNodeType" },
			{ "T*<hclTransitionConstraintSet::PerParticle>", "hclTransitionConstraintSet::PerParticle" },
			{ "hkRelArray<hkVector4f>", "std::vector<Vector4>" },
			{ "hkFlags<hkaiPointCloudSilhouetteGenerator::PointCloudFlagBits, hkUint8>", "hkaiPointCloudSilhouetteGenerator::PointCloudFlagBits" },
			{ "hkArray<hknpMotionProperties, hkContainerHeapAllocator>", "std::vector<hknpMotionProperties>" },
			{ "hkArray<bool, hkContainerHeapAllocator>", "std::vector<bool>" },
			{ "T*<hkxAttribute>", "hkxAttribute" },
			{ "hkEnum<hkbTwistModifier::SetAngleMethod, signed char>", "hkbTwistModifier::SetAngleMethod" },
			{ "hkArray<hclSimulateOperator::Config, hkContainerHeapAllocator>", "std::vector<hclSimulateOperator::Config>" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<T*<hkReflect::Type>, T*<void>>>", "hkHashBase<hkHashMapDetail::MapTuple<IHavokObject, object>>" },
			{ "hkEnum<hkbHandIkControlData::HandleChangeMode, signed char>", "hkbHandIkControlData::HandleChangeMode" },
			{ "T*<hkaiAvoidanceProperties>", "hkaiAvoidanceProperties" },
			{ "hkArray<hclBoneSpaceDeformer::LocalBlockPN, hkContainerHeapAllocator>", "std::vector<hclBoneSpaceDeformer::LocalBlockPN>" },
			{ "hkEnum<hkbEventRangeData::EventRangeMode, signed char>", "hkbEventRangeData::EventRangeMode" },
			{ "hkEnum<hkbExpressionData::ExpressionEventMode, signed char>", "hkbExpressionData::ExpressionEventMode" },
			{ "hkEnum<hkbEvaluateHandleModifier::HandleChangeMode, signed char>", "hkbEvaluateHandleModifier::HandleChangeMode" },
			{ "hkFlags<hkaiCharacter::AvoidanceEnabledMaskBits, hkUint8>", "hkaiCharacter::AvoidanceEnabledMaskBits" },
			{ "hkTuple<hkHandle<unsigned int, -1>, hkaiDynamicUserEdgeSetInfo, void, void, void, void, void, void>", "hkTuple2<hkHandle<uint32_t>, hkaiDynamicUserEdgeSetInfo>" },
			{ "T*<hclClothState::BufferAccess>", "hclClothState::BufferAccess" },
			{ "hkEnum<hkbCharacterControllerModifier::MotionMode, signed char>", "hkbCharacterControllerModifier::MotionMode" },
			{ "hkTuple<int, hkaiNavMeshCutConfiguration::FaceInfo, void, void, void, void, void, void>", "hkTuple2<int, hkaiNavMeshCutConfiguration::FaceInfo>" },
			{ "hkFlags<hkbBodyIkControlBits::Enum, unsigned short>", "hkbBodyIkControlBits::Enum" },
			{ "T*<hkHandle<hkUint32, 2147483647>>", "hkHandle<uint32_t>" },
			{ "hkArray<hkHashMapDetail::MapTuple<int, hkaiModifiedSections::Section>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiModifiedSections::Section>>" },
			{ "hkArray<hkRefPtr<hkxTextureInplace>, hkContainerHeapAllocator>", "std::vector<hkxTextureInplace>" },
			{ "hkEnum<hkbBodyIkControlsModifier::PosePredictionMode, signed char>", "hkbBodyIkControlsModifier::PosePredictionMode" },
			{ "hkEnum<hkbPoseMatchingGenerator::Mode, signed char>", "hkbPoseMatchingGenerator::Mode" },
			{ "T*<hkRefPtr<hkaFootstepAnalysisInfo>>", "hkaFootstepAnalysisInfo" },
			{ "hkEnum<hkbParametricMotionGenerator::MotionSpaceType, signed char>", "hkbParametricMotionGenerator::MotionSpaceType" },
			{ "T*<hclStorageSetupMeshSection>", "hclStorageSetupMeshSection" },
			{ "hkFlags<hkbDockingGenerator::DockingFlagBits, unsigned short>", "hkbDockingGenerator::DockingFlagBits" },
			{ "hkEnum<hkbDockingGenerator::BlendType, signed char>", "hkbDockingGenerator::BlendType" },
			{ "T*<hclTransformSetUsage::TransformTracker>", "hclTransformSetUsage::TransformTracker" },
			{ "hkArray<hkTransformf, hkContainerHeapAllocator>", "std::vector<hkMatrix4Holder>" },
			{ "hkFlags<hkbEventInfo::Flags, unsigned int>", "hkbEventInfo::Flags" },
			{ "hkFlags<hkbRoleAttribute::RoleFlags, short>", "hkbRoleAttribute::RoleFlags" },
			{ "hkRefPtr<hknpShape>", "hknpShape" },
			{ "hkEnum<hkbVariableInfo::VariableType, hkInt8>", "hkbVariableInfo::VariableType" },
			{ "hkEnum<hkbVariableBindingSet::Binding::BindingType, hkInt8>", "hkbVariableBindingSet::Binding::BindingType" },
			{ "hkEnum<hkbClipGenerator::PlaybackMode, hkInt8>", "hkbClipGenerator::PlaybackMode" },
			{ "hkEnum<hkbEventDrivenBlendingObject::InternalState::FadingState, hkInt8>", "hkbEventDrivenBlendingObject::InternalState::FadingState" },
			{ "hkViewPtr<hkReferencedObject>", "hkReferencedObject" },
			{ "hkEnum<hkbCompiledExpressionSet::Token::Operator, hkInt8>", "hkbCompiledExpressionSet::Token::Operator" },
			{ "hkEnum<hkbCompiledExpressionSet::Token::TokenType, hkInt8>", "hkbCompiledExpressionSet::Token::TokenType" },
			{ "hkArray<hclVolumeConstraint::FrameData, hkContainerHeapAllocator>", "std::vector<hclVolumeConstraint::FrameData>" },
			{ "T*<hkxMesh::UserChannelInfo>", "hkxMesh::UserChannelInfo" },
			{ "hkEnum<hkbGeneratorTransitionEffect::Stage, hkInt8>", "hkbGeneratorTransitionEffect::Stage" },
			{ "hkaiReferencedArray<hkVector4f>", "hkaiReferencedArray<Vector4>" },
			{ "hkEnum<hkbGeneratorTransitionEffect::ToGeneratorState, hkInt8>", "hkbGeneratorTransitionEffect::ToGeneratorState" },
			{ "hkArray<hkaiCollisionAvoidance::SphereObstacle, hkContainerHeapAllocator>", "std::vector<hkaiCollisionAvoidance::SphereObstacle>" },
			{ "hkArray<hclStateTransition::StateTransitionData, hkContainerHeapAllocator>", "std::vector<hclStateTransition::StateTransitionData>" },
			{ "hkEnum<hkbBlendingTransitionEffect::EndMode, hkInt8>", "hkbBlendingTransitionEffect::EndMode" },
			{ "T*<hkaiNavMeshClearanceCache::McpDataInteger>", "hkaiNavMeshClearanceCache::McpDataInteger" },
			{ "hkHalf16", "float" },
			{ "hkArray<hclBendLinkConstraintSetMx::Single, hkContainerHeapAllocator>", "std::vector<hclBendLinkConstraintSetMx::Single>" },
			{ "hkEnum<hkbStateMachine::StateMachineSelfTransitionMode, hkInt8>", "hkbStateMachine::StateMachineSelfTransitionMode" },
			{ "hkEnum<hkbStateMachine::StartStateMode, hkInt8>", "hkbStateMachine::StartStateMode" },
			{ "hkRefPtr<hkaiModifiedSections>", "hkaiModifiedSections" },
			{ "hkEnum<hkbNodeType, hkUint8>", "hkbNodeType" },
			{ "hkEnum<hkbTwistModifier::RotationAxisCoordinates, hkInt8>", "hkbTwistModifier::RotationAxisCoordinates" },
			{ "hkEnum<hkbJigglerModifier::JiggleCoordinates, hkInt8>", "hkbJigglerModifier::JiggleCoordinates" },
			{ "T*<T*<hkbIntVariableSequencedData>>", "hkbIntVariableSequencedData" },
			{ "T*<hkbShapeSetup>", "hkbShapeSetup" },
			{ "hkEnum<hkbHandIkControlData::HandleChangeMode, hkInt8>", "hkbHandIkControlData::HandleChangeMode" },
			{ "T*<hkaiNavMeshClearanceCacheManager::CacheInfo>", "hkaiNavMeshClearanceCacheManager::CacheInfo" },
			{ "hkRelArray<unsigned char>", "std::vector<uint8_t>" },
			{ "T*<hkRefPtr<hkaiNavigator>>", "hkaiNavigator" },
			{ "hkFlags<hkaiCarver::FlagBits, unsigned int>", "hkaiCarver::FlagBits" },
			{ "hkEnum<hkbCharacterControllerModifier::InitialVelocityCoordinates, hkInt8>", "hkbCharacterControllerModifier::InitialVelocityCoordinates" },
			{ "hkEnum<hkbRigidBodySetup::Type, hkUint8>", "hkbRigidBodySetup::Type" },
			{ "hkEnum<hkbPoseMatchingGenerator::Mode, hkInt8>", "hkbPoseMatchingGenerator::Mode" },
			{ "hkArray<hkcdDynamicTree::Codec32, hkContainerHeapAllocator>", "std::vector<hkcdDynamicTree::Codec32>" },
			{ "T*<hclAntiPinchConstraintSet::PerParticle>", "hclAntiPinchConstraintSet::PerParticle" },
			{ "hkArray<hkbEventDrivenBlendingObject::InternalState, hkContainerHeapAllocator>", "std::vector<hkbEventDrivenBlendingObject::InternalState>" },
			{ "hkEnum<hkbParametricMotionGenerator::MotionSpaceType, hkInt8>", "hkbParametricMotionGenerator::MotionSpaceType" },
			{ "hkFlags<hkbDockingGenerator::DockingFlagBits, hkUint16>", "hkbDockingGenerator::DockingFlagBits" },
			{ "T*<hkaiVolumeNavigator>", "hkaiVolumeNavigator" },
			{ "T*<T*<hkMeshVertexBuffer>>", "hkMeshVertexBuffer" },
			{ "hkFlags<hkbLayerGenerator::LayerFlagBits, hkUint16>", "hkbLayerGenerator::LayerFlagBits" },
			{ "T*<hkxSpline>", "hkxSpline" },
			{ "T*<T*<hkbPoseStoringGeneratorOutputstd::vectorener::StoredPose>>", "hkbPoseStoringGeneratorOutputstd::vectorener::StoredPose" },
			{ "hkTuple<int, hkaiNavMeshInstanceData::FaceDynUserEdgeBases, void, void, void, void, void, void>", "hkTuple2<int, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>" },
			{ "hkEnum<hkbBlendCurveUtils::BlendCurve, hkInt8>", "hkbBlendCurveUtils::BlendCurve" },
			{ "hkEnum<hkaiNavMeshSimplificationUtils::ExtraVertexSettings::VertexSelectionMethod, hkUint8>", "hkaiNavMeshSimplificationUtils::ExtraVertexSettings::VertexSelectionMethod" },
			{ "hkEnum<hkbBehaviorGraph::VariableMode, hkInt8>", "hkbBehaviorGraph::VariableMode" },
			{ "hkFlags<hkbRoleAttribute::RoleFlags, hkInt16>", "hkbRoleAttribute::RoleFlags" },
			{ "hkEnum<hkbRoleAttribute::Role, hkInt16>", "hkbRoleAttribute::Role" },
			{ "hkEnum<hkbAttachmentSetup::AttachmentType, hkInt8>", "hkbAttachmentSetup::AttachmentType" },
			{ "T*<hkaiStreamingSet::VolumeConnection>", "hkaiStreamingSet::VolumeConnection" },
			{ "T*<hkbBodyIkControlPoint>", "hkbBodyIkControlPoint" },
			{ "hkEnum<hkaiNavMeshGenerationUtilsSettings::CharacterWidthUsage, unsigned char>", "hkaiNavMeshGenerationUtilsSettings::CharacterWidthUsage" },
			{ "T*<hkaiDynamicNavVolumeMediator>", "hkaiDynamicNavVolumeMediator" },
			{ "hkRefPtr<hkbCharacterData>", "hkbCharacterData" },
			{ "hkEnum<hkaiUserEdgeUtils::UserEdgeSetupSpace, hkUint8>", "hkaiUserEdgeUtils::UserEdgeSetupSpace" },
			{ "T*<hkaiAvoidanceSolver::SphereObstacle>", "hkaiAvoidanceSolver::SphereObstacle" },
			{ "hkArray<hkbEventInfo, hkContainerHeapAllocator>", "std::vector<hkbEventInfo>" },
			{ "hkArray<hkMultipleVertexBuffer::LockedElement, hkContainerHeapAllocator>", "std::vector<hkMultipleVertexBuffer::LockedElement>" },
			{ "hkArray<hkbBodyIkControlsModifier::ControlData, hkContainerHeapAllocator>", "std::vector<hkbBodyIkControlsModifier::ControlData>" },
			{ "hkRefPtr<hkxMaterial>", "hkxMaterial" },
			{ "hkRefPtr<PropertyBagTest::GraphObject>", "PropertyBagTest::GraphObject" },
			{ "hkArray<hctFilterConfigurationSet::Configuration, hkContainerHeapAllocator>", "std::vector<hctFilterConfigurationSet::Configuration>" },
			{ "T*<hkaiNavMeshGenerationUtilsSettings::OverrideSettings>", "hkaiNavMeshGenerationUtilsSettings::OverrideSettings" },
			{ "T*<hkaiAabbOverlapManager::Overlap>", "hkaiAabbOverlapManager::Overlap" },
			{ "T*<hknpShapeTagCodec>", "hknpShapeTagCodec" },
			{ "T*<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiNavMeshCutConfiguration::FaceInfo>>", "hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::FaceInfo>" },
			{ "T*<hkMeshTexture>", "hkMeshTexture" },
			{ "hkArray<hkIntRealPair, hkContainerHeapAllocator>", "std::vector<hkIntRealPair>" },
			{ "hkRotation", "Eigen::Matrix3f" },
			{ "hkcdDynamicTree::DefaultDynamicStorage<hkcdDynamicTree::CodecInt16>", "hkcdDynamicTree::DefaultDynamicStorageCodecInt16" },
			{ "T*<hkbTransitionEffect>", "hkbTransitionEffect" },
			{ "T*<hkaiNavMeshGeneration::OverlappingMaterialCombiner>", "hkaiNavMeshGeneration::OverlappingMaterialCombiner" },
			{ "hkArray<hclStateTransition::SimClothTransitionData, hkContainerHeapAllocator>", "std::vector<hclStateTransition::SimClothTransitionData>" },
			{ "hkWeakPtr<hkWeakPtrTest::Foo>", "hkWeakPtrTest::Foo" },
			{ "T*<hkaiOverlapManager::Overlap>", "hkaiOverlapManager::Overlap" },
			{ "T*<hkbBlenderGenerator::ChildInternalState>", "hkbBlenderGenerator::ChildInternalState" },
			{ "hkArray<hkbBoolVariableSequencedData::Sample, hkContainerHeapAllocator>", "std::vector<hkbBoolVariableSequencedData::Sample>" },
			{ "hkFreestd::vectorArray<hknpShapeInstance, 8>", "hkFreestd::vectorArrayHknpShapeInstance" },
			{ "hkEnum<hkaiSplitGenerationUtils::SplitAndGenerateOptions, unsigned char>", "hkaiSplitGenerationUtils::SplitAndGenerateOptions" },
			{ "T*<hclStateTransition::BlendOpTransitionData>", "hclStateTransition::BlendOpTransitionData" },
			{ "hkEnum<hkaiOverlappingTriangles::WalkableTriangleSettings, unsigned char>", "hkaiOverlappingTriangles::WalkableTriangleSettings" },
			{ "hkEnum<hkaiLineOfSightUtil::InputBase::QueryMode, unsigned char>", "hkaiLineOfSightUtil::InputBase::QueryMode" },
			{ "T*<hkMemoryMeshShape::Section>", "hkMemoryMeshShape::Section" },
			{ "hkRefPtr<hkReferencedObject>", "hkReferencedObject" },
			{ "hkArray<hkArray<hkHandle<unsigned int, 2147483647>, hkContainerHeapAllocator>, hkContainerHeapAllocator>", "std::vector<std::vector<hkHandle<uint32_t>>>" },
			{ "hkPtrAndInt<hkPropertyDesc, unsigned int, 1>", "hkPtrAndInt<hkPropertyDesc>" },
			{ "hkFlags<hkaiNavigator::PathQualityBits, unsigned char>", "hkaiNavigator::PathQualityBits" },
			{ "hkHashMap<int, hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>>", "hkHashMap<int, std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>>" },
			{ "hkArray<hkSkinnedMeshShape::Part, hkContainerHeapAllocator>", "std::vector<hkSkinnedMeshShape::Part>" },
			{ "hkFlags<hkaiNavVolumePathSearchParameters::LineOfSightFlags, unsigned char>", "hkaiNavVolumePathSearchParameters::LineOfSightFlags" },
			{ "hkFlags<hkaiNavVolume::CellEdgeFlagBits, unsigned char>", "hkaiNavVolume::CellEdgeFlagBits" },
			{ "hkFlags<hkaiNavMeshPathSearchParameters::LineOfSightFlags, unsigned char>", "hkaiNavMeshPathSearchParameters::LineOfSightFlags" },
			{ "T*<hkbJigglerGroup>", "hkbJigglerGroup" },
			{ "hkTuple<hkaiIndex<hkInt32>, hkaiModifiedSections::Section, void, void, void, void, void, void>", "hkTuple2<int, hkaiModifiedSections::Section>" },
			{ "hkEnum<hkaiUserEdgeUtils::UserEdgeSetupSpace, unsigned char>", "hkaiUserEdgeUtils::UserEdgeSetupSpace" },
			{ "hkFlags<hkaiStreamingCollectionInstanceInfo::Flags, unsigned char>", "hkaiStreamingCollectionInstanceInfo::Flags" },
			{ "hkArray<T*<hclStorageSetupMeshSection::SectionTriangleSelectionChannel>, hkContainerHeapAllocator>", "std::vector<hclStorageSetupMeshSection::SectionTriangleSelectionChannel>" },
			{ "hkFlags<hkaiDirectedGraphExplicitCost::EdgeBits, unsigned short>", "hkaiDirectedGraphExplicitCost::EdgeBits" },
			{ "hkEnum<hkaiSilhouetteMerger::MergeType, unsigned char>", "hkaiSilhouetteMerger::MergeType" },
			{ "T*<hclObjectSpaceDeformer::LocalBlockUnpackedP>", "hclObjectSpaceDeformer::LocalBlockUnpackedP" },
			{ "T*<hkaiGatePath>", "hkaiGatePath" },
			{ "hkFlags<hkaiPointCloudSilhouetteGenerator::PointCloudFlagBits, unsigned char>", "hkaiPointCloudSilhouetteGenerator::PointCloudFlagBits" },
			{ "T*<T*<hkMeshShape>>", "hkMeshShape" },
			{ "hkReflect::QualifiedType<hkReflect::IntType>", "IHavokObject" },
			{ "hkEnum<hkaiPointCloudSilhouetteGenerator::DetailLevel, unsigned char>", "hkaiPointCloudSilhouetteGenerator::DetailLevel" },
			{ "hkEnum<hkaiReferenceFrameAndExtrusion::UpVectorTransformMethod, unsigned char>", "hkaiReferenceFrameAndExtrusion::UpVectorTransformMethod" },
			{ "hkEnum<hkaiWorld::ClearanceResetMethod, unsigned char>", "hkaiWorld::ClearanceResetMethod" },
			{ "hkHalf16Le", "float" },
			{ "hkEnum<hkaiNavMeshCompactUtils::CompactingPhase, unsigned char>", "hkaiNavMeshCompactUtils::CompactingPhase" },
			{ "hkEnum<hkaiAstarOutputParameters::SearchStatus, unsigned char>", "hkaiAstarOutputParameters::SearchStatus" },
			{ "hkFlags<hkaiPath::PathPointBits, unsigned char>", "hkaiPath::PathPointBits" },
			{ "hkRefPtr<hkaiCollisionAvoidance::Character>", "hkaiCollisionAvoidance::Character" },
			{ "T*<hkaiNavMeshInstanceData>", "hkaiNavMeshInstanceData" },
			{ "hkArray<hkGeometry::Triangle, hkContainerHeapAllocator>", "std::vector<hkGeometry::Triangle>" },
			{ "T&<hkStringBuf>", "std::string" },
			{ "hkEnum<hkaiPath::ReferenceFrame, unsigned char>", "hkaiPath::ReferenceFrame" },
			{ "hkFlags<hkaiCharacter::AvoidanceEnabledMaskBits, unsigned char>", "hkaiCharacter::AvoidanceEnabledMaskBits" },
			{ "hkEnum<hkaiMovementProperties::KinematicConstraintType, unsigned char>", "hkaiMovementProperties::KinematicConstraintType" },
			{ "hkArray<T*<hkbEventPayload>, hkContainerHeapAllocator>", "std::vector<hkbEventPayload>" },
			{ "hkEnum<hkaiAvoidanceProperties::NearbyBoundariesSearchType, unsigned char>", "hkaiAvoidanceProperties::NearbyBoundariesSearchType" },
			{ "hkFlags<hkaiNavMesh::EdgeFlagBits, unsigned char>", "hkaiNavMesh::EdgeFlagBits" },
			{ "hkEnum<hkaiCharacter::State, unsigned char>", "hkaiCharacter::State" },
			{ "hkaiIndex<hkUint16>", "uint16_t" },
			{ "T*<hkbBehaviorInfo::IdToNamePair>", "hkbBehaviorInfo::IdToNamePair" },
			{ "T*<hkRefPtr<hkaSkeletonMapper>>", "hkaSkeletonMapper" },
			{ "hkEnum<hkaiWorld::CharacterCallbackType, hkUint8>", "hkaiWorld::CharacterCallbackType" },
			{ "hkFlags<hkaiLineOfSightUtil::UserEdgeFlagBits, hkUint8>", "hkaiLineOfSightUtil::UserEdgeFlagBits" },
			{ "hkEnum<hkaiLineOfSightUtil::InputBase::QueryMode, hkUint8>", "hkaiLineOfSightUtil::InputBase::QueryMode" },
			{ "T*<hkaiNavVolumePathRequest>", "hkaiNavVolumePathRequest" },
			{ "T*<hkcdCompressedAabbCodecs::Aabb5BytesCodec>", "hkcdCompressedAabbCodecs::Aabb5BytesCodec" },
			{ "hkRefPtr<hkbTransitionEffect>", "hkbTransitionEffect" },
			{ "hkArray<hclLocalRangeConstraintSet::LocalConstraint, hkContainerHeapAllocator>", "std::vector<hclLocalRangeConstraintSet::LocalConstraint>" },
			{ "hkFlags<hkaiVolumeNavigator::PathQualityBits, hkUint8>", "hkaiVolumeNavigator::PathQualityBits" },
			{ "hkFlags<hkaiNavigator::PathQualityBits, hkUint8>", "hkaiNavigator::PathQualityBits" },
			{ "T*<hkQsTransform>", "hkQsTransform" },
			{ "hkRefPtr<hkaiNavMeshClearanceCache>", "hkaiNavMeshClearanceCache" },
			{ "hkArray<hclStateTransition::BlendOpTransitionData, hkContainerHeapAllocator>", "std::vector<hclStateTransition::BlendOpTransitionData>" },
			{ "hkFlags<hkaiNavVolumePathSearchParameters::LineOfSightFlags, hkUint8>", "hkaiNavVolumePathSearchParameters::LineOfSightFlags" },
			{ "hkFlags<hkaiNavMeshPathSearchParameters::LineOfSightFlags, hkUint8>", "hkaiNavMeshPathSearchParameters::LineOfSightFlags" },
			{ "hkFlags<hkaiNavMeshPathSearchParameters::OutputPathFlags, hkUint8>", "hkaiNavMeshPathSearchParameters::OutputPathFlags" },
			{ "hkEnum<hkaiAnnotatedStreamingSet::Side, hkUint8>", "hkaiAnnotatedStreamingSet::Side" },
			{ "hkArray<hkcdStaticMeshTree::Connectivity::SectionHeader, hkContainerHeapAllocator>", "std::vector<hkcdStaticMeshTree::Connectivity::SectionHeader>" },
			{ "hkFlags<hkaiStreamingCollectionInstanceInfo::Flags, hkUint8>", "hkaiStreamingCollectionInstanceInfo::Flags" },
			{ "T*<hkaiIndex<hkInt32>>", "int" },
			{ "hkEnum<hkaiNavMeshClearanceCacheManager::DefaultCachingOption, int>", "hkaiNavMeshClearanceCacheManager::DefaultCachingOption" },
			{ "hkFlags<hkaiDirectedGraphExplicitCost::EdgeBits, hkUint16>", "hkaiDirectedGraphExplicitCost::EdgeBits" },
			{ "T*<hclSimClothBufferSetupObject>", "hclSimClothBufferSetupObject" },
			{ "hkArray<hkxBlendShapeCollectionChannel::FloatCurve, hkContainerHeapAllocator>", "std::vector<hkxBlendShapeCollectionChannel::FloatCurve>" },
			{ "T*<hkaAnimation>", "hkaAnimation" },
			{ "hkFlags<hkaiModifiedSections::SectionBits, hkUint8>", "hkaiModifiedSections::SectionBits" },
			{ "hkHashMap<hkPropertyId, hkReflect::Any>", "hkHashMap<hkPropertyId, object>" },
			{ "hkEnum<hkaiNavMeshCompactUtils::CompactingPhase, hkUint8>", "hkaiNavMeshCompactUtils::CompactingPhase" },
			{ "hkaiCopyOnWritePtr<hkaiNavVolumeInstanceData, hkaiCopyOnWriteDefaultTraits<hkaiNavVolumeInstanceData>>", "hkaiCopyOnWritePtr<hkaiNavVolumeInstanceData>" },
			{ "hkEnum<hkaiAstarOutputParameters::SearchStatus, hkUint8>", "hkaiAstarOutputParameters::SearchStatus" },
			{ "hkaiReferencedArray<hkaiPackedKey_<hkaiIndex<int>, hkaiIndex<int>>>", "hkaiReferencedArray<uint32_t>" },
			{ "T*<hkaiNavVolume::UserEdgeInfo>", "hkaiNavVolume::UserEdgeInfo" },
			{ "hkFlags<hkaiCarver::FlagBits, hkUint32>", "hkaiCarver::FlagBits" },
			{ "hkFlags<hkaiPath::PathPointBits, hkUint8>", "hkaiPath::PathPointBits" },
			{ "hkArray<T*<hknpShapeKeyMask>, hkContainerHeapAllocator>", "std::vector<hknpShapeKeyMask>" },
			{ "hkEnum<hkaiMovementProperties::KinematicConstraintType, hkUint8>", "hkaiMovementProperties::KinematicConstraintType" },
			{ "hkArray<hclObjectSpaceDeformer::SevenBlendEntryBlock, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::SevenBlendEntryBlock>" },
			{ "hkcdDynamicTree::Tree<hkcdDynamicTree::DynamicStorageInt16>", "hkcdDynamicTree::TreeDynamicStorageInt16" },
			{ "hkEnum<hkaiAvoidanceProperties::NearbyBoundariesSearchType, hkUint8>", "hkaiAvoidanceProperties::NearbyBoundariesSearchType" },
			{ "T*<hkxVertexAnimation>", "hkxVertexAnimation" },
			{ "hkFlags<hkaiNavMesh::EdgeFlagBits, hkUint8>", "hkaiNavMesh::EdgeFlagBits" },
			{ "hkEnum<hkaiCharacterUtil::CallbackType, int>", "hkaiCharacterUtil::CallbackType" },
			{ "hkRefPtr<hclSetupMesh>", "hclSetupMesh" },
			{ "hkaiPackedKey_<hkaiIndex<hkInt32>, hkaiIndex<hkInt32>>", "uint32_t" },
			{ "hkReflect::QualifiedType<hkReflect::RecordType>", "IHavokObject" },
			{ "hkArray<hkcdCompressedAabbCodecs::UncompressedAabbCodec, hkContainerHeapAllocator>", "std::vector<hkcdCompressedAabbCodecs::UncompressedAabbCodec>" },
			{ "hkArray<hkaiUserEdgeUtils::UserEdgePair, hkContainerHeapAllocator>", "std::vector<hkaiUserEdgeUtils::UserEdgePair>" },
			{ "hkEnum<hkaiAstarOutputParameters::TerminationCause, hkUint8>", "hkaiAstarOutputParameters::TerminationCause" },
			{ "hkArray<hclSimClothData::ParticleData, hkContainerHeapAllocator>", "std::vector<hclSimClothData::ParticleData>" },
			{ "T*<hkxMaterial>", "hkxMaterial" },
			{ "T*<hknpBroadPhaseConfig>", "hknpBroadPhaseConfig" },
			{ "hkArray<hclVolumeConstraintMx::FrameSingleData, hkContainerHeapAllocator>", "std::vector<hclVolumeConstraintMx::FrameSingleData>" },
			{ "T*<hkbStateMachine>", "hkbStateMachine" },
			{ "hkFreestd::vectorArrayElement<hknpShapeInstance>", "hkFreestd::vectorArrayElementHknpShapeInstance" },
			{ "T*<hclBoneSpaceDeformer::LocalBlockPNT>", "hclBoneSpaceDeformer::LocalBlockPNT" },
			{ "hkArray<hkxBlendShapeCollectionChannel::FloatCurveKey, hkContainerHeapAllocator>", "std::vector<hkxBlendShapeCollectionChannel::FloatCurveKey>" },
			{ "T*<hkbClipTrigger>", "hkbClipTrigger" },
			{ "T*<hkaiObstacleGenerator>", "hkaiObstacleGenerator" },
			{ "T*<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiDynamicUserEdgeSetInfo::Section>>", "hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::Section>" },
			{ "hkArray<hkaiNavMeshClearanceCache::McpDataInteger, hkContainerHeapAllocator>", "std::vector<hkaiNavMeshClearanceCache::McpDataInteger>" },
			{ "hkRefPtr<hkcdPlanarGeometry>", "hkcdPlanarGeometry" },
			{ "hkArray<hkHashMapDetail::MapTuple<int, int>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, int>>" },
			{ "hkFlags<hkaiNavVolumeGenerationSettings::MaterialFlagsBits, unsigned int>", "hkaiNavVolumeGenerationSettings::MaterialFlagsBits" },
			{ "hkEnum<hkaiNavMeshSimplificationUtils::ExtraVertexSettings::VertexSelectionMethod, unsigned char>", "hkaiNavMeshSimplificationUtils::ExtraVertexSettings::VertexSelectionMethod" },
			{ "hkFlags<hkaiNavMeshGenerationUtilsSettings::ConstructionFlagsBits, unsigned int>", "hkaiNavMeshGenerationUtilsSettings::ConstructionFlagsBits" },
			{ "hkArray<T*<hkbModifier>, hkContainerHeapAllocator>", "std::vector<hkbModifier>" },
			{ "hkEnum<hkaiNavMeshGenerationUtilsSettings::TriangleWinding, unsigned char>", "hkaiNavMeshGenerationUtilsSettings::TriangleWinding" },
			{ "hkRefPtr<hkaiPathfindingUtil::FindPathOutput>", "hkaiPathfindingUtil::FindPathOutput" },
			{ "hkFlags<hkaiEdgeGeometry::FaceFlagBits, unsigned char>", "hkaiEdgeGeometry::FaceFlagBits" },
			{ "hkFourTransposedPointsImpl<double>", "hkFourTransposedPointsImplDouble" },
			{ "hkFlags<hkaiNavVolumeGenerationSettings::MaterialFlagsBits, hkUint32>", "hkaiNavVolumeGenerationSettings::MaterialFlagsBits" },
			{ "hkEnum<hkaiNavMeshGenerationUtilsSettings::CharacterWidthUsage, hkUint8>", "hkaiNavMeshGenerationUtilsSettings::CharacterWidthUsage" },
			{ "T*<hknpParticleFaceVerticesWithEffMass>", "hknpParticleFaceVerticesWithEffMass" },
			{ "hkFlags<hkaiNavMeshGenerationUtilsSettings::ConstructionFlagsBits, hkUint32>", "hkaiNavMeshGenerationUtilsSettings::ConstructionFlagsBits" },
			{ "hkEnum<hkaiNavMeshGenerationUtilsSettings::EdgeMatchingMetric, hkUint32>", "hkaiNavMeshGenerationUtilsSettings::EdgeMatchingMetric" },
			{ "hkRefPtr<hkaiVolumeNavigator>", "hkaiVolumeNavigator" },
			{ "hkEnum<hkaiNavMeshGenerationUtilsSettings::TriangleWinding, hkUint8>", "hkaiNavMeshGenerationUtilsSettings::TriangleWinding" },
			{ "hkRefPtr<hkxIndexBuffer>", "hkxIndexBuffer" },
			{ "T*<hclCompressibleLinkConstraintSetMx::Batch>", "hclCompressibleLinkConstraintSetMx::Batch" },
			{ "T*<hkTransform>", "hkMatrix4Holder" },
			{ "hkaiCopyOnWriteDefaultTraits<hkcdDynamicAabbTree>", "hkaiCopyOnWriteDefaultTraits" },
			{ "hkArray<hknpVehicleLinearCastWheelCollide::WheelState, hkContainerHeapAllocator>", "std::vector<hknpVehicleLinearCastWheelCollide::WheelState>" },
			{ "T*<unsigned long long>", "uint64_t" },
			{ "hkArray<hknpParticleCacheMoveInfo, hkContainerHeapAllocator>", "std::vector<hknpParticleCacheMoveInfo>" },
			{ "T*<T*<hclSimClothPose>>", "hclSimClothPose" },
			{ "hkMinHeapDefaultOperations<hkaiMinArrayEntry<hkViewPtr<hkaiCollisionAvoidance::Character>>>", "hkMinHeapDefaultOperations" },
			{ "hkaiReferencedArray<hkaiPackedKey_<hkaiIndex<hkInt32>, hkaiIndex<hkInt32>>>", "hkaiReferencedArray<uint32_t>" },
			{ "hkaiMinArrayEntry<hkViewPtr<hkaiCollisionAvoidance::Character>>", "hkaiMinArrayEntry<hkaiCollisionAvoidance::Character>" },
			{ "hkRefPtr<hkaiAvoidancePairProperties>", "hkaiAvoidancePairProperties" },
			{ "T*<hkaiCollisionAvoidance::Character>", "hkaiCollisionAvoidance::Character" },
			{ "hkArray<hkRefPtr<hkxNode>, hkContainerHeapAllocator>", "std::vector<hkxNode>" },
			{ "hkArray<T*<hclSceneDataSetupMeshSection>, hkContainerHeapAllocator>", "std::vector<hclSceneDataSetupMeshSection>" },
			{ "T*<hkHashSet<hkaiIndex<hkInt32>>>", "hkHashSet<int>" },
			{ "hkcdDynamicTree::Tree<hkcdDynamicTree::DefaultDynamicStorage<hkcdDynamicTree::Codec32>>", "hkcdDynamicTree::TreeDefaultDynamicStorageCodec32" },
			{ "T*<hkbVariableBindingSet::Binding>", "hkbVariableBindingSet::Binding" },
			{ "T*<hkArray<hkVector4f, hkContainerHeapAllocator>>", "std::vector<Vector4>" },
			{ "hkTuple<int, hkaiDynamicUserEdgeSetInfo::Section, void, void, void, void, void, void>", "hkTuple2<int, hkaiDynamicUserEdgeSetInfo::Section>" },
			{ "hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>", "hkaiDynamicUserEdgeSetInfo::ExternalEdges" },
			{ "hkFreestd::vectorArrayElement<hknpMotionProperties>", "hkFreestd::vectorArrayElementHknpMotionProperties" },
			{ "hkArray<hkRefPtr<hclClothData>, hkContainerHeapAllocator>", "std::vector<hclClothData>" },
			{ "T*<hclSetupMesh>", "hclSetupMesh" },
			{ "hkHandle<unsigned int, 2147483647>", "hkHandle<uint32_t>" },
			{ "hkHandle<hkInt16, 32767>", "hkHandle<short>" },
			{ "hkHandle<hkUint16, 65535>", "hkHandle<uint16_t>" },
			{ "hkHandle<unsigned char, 255>", "hkHandle<uint8_t>" },
			{ "T*<hkaiNavigator::NavigatorSettings>", "hkaiNavigator::NavigatorSettings" },
			{ "hkFreestd::vectorArray<hknpMotionProperties, 8>", "hkFreestd::vectorArrayHknpMotionProperties" },
			{ "hkArray<hkMultipleVertexBuffer::ElementInfo, hkContainerHeapAllocator>", "std::vector<hkMultipleVertexBuffer::ElementInfo>" },
			{ "hkArray<hkcdDynamicTree::CodecRaw<unsigned int>, hkContainerHeapAllocator>", "std::vector<hkcdDynamicTree::CodecRaw<uint32_t>>" },
			{ "hkRefPtr<hkaiVolumeNavigator::PathRequest>", "hkaiVolumeNavigator::PathRequest" },
			{ "hkArray<hclVirtualCollisionPointsData::TriangleFanLandscape, hkContainerHeapAllocator>", "std::vector<hclVirtualCollisionPointsData::TriangleFanLandscape>" },
			{ "hkArray<hkRefPtr<hkaiVolume>, hkContainerHeapAllocator>", "std::vector<hkaiVolume>" },
			{ "T*<hkbVariableBounds>", "hkbVariableBounds" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>>>", "hkHashBase<hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::ExternalEdges>>" },
			{ "hkArray<hclTransformSetUsage::TransformTracker, hkContainerHeapAllocator>", "std::vector<hclTransformSetUsage::TransformTracker>" },
			{ "hkRefPtr<hkcdPlanarGeometryPlanesCollection>", "hkcdPlanarGeometryPlanesCollection" },
			{ "T*<hkbBoneIndexArray>", "hkbBoneIndexArray" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>>", "hkHashBase<hkHashMapDetail::MapTuple<int, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>>" },
			{ "T*<hkVector2>", "hkVector2" },
			{ "hkArray<hclObjectSpaceDeformer::LocalBlockUnpackedPNT, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::LocalBlockUnpackedPNT>" },
			{ "T*<hknpMotionPropertiesData>", "hknpMotionPropertiesData" },
			{ "hk::ValueAttribute<hk::ValueArray<const char*>>", "hk::ValueAttribute<std::vector<std::string>>" },
			{ "hk::ValueAttribute<T*<unsigned short>>", "hk::ValueAttribute<uint16_t>" },
			{ "T*<hclAction>", "hclAction" },
			{ "hkArray<hkSkinnedMeshShape::BoneSection, hkContainerHeapAllocator>", "std::vector<hkSkinnedMeshShape::BoneSection>" },
			{ "T*<hknpMaterialLibrary>", "hknpMaterialLibrary" },
			{ "T*<hkRefPtr<hkxMesh::UserChannelInfo>>", "hkxMesh::UserChannelInfo" },
			{ "hkRefPtr<hclTransformSetSetupObject>", "hclTransformSetSetupObject" },
			{ "char[N]<5>", "std::string" },
			{ "hkaiReferencedArray<hkVector4>", "hkaiReferencedArray<Vector4>" },
			{ "T*<hkArray<hkAabb, hkContainerHeapAllocator>>", "std::vector<hkAabb>" },
			{ "T*<hkFreestd::vectorArrayElement<hknpMaterial>>", "hkFreestd::vectorArrayElementHknpMaterial" },
			{ "T*<hkRefPtr<hclClothSetupObject>>", "hclClothSetupObject" },
			{ "hkTuple<hkUint32, hkUint32, void, void, void, void, void, void>", "hkTuple2<uint32_t, uint32_t>" },
			{ "T*<hclObjectSpaceDeformer::LocalBlockPNT>", "hclObjectSpaceDeformer::LocalBlockPNT" },
			{ "hkArray<hkRefPtr<hkxLight>, hkContainerHeapAllocator>", "std::vector<hkxLight>" },
			{ "hkArray<hkRefPtr<hkMemoryResourceHandle>, hkContainerHeapAllocator>", "std::vector<hkMemoryResourceHandle>" },
			{ "hkArray<hkaSkeletonMapperData::PartitionMappingRange, hkContainerHeapAllocator>", "std::vector<hkaSkeletonMapperData::PartitionMappingRange>" },
			{ "hkArray<hkFreestd::vectorArrayElement<hknpShapeInstance>, hkContainerHeapAllocator>", "std::vector<hkFreestd::vectorArrayElementHknpShapeInstance>" },
			{ "hkArray<hkTuple<hkUint32, hkUint32, void, void, void, void, void, void>, hkContainerHeapAllocator>", "std::vector<hkTuple2<uint32_t, uint32_t>>" },
			{ "T*<hkaiNavMeshCutter>", "hkaiNavMeshCutter" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiModifiedSections::Section>>", "hkHashBase<hkHashMapDetail::MapTuple<int, hkaiModifiedSections::Section>>" },
			{ "T*<CustomLookAtTwistModifier::TwistParam>", "CustomLookAtTwistModifier::TwistParam" },
			{ "T*<hkaAnnotationTrack>", "hkaAnnotationTrack" },
			{ "hkcdDynamicTree::DynamicStorage<0, hkcdDynamicTree::AnisotropicMetric, hkcdDynamicTree::CodecRaw<unsigned long long>>", "hkcdDynamicTree::DynamicStorageAnisotropicMetricCodecRaw_Ulong" },
			{ "T*<hkHashSet<int>>", "hkHashSet<int>" },
			{ "T*<hknpExtendedExternMeshShapeGeometry::Quad>", "hknpExtendedExternMeshShapeGeometry::Quad" },
			{ "T*<hkTuple<unsigned int, unsigned int, void, void, void, void, void, void>>", "hkTuple2<uint32_t, uint32_t>" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>>" },
			{ "T*<hknpConstraintCinfo>", "hknpConstraintCinfo" },
			{ "hkRefPtr<hkRefCountedProperties>", "hkRefCountedProperties" },
			{ "hkArray<hkRefPtr<hkxMaterialShader>, hkContainerHeapAllocator>", "std::vector<hkxMaterialShader>" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::ExternalEdges>>" },
			{ "T*<hknpBody>", "hknpBody" },
			{ "hkArray<hkRefPtr<hkbCustomPropertySheet>, hkContainerHeapAllocator>", "std::vector<hkbCustomPropertySheet>" },
			{ "T*<hknpTyremarksInfo>", "hknpTyremarksInfo" },
			{ "hkArray<hkRefPtr<hkaiNavigator>, hkContainerHeapAllocator>", "std::vector<hkaiNavigator>" },
			{ "hkTuple<int, int, void, void, void, void, void, void>", "hkTuple2<int, int>" },
			{ "hkHashMapDetail::MapTuple<T*<hkReflect::Type>, T*<void>>", "hkHashMapDetail::MapTuple<IHavokObject, object>" },
			{ "T*<hkaSkeleton::LocalFrameOnBone>", "hkaSkeleton::LocalFrameOnBone" },
			{ "hkcdPlanarGeometryPrimitives::Collection<28>", "hkcdPlanarGeometryPrimitives::Collection" },
			{ "hkRefPtr<hkaiVolumeNavigator::NavigatorSettings>", "hkaiVolumeNavigator::NavigatorSettings" },
			{ "hkRefPtr<hkbBoneWeightArray>", "hkbBoneWeightArray" },
			{ "T*<hkVariableTweakingHelper::Vector4VariableInfo>", "hkVariableTweakingHelper::Vector4VariableInfo" },
			{ "T*<hkbCharacter>", "hkbCharacter" },
			{ "T*<hknpParticleShapeProperties>", "hknpParticleShapeProperties" },
			{ "T*<hkbStateMachine::TransitionInfo>", "hkbStateMachine::TransitionInfo" },
			{ "T*<hkaiConvexSilhouetteSet>", "hkaiConvexSilhouetteSet" },
			{ "hkReflect::QualifiedType<hkReflect::StringType>", "IHavokObject" },
			{ "hkStringPtr", "std::string" },
			{ "T*<hclSetupMeshSection::Triangle>", "hclSetupMeshSection::Triangle" },
			{ "hkArray<hclVirtualCollisionPointsData::BarycentricDictionaryEntry, hkContainerHeapAllocator>", "std::vector<hclVirtualCollisionPointsData::BarycentricDictionaryEntry>" },
			{ "hkArray<T*<hkLocalFrame>, hkContainerHeapAllocator>", "std::vector<hkLocalFrame>" },
			{ "hkaiCopyOnWriteDefaultTraits<hkaiStreamingSetInstance>", "hkaiCopyOnWriteDefaultTraits" },
			{ "hkTrait::Divides<hkVector4f>", "hkTrait::Divides" },
			{ "T*<hknpPhysicsSystemData::bodyCinfoWithAttachment>", "hknpPhysicsSystemData::bodyCinfoWithAttachment" },
			{ "T*<hkStringBuf>", "std::string" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkRefPtr<hkaiStreamingSet>>>", "hkHashBase<hkHashMapDetail::MapTuple<int, hkaiStreamingSet>>" },
			{ "hkArray<hkFreestd::vectorArrayElement<hknpMaterial>, hkContainerHeapAllocator>", "std::vector<hkFreestd::vectorArrayElementHknpMaterial>" },
			{ "hkRefPtr<hkcdDynamicAabbTree::Impl>", "hkcdDynamicAabbTree::Impl" },
			{ "hkRefPtr<hkaiVolumeNavigatorStalenessChecker>", "hkaiVolumeNavigatorStalenessChecker" },
			{ "T&<hkVector4f>", "hkVector4Holder" },
			{ "hkTransform", "hkMatrix4Holder" },
			{ "T*<hknpMaterialDescriptor>", "hknpMaterialDescriptor" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiModifiedSections::Section>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiModifiedSections::Section>>" },
			{ "T*<hkaiMinArrayEntry<hkViewPtr<hkaiCollisionAvoidance::Character>>>", "hkaiMinArrayEntry<hkaiCollisionAvoidance::Character>" },
			{ "T*<hclVirtualCollisionPointsData::TriangleFanSection>", "hclVirtualCollisionPointsData::TriangleFanSection" },
			{ "T*<hkaSkeletonMapperData::SimpleMapping>", "hkaSkeletonMapperData::SimpleMapping" },
			{ "T*<hknpCompoundShape::VelocityInfo>", "hknpCompoundShape::VelocityInfo" },
			{ "hkArray<hkRefPtr<hkaSkeletonMapper>, hkContainerHeapAllocator>", "std::vector<hkaSkeletonMapper>" },
			{ "T*<hclObjectSpaceDeformer::FiveBlendEntryBlock>", "hclObjectSpaceDeformer::FiveBlendEntryBlock" },
			{ "T*<hkaBone>", "hkaBone" },
			{ "hkcdDynamicTree::DynamicStorage<0, hkcdDynamicTree::AnisotropicMetric, hkcdDynamicTree::CodecRawUint>", "hkcdDynamicTree::DynamicStorageAnisotropicMetricCodecRawUint" },
			{ "T*<hkRefPtr<hclNamedSetupMesh>>", "hclNamedSetupMesh" },
			{ "T*<hkaiWorld>", "hkaiWorld" },
			{ "T*<hclSimulateSetupObject::Config>", "hclSimulateSetupObject::Config" },
			{ "hkHashMapDetail::MapTuple<int, hkRefPtr<hkaiStreamingSet>>", "hkHashMapDetail::MapTuple<int, hkaiStreamingSet>" },
			{ "T*<hkaiPath>", "hkaiPath" },
			{ "hkArray<hkaiAvoidancePairProperties::PairData, hkContainerHeapAllocator>", "std::vector<hkaiAvoidancePairProperties::PairData>" },
			{ "T*<hknpVehicleInstance::WheelInfo>", "hknpVehicleInstance::WheelInfo" },
			{ "T*<hkHashMapDetail::MapTuple<int, hkaiDefaultDynamicUserEdgeSetInfo::Section>>", "hkHashMapDetail::MapTuple<int, hkaiDefaultDynamicUserEdgeSetInfo::Section>" },
			{ "hkaiReferencedArray<hkaiIndex<int>>", "hkaiReferencedArray<int>" },
			{ "hkArray<hkbEvaluateExpressionModifier::InternalExpressionData, hkContainerHeapAllocator>", "std::vector<hkbEvaluateExpressionModifier::InternalExpressionData>" },
			{ "T*<hkArray<hkHandle<unsigned int, 2147483647>, hkContainerHeapAllocator>>", "std::vector<hkHandle<uint32_t>>" },
			{ "T*<hkHashMapDetail::MapTuple<hkUlong, T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>>>", "hkHashMapDetail::MapTuple<uint64_t, hkHashMap<IHavokObject, object>>" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<unsigned long long, T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>>>", "hkHashBase<hkHashMapDetail::MapTuple<uint64_t, hkHashMap<IHavokObject, object>>>" },
			{ "hkArray<hkaiIndex<int>, hkContainerHeapAllocator>", "std::vector<int>" },
			{ "hk::ValueAttribute<const char*>", "hk::ValueAttribute<std::string>" },
			{ "hkArray<hclVirtualCollisionPointsData::Block, hkContainerHeapAllocator>", "std::vector<hclVirtualCollisionPointsData::Block>" },
			{ "T*<hkaiNavMeshClearanceCacheManager>", "hkaiNavMeshClearanceCacheManager" },
			{ "T*<hctClothSetupObjectData>", "hctClothSetupObjectData" },
			{ "T*<hkbKeyframeBonesModifier::KeyframeInfo>", "hkbKeyframeBonesModifier::KeyframeInfo" },
			{ "T*<hkaiNavMeshInstance>", "hkaiNavMeshInstance" },
			{ "T*<hkxNode::AnnotationData>", "hkxNode::AnnotationData" },
			{ "hk::ValueAttribute<T*<hkBaseObject>>", "hk::ValueAttribute<hkBaseObject>" },
			{ "hkArray<hkRefPtr<hkaAnimation>, hkContainerHeapAllocator>", "std::vector<hkaAnimation>" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiDynamicUserEdgeSetInfo::Section>>", "hkHashBase<hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::Section>>" },
			{ "T*<hkaiAvoidancePairProperties>", "hkaiAvoidancePairProperties" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiDefaultDynamicUserEdgeSetInfo::Section>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiDefaultDynamicUserEdgeSetInfo::Section>>" },
			{ "hkArray<hkRefPtr<hkbGenerator>, hkContainerHeapAllocator>", "std::vector<hkbGenerator>" },
			{ "T*<hkRefPtr<hkaSkeleton>>", "hkaSkeleton" },
			{ "hkRefPtr<hkaiNavMeshInstanceData>", "hkaiNavMeshInstanceData" },
			{ "T*<hclClothState::TransformSetAccess>", "hclClothState::TransformSetAccess" },
			{ "hkcdDynamicTree::DynamicStorage<0, hkcdDynamicTree::AnisotropicMetric, hkcdDynamicTree::CodecRawUlong>", "hkcdDynamicTree::DynamicStorageAnisotropicMetricCodecRawUlong" },
			{ "T*<hkaiCollisionAvoidance::BoundaryGatherer>", "hkaiCollisionAvoidance::BoundaryGatherer" },
			{ "hkArray<hknpCompoundShape::VelocityInfo, hkContainerHeapAllocator>", "std::vector<hknpCompoundShape::VelocityInfo>" },
			{ "hkcdDynamicTree::DynamicStorage<0, hkcdDynamicTree::AnisotropicMetric, hkcdDynamicTree::CodecInt16>", "hkcdDynamicTree::DynamicStorageAnisotropicMetricCodecInt16" },
			{ "T*<hkbStateMachine::StateInfo>", "hkbStateMachine::StateInfo" },
			{ "T*<hclVirtualCollisionPointsData::EdgeFanLandscape>", "hclVirtualCollisionPointsData::EdgeFanLandscape" },
			{ "hkcdDynamicTree::DynamicStorage<0, hkcdDynamicTree::AnisotropicMetric, hkcdDynamicTree::CodecRaw<unsigned int>>", "hkcdDynamicTree::DynamicStorageAnisotropicMetricCodecRaw_Uint" },
			{ "hkcdDynamicTree::DefaultDynamicStorage<hkcdDynamicTree::CodecRaw<unsigned long long>>", "hkcdDynamicTree::DefaultDynamicStorageCodecRaw_Ulong" },
			{ "T*<hkpConstraintData>", "hkpConstraintData" },
			{ "hkcdDynamicTree::DefaultDynamicStorage<hkcdDynamicTree::Codec32>", "hkcdDynamicTree::DefaultDynamicStorageCodec32" },
			{ "hkcdDynamicTree::DefaultDynamicStorage<hkcdDynamicTree::CodecRawUlong>", "hkcdDynamicTree::DefaultDynamicStorageCodecRawUlong" },
			{ "T*<T*<hknpTyremarksWheel>>", "hknpTyremarksWheel" },
			{ "hkcdDynamicTree::DefaultDynamicStorage<hkcdDynamicTree::CodecRawUint>", "hkcdDynamicTree::DefaultDynamicStorageCodecRawUint" },
			{ "T*<hkRefPtr<hkaBoneAttachment>>", "hkaBoneAttachment" },
			{ "hkcdDynamicTree::CodecRaw<unsigned int>", "hkcdDynamicTree::CodecRaw<uint32_t>" },
			{ "hkcdDynamicTree::CodecRaw<unsigned long long>", "hkcdDynamicTree::CodecRaw<uint64_t>" },
			{ "hkRefPtr<hkaMeshBinding>", "hkaMeshBinding" },
			{ "hkReflect::QualifiedType<hkReflect::FloatType>", "IHavokObject" },
			{ "T*<hknpSurfaceVelocity>", "hknpSurfaceVelocity" },
			{ "hkArray<hknpExtendedExternMeshShapeGeometry::Quad, hkContainerHeapAllocator>", "std::vector<hknpExtendedExternMeshShapeGeometry::Quad>" },
			{ "T*<void>", "void*" },
			{ "T*<hclObjectSpaceDeformer::ThreeBlendEntryBlock>", "hclObjectSpaceDeformer::ThreeBlendEntryBlock" },
			{ "hkArray<hclMeshBoneDeformOperator::TriangleBonePair, hkContainerHeapAllocator>", "std::vector<hclMeshBoneDeformOperator::TriangleBonePair>" },
			{ "hkTuple<unsigned int, unsigned int, void, void, void, void, void, void>", "hkTuple2<uint32_t, uint32_t>" },
			{ "hkTuple<hkPropertyId, hkReflect::Any, void, void, void, void, void, void>", "hkTuple2<hkPropertyId, object>" },
			{ "hkTuple<T*<hkReflect::Type>, T*<void>, void, void, void, void, void, void>", "hkTuple2<IHavokObject, object>" },
			{ "T*<hclStateTransition>", "hclStateTransition" },
			{ "hkTuple<unsigned long long, T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>, void, void, void, void, void, void>", "hkTuple2<uint64_t, hkHashMap<IHavokObject, object>>" },
			{ "hkTuple<hkUlong, T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>, void, void, void, void, void, void>", "hkTuple2<uint64_t, hkHashMap<IHavokObject, object>>" },
			{ "hkTuple<int, hkRefPtr<hkaiStreamingSet>, void, void, void, void, void, void>", "hkTuple2<int, hkaiStreamingSet>" },
			{ "hkArray<hkxEnvironment::Variable, hkContainerHeapAllocator>", "std::vector<hkxEnvironment::Variable>" },
			{ "T*<hkScopedPtr<hknpParticleShapeProperties>>", "hknpParticleShapeProperties" },
			{ "hkTuple<int, hkaiNavMeshCutConfiguration::BigFaceInfo, void, void, void, void, void, void>", "hkTuple2<int, hkaiNavMeshCutConfiguration::BigFaceInfo>" },
			{ "T*<hclVolumeConstraintMx::FrameSingleData>", "hclVolumeConstraintMx::FrameSingleData" },
			{ "T*<hkDefaultPropertyBag>", "hkDefaultPropertyBag" },
			{ "hkOffsetBitFieldStorage<hkArray<hkUint32, hkContainerHeapAllocator>>", "hkOffsetBitFieldStorage<std::vector<uint32_t>>" },
			{ "hkTuple<hkaiIndex<hkInt32>, hkaiDefaultDynamicUserEdgeSetInfo::Section, void, void, void, void, void, void>", "hkTuple2<int, hkaiDefaultDynamicUserEdgeSetInfo::Section>" },
			{ "hkScopedPtr<hctAttributeDescription::Enum>", "hctAttributeDescription::Enum" },
			{ "hkArray<fsnpCustomMeshParameter::PrimitiveData, hkContainerHeapAllocator>", "std::vector<fsnpCustomMeshParameter::PrimitiveData>" },
			{ "hkTuple<hkaiIndex<hkInt32>, hkaiDynamicUserEdgeSetInfo::Section, void, void, void, void, void, void>", "hkTuple2<int, hkaiDynamicUserEdgeSetInfo::Section>" },
			{ "hkTuple<hkaiIndex<hkInt32>, hkRefPtr<hkaiStreamingSet>, void, void, void, void, void, void>", "hkTuple2<int, hkaiStreamingSet>" },
			{ "hkTuple<hkaiIndex<hkInt32>, int, void, void, void, void, void, void>", "hkTuple2<int, int>" },
			{ "hkArray<hkaiAnnotatedStreamingSet, hkContainerHeapAllocator>", "std::vector<hkaiAnnotatedStreamingSet>" },
			{ "hkTuple<hkHandle<hkUint32, -1>, hkaiDynamicUserEdgeSetInfo, void, void, void, void, void, void>", "hkTuple2<hkHandle<uint32_t>, hkaiDynamicUserEdgeSetInfo>" },
			{ "hkaiCopyOnWritePtr<hkaiDirectedGraphInstanceData, hkaiCopyOnWriteDefaultTraits<hkaiDirectedGraphInstanceData>>", "hkaiCopyOnWritePtr<hkaiDirectedGraphInstanceData>" },
			{ "T*<hkaiNavMeshGeneration::GeometrySource>", "hkaiNavMeshGeneration::GeometrySource" },
			{ "hkTuple<hkaiIndex<hkInt32>, hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>, void, void, void, void, void, void>", "hkTuple2<int, std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>>" },
			{ "hkTuple<hkaiIndex<hkInt32>, hkaiNavMeshCutConfiguration::FaceInfo, void, void, void, void, void, void>", "hkTuple2<int, hkaiNavMeshCutConfiguration::FaceInfo>" },
			{ "T*<hkbBehaviorGraphData>", "hkbBehaviorGraphData" },
			{ "hkTuple<void, void, void, void, void, void, void, void>", "hkTuple0" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkRefPtr<hkaiStreamingSet>>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiStreamingSet>>" },
			{ "hkcdDynamicTree::Tree<hkcdDynamicTree::DefaultDynamicStorage<hkcdDynamicTree::CodecInt16>>", "hkcdDynamicTree::TreeDefaultDynamicStorageCodecInt16" },
			{ "T*<T*<hkbBoolVariableSequencedData>>", "hkbBoolVariableSequencedData" },
			{ "hkArray<hkxMaterial::Property, hkContainerHeapAllocator>", "std::vector<hkxMaterial::Property>" },
			{ "hkcdDynamicTree::Tree<hkcdDynamicTree::DynamicStorage32>", "hkcdDynamicTree::TreeDynamicStorage32" },
			{ "hkArray<T*<hclStorageSetupMeshSection::SectionVertexChannel>, hkContainerHeapAllocator>", "std::vector<hclStorageSetupMeshSection::SectionVertexChannel>" },
			{ "hkcdDynamicTree::Tree<hkcdDynamicTree::DynamicStoragePtr>", "hkcdDynamicTree::TreeDynamicStoragePtr" },
			{ "hkArray<hclObjectSpaceDeformer::FiveBlendEntryBlock, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::FiveBlendEntryBlock>" },
			{ "T*<hkRefPtr<hkaAnimationBinding>>", "hkaAnimationBinding" },
			{ "hkArray<signed char, hkContainerHeapAllocator>", "std::vector<int8_t>" },
			{ "hkQuaternionf", "Eigen::Quaternionf" },
			{ "hkArray<short, hkContainerHeapAllocator>", "std::vector<short>" },
			{ "hkHashMap<hkaiIndex<hkInt32>, hkaiNavMeshCutConfiguration::BigFaceInfo>", "hkHashMap<int, hkaiNavMeshCutConfiguration::BigFaceInfo>" },
			{ "T*<hkRefPtr<hkaiNavVolumePathRequest>>", "hkaiNavVolumePathRequest" },
			{ "hkArray<hkcdDynamicTree::CodecRaw<unsigned long long>, hkContainerHeapAllocator>", "std::vector<hkcdDynamicTree::CodecRaw<uint64_t>>" },
			{ "hkArray<hkbFootIkModifier::InternalLegData, hkContainerHeapAllocator>", "std::vector<hkbFootIkModifier::InternalLegData>" },
			{ "hkMatrix4", "hkMatrix4Holder" },
			{ "hkMapOperations<unsigned long long>", "hkMapOperations" },
			{ "hkMapOperations<hkUint64>", "hkMapOperations" },
			{ "hkMapOperations<hkUint32>", "hkMapOperations" },
			{ "hkArray<hkRefPtr<hkaiPathRequestQueue>, hkContainerHeapAllocator>", "std::vector<hkaiPathRequestQueue>" },
			{ "hkMapOperations<hkIntRealPair>", "hkMapOperations" },
			{ "hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiNavMeshCutConfiguration::FaceInfo>", "hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::FaceInfo>" },
			{ "hkBitFieldStorage<hkArray<unsigned int, hkContainerHeapAllocator>>", "hkBitFieldStorage<std::vector<uint32_t>>" },
			{ "hkBitFieldStorage<hkArray<hkUint32, hkContainerHeapAllocator>>", "hkBitFieldStorage<std::vector<uint32_t>>" },
			{ "hkaiCopyOnWritePtr<hkaiNavMeshInstanceData, hkaiCopyOnWriteDefaultTraits<hkaiNavMeshInstanceData>>", "hkaiCopyOnWritePtr<hkaiNavMeshInstanceData>" },
			{ "hkHashMapDetail::MapTuple<hkPropertyId, hkReflect::Any>", "hkHashMapDetail::MapTuple<hkPropertyId, object>" },
			{ "hkRefPtr<hkaiNavVolumeMediator>", "hkaiNavVolumeMediator" },
			{ "hkHashMapDetail::MapTuple<hkUlong, T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>>", "hkHashMapDetail::MapTuple<uint64_t, hkHashMap<IHavokObject, object>>" },
			{ "hkHashMapDetail::MapTuple<hkHandle<unsigned int, -1>, hkaiDynamicUserEdgeSetInfo>", "hkHashMapDetail::MapTuple<hkHandle<uint32_t>, hkaiDynamicUserEdgeSetInfo>" },
			{ "hkaiReferencedArray<hkaiIndex<hkInt32>>", "hkaiReferencedArray<int>" },
			{ "hkHashMapDetail::MapTuple<int, hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>>", "hkHashMapDetail::MapTuple<int, std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>>" },
			{ "T*<hkViewPtr<hkaiNavigator>>", "hkaiNavigator" },
			{ "hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>", "hkHashMapDetail::MapTuple<int, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>" },
			{ "T*<hclSimClothSetupObject>", "hclSimClothSetupObject" },
			{ "hkRefPtr<hkxTextureInplace>", "hkxTextureInplace" },
			{ "hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiDefaultDynamicUserEdgeSetInfo::Section>", "hkHashMapDetail::MapTuple<int, hkaiDefaultDynamicUserEdgeSetInfo::Section>" },
			{ "T*<hclClothState>", "hclClothState" },
			{ "hkFourTransposedPointsImpl<float>", "hkFourTransposedPointsImplFloat" },
			{ "hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiDynamicUserEdgeSetInfo::Section>", "hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::Section>" },
			{ "hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, int>", "hkHashMapDetail::MapTuple<int, int>" },
			{ "hkRefPtr<hkaiVolumePathfindingUtil::FindPathInput>", "hkaiVolumePathfindingUtil::FindPathInput" },
			{ "hkHashMapDetail::MapTuple<hkHandle<hkUint32, -1>, hkaiDynamicUserEdgeSetInfo>", "hkHashMapDetail::MapTuple<hkHandle<uint32_t>, hkaiDynamicUserEdgeSetInfo>" },
			{ "hkArray<T*<hclSimClothSetupObject>, hkContainerHeapAllocator>", "std::vector<hclSimClothSetupObject>" },
			{ "hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>>", "hkHashMapDetail::MapTuple<int, std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>>" },
			{ "T*<T*<hclStateTransition>>", "hclStateTransition" },
			{ "T*<unsigned int>", "uint32_t" },
			{ "hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiNavMeshCutConfiguration::BigFaceInfo>", "hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::BigFaceInfo>" },
			{ "TestContainerThingEnd<int, 2>", "TestContainerThingEnd<int>" },
			{ "TestContainerThingEnd<hkInt32, 2>", "TestContainerThingEnd<int>" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiNavMeshCutConfiguration::FaceInfo>>", "hkHashBase<hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::FaceInfo>>" },
			{ "TestContainerThingStart<hkInt32>", "TestContainerThingStart<int>" },
			{ "hk::ValueAttribute<unsigned long long>", "hk::ValueAttribute<uint64_t>" },
			{ "T*<hkaSkeleton::Partition>", "hkaSkeleton::Partition" },
			{ "T*<hkReflect::ArrayType>", "IHavokObject" },
			{ "hk::ValueAttribute<unsigned int>", "hk::ValueAttribute<uint32_t>" },
			{ "T*<hkaiNavMesh::Edge>", "hkaiNavMesh::Edge" },
			{ "hk::ValueAttribute<hkColor::Argb>", "hk::ValueAttribute<Color>" },
			{ "T*<hkRefPtr<hkaiNavMeshInstanceCutter>>", "hkaiNavMeshInstanceCutter" },
			{ "T*<hknpVehicleDriverInputStatus>", "hknpVehicleDriverInputStatus" },
			{ "hk::ValueAttribute<hkReflect::QualifiedType<hkReflect::Type>>", "hk::ValueAttribute<IHavokObject>" },
			{ "T*<hclBoneSpaceDeformer::LocalBlockUnpackedP>", "hclBoneSpaceDeformer::LocalBlockUnpackedP" },
			{ "T*<hkxAttributeGroup>", "hkxAttributeGroup" },
			{ "hkRefPtr<hkbProjectStringData>", "hkbProjectStringData" },
			{ "hk::ValueAttribute<hkUlong>", "hk::ValueAttribute<uint64_t>" },
			{ "T*<T*<hkbEventSequencedData>>", "hkbEventSequencedData" },
			{ "hk::ValueAttribute<T*<hkReflect::Type>>", "hk::ValueAttribute<IHavokObject>" },
			{ "hkReflect::QualifiedType<hkReflect::VoidType>", "IHavokObject" },
			{ "hk::ValueAttribute<hkUint32>", "hk::ValueAttribute<uint32_t>" },
			{ "T*<T*<hclSimClothSetupObject>>", "hclSimClothSetupObject" },
			{ "T*<hkHashMapDetail::MapTuple<int, hkRefPtr<hkaiStreamingSet>>>", "hkHashMapDetail::MapTuple<int, hkaiStreamingSet>" },
			{ "hkSet<hkUint64, hkContainerHeapAllocator, hkMapOperations<hkUint64>>", "hkSet<uint64_t, hkContainerHeapAllocator>" },
			{ "hkBitFieldBase<hkBitFieldStorage<hkArray<unsigned int, hkContainerHeapAllocator>>>", "hkBitFieldBase<hkBitFieldStorage<std::vector<uint32_t>>>" },
			{ "hkBitFieldBase<hkOffsetBitFieldStorage<hkArray<hkUint32, hkContainerHeapAllocator>>>", "hkBitFieldBase<hkOffsetBitFieldStorage<std::vector<uint32_t>>>" },
			{ "hkViewPtr<hkpConstraintData>", "hkpConstraintData" },
			{ "hkBitFieldBase<hkBitFieldStorage<hkArray<hkUint32, hkContainerHeapAllocator>>>", "hkBitFieldBase<hkBitFieldStorage<std::vector<uint32_t>>>" },
			{ "T*<hkxSkinBinding>", "hkxSkinBinding" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkPropertyId, hkReflect::Any>>", "hkHashBase<hkHashMapDetail::MapTuple<hkPropertyId, object>>" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkUlong, T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>>>", "hkHashBase<hkHashMapDetail::MapTuple<uint64_t, hkHashMap<IHavokObject, object>>>" },
			{ "hkArray<hkaiNavMeshGenerationUtilsSettings::MaterialConstructionPair, hkContainerHeapAllocator>", "std::vector<hkaiNavMeshGenerationUtilsSettings::MaterialConstructionPair>" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<int, hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>>>", "hkHashBase<hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::ExternalEdges>>" },
			{ "T*<hclBoneSpaceDeformer::LocalBlockUnpackedPNT>", "hclBoneSpaceDeformer::LocalBlockUnpackedPNT" },
			{ "T*<hclTransformSetDefinition>", "hclTransformSetDefinition" },
			{ "T*<hkRefCountedProperties>", "hkRefCountedProperties" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkHandle<unsigned int, -1>, hkaiDynamicUserEdgeSetInfo>>", "hkHashBase<hkHashMapDetail::MapTuple<hkHandle<uint32_t>, hkaiDynamicUserEdgeSetInfo>>" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<int, hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>>>", "hkHashBase<hkHashMapDetail::MapTuple<int, std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>>>" },
			{ "T*<hkbStatestd::vectorener>", "hkbStatestd::vectorener" },
			{ "hkArray<hkcdPlanarSolid::Node, hkContainerHeapAllocator>", "std::vector<hkcdPlanarSolid::Node>" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiDefaultDynamicUserEdgeSetInfo::Section>>", "hkHashBase<hkHashMapDetail::MapTuple<int, hkaiDefaultDynamicUserEdgeSetInfo::Section>>" },
			{ "T*<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiNavMeshCutConfiguration::BigFaceInfo>>", "hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::BigFaceInfo>" },
			{ "hkHashBase<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiNavMeshCutConfiguration::BigFaceInfo>>", "hkHashBase<hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::BigFaceInfo>>" },
			{ "hkHashMap<hkUlong, T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>>", "hkHashMap<uint64_t, hkHashMap<IHavokObject, object>>" },
			{ "T*<hkaFootstepAnalysisInfo>", "hkaFootstepAnalysisInfo" },
			{ "hkHashMap<int, hkRefPtr<hkaiStreamingSet>>", "hkHashMap<int, hkaiStreamingSet>" },
			{ "hkHashMap<hkaiIndex<hkInt32>, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>", "hkHashMap<int, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>" },
			{ "hkHashMap<hkaiIndex<hkInt32>, hkaiDefaultDynamicUserEdgeSetInfo::Section>", "hkHashMap<int, hkaiDefaultDynamicUserEdgeSetInfo::Section>" },
			{ "T*<hkAabb>", "hkAabb" },
			{ "hkArray<hkQsTransformf, hkContainerHeapAllocator>", "std::vector<hkQsTransformf>" },
			{ "T&<hkQTransformf>", "hkQTransformf" },
			{ "hkQsTransform", "hkQsTransformf" },
			{ "hkHashMap<hkaiIndex<hkInt32>, hkRefPtr<hkaiStreamingSet>>", "hkHashMap<int, hkaiStreamingSet>" },
			{ "hkHashMap<hkaiIndex<hkInt32>, int>", "hkHashMap<int, int>" },
			{ "T*<hkRefPtr<hkbCustomIdSelector>>", "hkbCustomIdSelector" },
			{ "hkRefPtr<hkaiDirectedGraphInstance>", "hkaiDirectedGraphInstance" },
			{ "hkHashMap<hkaiIndex<hkInt32>, hkaiModifiedSections::Section>", "hkHashMap<int, hkaiModifiedSections::Section>" },
			{ "T*<hclTransformSetSetupObject>", "hclTransformSetSetupObject" },
			{ "T*<hkMonitorStreamTypeMap::TypeMap>", "hkMonitorStreamTypeMap::TypeMap" },
			{ "hkArray<T*<hkbPoseStoringGeneratorOutputstd::vectorener::StoredPose>, hkContainerHeapAllocator>", "std::vector<hkbPoseStoringGeneratorOutputstd::vectorener::StoredPose>" },
			{ "T*<T*<hclStateTransitionSetupObject>>", "hclStateTransitionSetupObject" },
			{ "T*<hkaSkeletonMapperData::PartitionMappingRange>", "hkaSkeletonMapperData::PartitionMappingRange" },
			{ "T*<hknpRefWorldCinfo>", "hknpRefWorldCinfo" },
			{ "hkArray<hkHandle<unsigned int, -1>, hkContainerHeapAllocator>", "std::vector<hkHandle<uint32_t>>" },
			{ "hkRefPtr<hkaiNavVolumePathRequestInfo>", "hkaiNavVolumePathRequestInfo" },
			{ "T*<hclBendLinkConstraintSetMx::Single>", "hclBendLinkConstraintSetMx::Single" },
			{ "hkArray<hkUint64, hkContainerHeapAllocator>", "std::vector<uint64_t>" },
			{ "T*<hkaiNavigator::PathRequest>", "hkaiNavigator::PathRequest" },
			{ "T*<T*<hclClothStateSetupObject>>", "hclClothStateSetupObject" },
			{ "T*<hkColor::Argb>", "Color" },
			{ "hkArray<hkxVertexDescription::ElementDecl, hkContainerHeapAllocator>", "std::vector<hkxVertexDescription::ElementDecl>" },
			{ "T*<hclBufferSetupObject>", "hclBufferSetupObject" },
			{ "hkArray<hclStorageSetupMesh::EdgeChannel, hkContainerHeapAllocator>", "std::vector<hclStorageSetupMesh::EdgeChannel>" },
			{ "hkRefPtr<hkaiPathfindingUtil::FindPathInput>", "hkaiPathfindingUtil::FindPathInput" },
			{ "hkArray<hkViewPtr<hkaiCollisionAvoidance::Character>, hkContainerHeapAllocator>", "std::vector<hkaiCollisionAvoidance::Character>" },
			{ "hkRefPtr<hkcdStaticAabbTree::Impl>", "hkcdStaticAabbTree::Impl" },
			{ "hkRefPtr<hknpMaterialLibrary>", "hknpMaterialLibrary" },
			{ "T*<hkaiNavVolumeMediator>", "hkaiNavVolumeMediator" },
			{ "T*<hkbLayer>", "hkbLayer" },
			{ "hkArray<hclSkinOperator::BoneInfluence, hkContainerHeapAllocator>", "std::vector<hclSkinOperator::BoneInfluence>" },
			{ "hkRefPtr<hknpShapeTagCodec>", "hknpShapeTagCodec" },
			{ "T*<hkbStateChooser>", "hkbStateChooser" },
			{ "hkRefPtr<hkSkinnedMeshShape>", "hkSkinnedMeshShape" },
			{ "T*<hknpMotionPropertiesLibrary>", "hknpMotionPropertiesLibrary" },
			{ "T*<hclBoneSpaceDeformer::TwoBlendEntryBlock>", "hclBoneSpaceDeformer::TwoBlendEntryBlock" },
			{ "T*<hkbSequenceStringData>", "hkbSequenceStringData" },
			{ "T*<T*<hkbEventPayload>>", "hkbEventPayload" },
			{ "T*<hkaiDirectedGraphInstanceData::FreeBlockstd::vector>", "hkaiDirectedGraphInstanceData::FreeBlockstd::vector" },
			{ "T*<hkRefPtr<hkxNodeSelectionSet>>", "hkxNodeSelectionSet" },
			{ "T*<hkVariableTweakingHelper::BoolVariableInfo>", "hkVariableTweakingHelper::BoolVariableInfo" },
			{ "T*<hkcdStaticMeshTree::Connectivity::SectionHeader>", "hkcdStaticMeshTree::Connectivity::SectionHeader" },
			{ "T*<T*<hclOperatorSetupObject>>", "hclOperatorSetupObject" },
			{ "hkRefPtr<hknpMaterial>", "hknpMaterial" },
			{ "hkArray<hkcdDynamicTree::CodecRawUint, hkContainerHeapAllocator>", "std::vector<hkcdDynamicTree::CodecRawUint>" },
			{ "T*<hkbCustomIdSelector>", "hkbCustomIdSelector" },
			{ "T*<hkaiUserEdgeUtils::UserEdgePair>", "hkaiUserEdgeUtils::UserEdgePair" },
			{ "T*<hkSerialize::CompatTypeParentInfo::Parent>", "hkSerialize::CompatTypeParentInfo::Parent" },
			{ "T*<hclObjectSpaceDeformer::OneBlendEntryBlock>", "hclObjectSpaceDeformer::OneBlendEntryBlock" },
			{ "T*<hkbCharacterStringData>", "hkbCharacterStringData" },
			{ "T*<hctFilterConfigurationSet::FilterStage>", "hctFilterConfigurationSet::FilterStage" },
			{ "T*<hkRefPtr<hkaiVolume>>", "hkaiVolume" },
			{ "T*<hkRefPtr<hkbNodeInternalStateInfo>>", "hkbNodeInternalStateInfo" },
			{ "hkRefPtr<hkaiNavigatorManager>", "hkaiNavigatorManager" },
			{ "hkArray<hkRefPtr<hknpPhysicsSystemData>, hkContainerHeapAllocator>", "std::vector<hknpPhysicsSystemData>" },
			{ "T*<hclVirtualCollisionPointsData::Block>", "hclVirtualCollisionPointsData::Block" },
			{ "hkRefPtr<hkpConstraintData>", "hkpConstraintData" },
			{ "hkArray<hctFilterConfigurationSet::FilterStage, hkContainerHeapAllocator>", "std::vector<hctFilterConfigurationSet::FilterStage>" },
			{ "T*<const char*>", "std::string" },
			{ "hkArray<hkHashMapDetail::MapTuple<int, hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::ExternalEdges>>" },
			{ "T*<hkRefPtr<hkaAnimation>>", "hkaAnimation" },
			{ "T*<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiModifiedSections::Section>>", "hkHashMapDetail::MapTuple<int, hkaiModifiedSections::Section>" },
			{ "hkRefPtr<hclBufferSetupObject>", "hclBufferSetupObject" },
			{ "T*<hkRefPtr<hkMeshTexture>>", "hkMeshTexture" },
			{ "hkRefPtr<hclNamedTransformSetSetupObject>", "hclNamedTransformSetSetupObject" },
			{ "hkRefPtr<hkaiVolumeNavigator::PathRequestInput>", "hkaiVolumeNavigator::PathRequestInput" },
			{ "hkArray<hkaiGatePath::PathGate, hkContainerHeapAllocator>", "std::vector<hkaiGatePath::PathGate>" },
			{ "hkArray<hkRefPtr<hknpConvexShape>, hkContainerHeapAllocator>", "std::vector<hknpConvexShape>" },
			{ "T*<hkxEnum::Item>", "hkxEnum::Item" },
			{ "hkReflect::QualifiedType<hkReflect::Type>", "IHavokObject" },
			{ "T*<T*<hknpShapeKeyMask>>", "hknpShapeKeyMask" },
			{ "T*<hkxMesh>", "hkxMesh" },
			{ "T*<hclStorageSetupMesh::Bone>", "hclStorageSetupMesh::Bone" },
			{ "T*<T*<hclConstraintSet>>", "hclConstraintSet" },
			{ "T*<hkMonitorStreamStringMap::StringMap>", "hkMonitorStreamStringMap::StringMap" },
			{ "T*<hkaSkeleton>", "hkaSkeleton" },
			{ "hkArray<hkVector2f, hkContainerHeapAllocator>", "std::vector<hkVector2f>" },
			{ "hkArray<hclObjectSpaceDeformer::OneBlendEntryBlock, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::OneBlendEntryBlock>" },
			{ "hkSimdFloat32", "Vector128<float>" },
			{ "hkArray<hkbEventRangeData, hkContainerHeapAllocator>", "std::vector<hkbEventRangeData>" },
			{ "T*<hkaiVolumeNavigatorStalenessChecker>", "hkaiVolumeNavigatorStalenessChecker" },
			{ "T*<hkTuple<hkUint32, hkUint32, void, void, void, void, void, void>>", "hkTuple2<uint32_t, uint32_t>" },
			{ "T*<hclClothData>", "hclClothData" },
			{ "T*<hkxVertexDescription::ElementDecl>", "hkxVertexDescription::ElementDecl" },
			{ "T*<T*<hkReflect::Type>>", "IHavokObject" },
			{ "T*<T*<hkbStatestd::vectorener>>", "hkbStatestd::vectorener" },
			{ "T*<hclVirtualCollisionPointsData::BarycentricDictionaryEntry>", "hclVirtualCollisionPointsData::BarycentricDictionaryEntry" },
			{ "T*<hclStorageSetupMesh::EdgeChannel>", "hclStorageSetupMesh::EdgeChannel" },
			{ "T*<hknpVehicleEngine>", "hknpVehicleEngine" },
			{ "T*<hkGeometry::Triangle>", "hkGeometry::Triangle" },
			{ "T*<hclObjectSpaceDeformer::LocalBlockUnpackedPN>", "hclObjectSpaceDeformer::LocalBlockUnpackedPN" },
			{ "T*<T*<hclStorageSetupMeshSection>>", "hclStorageSetupMeshSection" },
			{ "T*<hclObjectSpaceDeformer::SixBlendEntryBlock>", "hclObjectSpaceDeformer::SixBlendEntryBlock" },
			{ "T*<hkRefPtr<hkaiVolumeNavigator>>", "hkaiVolumeNavigator" },
			{ "T*<hknpVehicleSteering>", "hknpVehicleSteering" },
			{ "T*<hkHashMapDetail::MapTuple<unsigned long long, T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>>>", "hkHashMapDetail::MapTuple<uint64_t, hkHashMap<IHavokObject, object>>" },
			{ "hkRefPtr<hknpBroadPhaseConfig>", "hknpBroadPhaseConfig" },
			{ "T*<hclNamedTransformSetSetupObject>", "hclNamedTransformSetSetupObject" },
			{ "hkArray<hkcdDynamicTree::CodecInt16, hkContainerHeapAllocator>", "std::vector<hkcdDynamicTree::CodecInt16>" },
			{ "hkArray<hclSimClothData::CollidablePinchingData, hkContainerHeapAllocator>", "std::vector<hclSimClothData::CollidablePinchingData>" },
			{ "hkArray<hclSimulateSetupObject::Config, hkContainerHeapAllocator>", "std::vector<hclSimulateSetupObject::Config>" },
			{ "hkRefPtr<hkaiPathRequestQueue>", "hkaiPathRequestQueue" },
			{ "T*<hkReflect::OpaqueType>", "IHavokObject" },
			{ "T*<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>>>", "hkHashMapDetail::MapTuple<int, std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>>" },
			{ "hkRefPtr<hkxTextureFile>", "hkxTextureFile" },
			{ "T*<T*<hkbJigglerGroup>>", "hkbJigglerGroup" },
			{ "hkArray<hknpStorageParticleSystem, hkContainerHeapAllocator>", "std::vector<hknpStorageParticleSystem>" },
			{ "hkRefPtr<hkMemoryResourceContainer>", "hkMemoryResourceContainer" },
			{ "hkArray<hkRefPtr<hkxCamera>, hkContainerHeapAllocator>", "std::vector<hkxCamera>" },
			{ "hkRefPtr<hknpSurfaceVelocity>", "hknpSurfaceVelocity" },
			{ "hkaiCopyOnWritePtr<hkcdDynamicAabbTree, hkaiCopyOnWriteDefaultTraits<hkcdDynamicAabbTree>>", "hkaiCopyOnWritePtr<hkcdDynamicAabbTree>" },
			{ "T*<hkbIntVariableSequencedData>", "hkbIntVariableSequencedData" },
			{ "T*<hkxBlendShapeCollectionChannel::Channel>", "hkxBlendShapeCollectionChannel::Channel" },
			{ "hkArray<hkaiCopyOnWritePtr<hkaiStreamingSetInstance, hkaiCopyOnWriteDefaultTraits<hkaiStreamingSetInstance>>, hkContainerHeapAllocator>", "std::vector<hkaiCopyOnWritePtr<hkaiStreamingSetInstance>>" },
			{ "hkRefPtr<hknpCollisionFilter>", "hknpCollisionFilter" },
			{ "T*<hkaiReferencedArray<hkaiReferenceFrame>>", "hkaiReferencedArray<hkaiReferenceFrame>" },
			{ "T*<hkaiReferencedArray<hkaiPackedKey_<hkaiIndex<hkInt32>, hkaiIndex<hkInt32>>>>", "hkaiReferencedArray<uint32_t>" },
			{ "hkArray<hkaiNavVolumeGenerationSettings::MaterialConstructionInfo, hkContainerHeapAllocator>", "std::vector<hkaiNavVolumeGenerationSettings::MaterialConstructionInfo>" },
			{ "T*<hkbBoolVariableSequencedData::Sample>", "hkbBoolVariableSequencedData::Sample" },
			{ "hkRefPtr<hkaSkeleton>", "hkaSkeleton" },
			{ "hkArray<int, hkContainerHeapAllocator>", "std::vector<int>" },
			{ "hkArray<hkxEnum::Item, hkContainerHeapAllocator>", "std::vector<hkxEnum::Item>" },
			{ "T*<hkcdPlanarGeometryPolygonCollection>", "hkcdPlanarGeometryPolygonCollection" },
			{ "hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>", "std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>" },
			{ "char[N]<1024>", "std::string" },
			{ "hkRefPtr<hkWeakPtrTest::Foo>", "hkWeakPtrTest::Foo" },
			{ "T*<hkaMeshBinding::Mapping>", "hkaMeshBinding::Mapping" },
			{ "hkRefPtr<hkbClipTriggerArray>", "hkbClipTriggerArray" },
			{ "T*<hclGatherSomeVerticesOperator::VertexPair>", "hclGatherSomeVerticesOperator::VertexPair" },
			{ "T*<hkArray<hkVector4, hkContainerHeapAllocator>>", "std::vector<Vector4>" },
			{ "hkRefPtr<hkaAnimationBinding>", "hkaAnimationBinding" },
			{ "T*<hkaiStreamingCollection>", "hkaiStreamingCollection" },
			{ "hkRefPtr<hkaiVolumeNavigatorManager>", "hkaiVolumeNavigatorManager" },
			{ "hkaiCopyOnWriteDefaultTraits<hkaiDirectedGraphInstanceData>", "hkaiCopyOnWriteDefaultTraits" },
			{ "T*<hclUpdateSomeVertexFramesOperator::Triangle>", "hclUpdateSomeVertexFramesOperator::Triangle" },
			{ "hkRefPtr<hkaiNavMeshGeneration::GeometrySource>", "hkaiNavMeshGeneration::GeometrySource" },
			{ "T*<T*<hclStorageSetupMeshSection::SectionVertexChannel>>", "hclStorageSetupMeshSection::SectionVertexChannel" },
			{ "T*<hkQTransform>", "hkQTransform" },
			{ "hkArray<hkaiIndex<hkUint16>, hkContainerHeapAllocator>", "std::vector<uint16_t>" },
			{ "T*<hkaiOverlapManager::Section>", "hkaiOverlapManager::Section" },
			{ "T*<hkRefPtr<hkxSpline>>", "hkxSpline" },
			{ "hkViewPtr<hknpCompoundShape>", "hknpCompoundShape" },
			{ "T*<hkbEventProperty>", "hkbEventProperty" },
			{ "T*<hkaiNavigator::PathRequestInput>", "hkaiNavigator::PathRequestInput" },
			{ "T*<hkbHandIkModifier::Hand>", "hkbHandIkModifier::Hand" },
			{ "T*<hclObjectSpaceDeformer::SevenBlendEntryBlock>", "hclObjectSpaceDeformer::SevenBlendEntryBlock" },
			{ "hkArray<hkRefPtr<hkaBoneAttachment>, hkContainerHeapAllocator>", "std::vector<hkaBoneAttachment>" },
			{ "hkArray<hkaBone, hkContainerHeapAllocator>", "std::vector<hkaBone>" },
			{ "T*<hkRefPtr<hkaiSilhouetteGenerator>>", "hkaiSilhouetteGenerator" },
			{ "T*<hkStringPtr>", "std::string" },
			{ "T*<hkaiCollisionAvoidance::Filter>", "hkaiCollisionAvoidance::Filter" },
			{ "hkRefPtr<hkaBoneAttachment>", "hkaBoneAttachment" },
			{ "T*<hknpHeightFieldBoundingVolume>", "hknpHeightFieldBoundingVolume" },
			{ "hkRefPtr<hkaiDirectedGraphExplicitCost>", "hkaiDirectedGraphExplicitCost" },
			{ "hkViewPtr<hkLocalFrame>", "hkLocalFrame" },
			{ "T*<hkxBlendShapeCollectionChannel::FloatCurve>", "hkxBlendShapeCollectionChannel::FloatCurve" },
			{ "T*<hkSkinnedMeshShape>", "hkSkinnedMeshShape" },
			{ "T*<hkQuaternionf>", "Eigen::Quaternionf" },
			{ "T*<hkHandle<unsigned int, -1>>", "hkHandle<uint32_t>" },
			{ "hkArray<hkaiEdgePath::Edge, hkContainerHeapAllocator>", "std::vector<hkaiEdgePath::Edge>" },
			{ "T*<hkbBoneWeightArray>", "hkbBoneWeightArray" },
			{ "hkArray<hkbFootIkDriverInfo::Leg, hkContainerHeapAllocator>", "std::vector<hkbFootIkDriverInfo::Leg>" },
			{ "T*<hkcdDefaultStaticMeshTree::PrimitiveDataRun>", "hkcdDefaultStaticMeshTree::PrimitiveDataRun" },
			{ "T*<hkaiNavVolumeInstance>", "hkaiNavVolumeInstance" },
			{ "T*<hknpBodyQualityLibrary>", "hknpBodyQualityLibrary" },
			{ "T*<hkbCompiledExpressionSet::Token>", "hkbCompiledExpressionSet::Token" },
			{ "T*<hkbVariableInfo>", "hkbVariableInfo" },
			{ "hkRefPtr<hkbStateMachine::EventPropertyArray>", "hkbStateMachine::EventPropertyArray" },
			{ "hkArray<T*<hkbJigglerGroup>, hkContainerHeapAllocator>", "std::vector<hkbJigglerGroup>" },
			{ "T*<T*<hclSceneDataSetupMeshSection>>", "hclSceneDataSetupMeshSection" },
			{ "T*<hknpVehicleData::WheelComponentParams>", "hknpVehicleData::WheelComponentParams" },
			{ "hkArray<hkRefPtr<hkxTextureFile>, hkContainerHeapAllocator>", "std::vector<hkxTextureFile>" },
			{ "T*<hkbExpressionData>", "hkbExpressionData" },
			{ "T*<hkbEventSequencedData>", "hkbEventSequencedData" },
			{ "hkArray<hknpShapeInstance, hkContainerHeapAllocator>", "std::vector<hknpShapeInstance>" },
			{ "T*<hknpExtendedExternMeshShapeGeometry::Triangle>", "hknpExtendedExternMeshShapeGeometry::Triangle" },
			{ "hkArray<hkMonitorStreamStringMap::StringMap, hkContainerHeapAllocator>", "std::vector<hkMonitorStreamStringMap::StringMap>" },
			{ "T*<hclStateTransition::StateTransitionData>", "hclStateTransition::StateTransitionData" },
			{ "T*<hkbModifier>", "hkbModifier" },
			{ "hkRefPtr<hkaiStreamingSetInstance>", "hkaiStreamingSetInstance" },
			{ "T*<hkaiAstarCostModifier>", "hkaiAstarCostModifier" },
			{ "hkArray<hknpWorldSnapshot::ConstraintGroupInfo, hkContainerHeapAllocator>", "std::vector<hknpWorldSnapshot::ConstraintGroupInfo>" },
			{ "hkArray<hclVirtualCollisionPointsData::EdgeFanSection, hkContainerHeapAllocator>", "std::vector<hclVirtualCollisionPointsData::EdgeFanSection>" },
			{ "hkRefPtr<hkbSequenceStringData>", "hkbSequenceStringData" },
			{ "T*<hkaiPackedKey_<hkaiIndex<int>, hkaiIndex<int>>>", "uint32_t" },
			{ "hkRefPtr<hkaiVolumePathfindingUtil::FindPathOutput>", "hkaiVolumePathfindingUtil::FindPathOutput" },
			{ "hkArray<hclStretchLinkConstraintSet::Link, hkContainerHeapAllocator>", "std::vector<hclStretchLinkConstraintSet::Link>" },
			{ "hkArray<hkaAnnotationTrack::Annotation, hkContainerHeapAllocator>", "std::vector<hkaAnnotationTrack::Annotation>" },
			{ "hkArray<T*<hclSimClothPose>, hkContainerHeapAllocator>", "std::vector<hclSimClothPose>" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>>>" },
			{ "T*<hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::BigFaceInfo>>", "hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::BigFaceInfo>" },
			{ "hkArray<hclSimClothSetupObject::PerInstanceCollidable, hkContainerHeapAllocator>", "std::vector<hclSimClothSetupObject::PerInstanceCollidable>" },
			{ "T*<hkaiVolumeNavigator::Goal>", "hkaiVolumeNavigator::Goal" },
			{ "T*<T*<hkLocalFrame>>", "hkLocalFrame" },
			{ "T*<hkbEventInfo>", "hkbEventInfo" },
			{ "T*<T*<hclStorageSetupMeshSection::SectionTriangleSelectionChannel>>", "hclStorageSetupMeshSection::SectionTriangleSelectionChannel" },
			{ "T*<hclVolumeConstraint::FrameData>", "hclVolumeConstraint::FrameData" },
			{ "T*<hclShape>", "hclShape" },
			{ "T*<hclStretchLinkConstraintSetMx::Single>", "hclStretchLinkConstraintSetMx::Single" },
			{ "hkaiReferencedArray<T*<hkaiStreamingSet>>", "hkaiReferencedArray<hkaiStreamingSet>" },
			{ "hkRefPtr<hkaiNavVolumeInstanceData>", "hkaiNavVolumeInstanceData" },
			{ "hkAtomic::Variable<unsigned char>", "hkAtomic::Variable<uint8_t>" },
			{ "hkaiCopyOnWriteDefaultTraits<hkaiNavMeshClearanceCache>", "hkaiCopyOnWriteDefaultTraits" },
			{ "hkaiCopyOnWriteDefaultTraits<hkaiNavVolumeInstanceData>", "hkaiCopyOnWriteDefaultTraits" },
			{ "hkaiCopyOnWriteDefaultTraits<hkaiNavMeshInstanceData>", "hkaiCopyOnWriteDefaultTraits" },
			{ "T*<hkHashMapDetail::MapTuple<int, hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>>>", "hkHashMapDetail::MapTuple<int, std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>>" },
			{ "T*<hkbCustomPropertySheet>", "hkbCustomPropertySheet" },
			{ "hkArray<T*<hclBufferSetupObject>, hkContainerHeapAllocator>", "std::vector<hclBufferSetupObject>" },
			{ "hkArray<CustomLookAtTwistModifier::TwistParam, hkContainerHeapAllocator>", "std::vector<CustomLookAtTwistModifier::TwistParam>" },
			{ "hkArray<T*<hclClothStateSetupObject>, hkContainerHeapAllocator>", "std::vector<hclClothStateSetupObject>" },
			{ "T*<hknpConvexPolytopeShape::Connectivity::Edge>", "hknpConvexPolytopeShape::Connectivity::Edge" },
			{ "T*<hkcdPlanarSolid::Node>", "hkcdPlanarSolid::Node" },
			{ "T*<hkaiNavMeshPathRequestInfo>", "hkaiNavMeshPathRequestInfo" },
			{ "hkSimpleLocalFrame::ChildPointer", "hkLocalFrame" },
			{ "T*<hkaiLocalSteeringInput>", "hkaiLocalSteeringInput" },
			{ "hkArray<hkbCustomTestGeneratorNestedTypesBase, hkContainerHeapAllocator>", "std::vector<hkbCustomTestGeneratorNestedTypesBase>" },
			{ "hkRefPtr<hknpMotionPropertiesData>", "hknpMotionPropertiesData" },
			{ "T*<hkbRealVariableSequencedData>", "hkbRealVariableSequencedData" },
			{ "T*<hknpVehicleSuspension>", "hknpVehicleSuspension" },
			{ "T*<hkReflect::Detail::Opaque>", "IHavokObject" },
			{ "hkArray<hclBonePlanesSetupObject::PerParticlePlane, hkContainerHeapAllocator>", "std::vector<hclBonePlanesSetupObject::PerParticlePlane>" },
			{ "T*<hkbBehaviorGraphStringData>", "hkbBehaviorGraphStringData" },
			{ "hkArray<T*<hknpTyremarksWheel>, hkContainerHeapAllocator>", "std::vector<hknpTyremarksWheel>" },
			{ "T*<hkMeshShape>", "hkMeshShape" },
			{ "hkRefPtr<hkaiStreamingCollection>", "hkaiStreamingCollection" },
			{ "hkArray<hkaSkeleton::Partition, hkContainerHeapAllocator>", "std::vector<hkaSkeleton::Partition>" },
			{ "T*<hclBufferDefinition>", "hclBufferDefinition" },
			{ "T*<hkaiCollisionAvoidance::SphereObstacle>", "hkaiCollisionAvoidance::SphereObstacle" },
			{ "T*<hclBoneSpaceDeformer::OneBlendEntryBlock>", "hclBoneSpaceDeformer::OneBlendEntryBlock" },
			{ "hkRefPtr<hkaiAvoidanceProperties>", "hkaiAvoidanceProperties" },
			{ "T*<hkaiSilhouetteGenerator>", "hkaiSilhouetteGenerator" },
			{ "hkViewPtr<hkReflect::Detail::Opaque>", "IHavokObject" },
			{ "T*<T*<hkbCharacter>>", "hkbCharacter" },
			{ "T*<hkaiDynamicNavMeshQueryMediator>", "hkaiDynamicNavMeshQueryMediator" },
			{ "hkArray<hkRefPtr<hkxSkinBinding>, hkContainerHeapAllocator>", "std::vector<hkxSkinBinding>" },
			{ "T*<hkcdPlanarGeometry>", "hkcdPlanarGeometry" },
			{ "hkArray<T*<hclCollidable>, hkContainerHeapAllocator>", "std::vector<hclCollidable>" },
			{ "T*<hknpConvexShape>", "hknpConvexShape" },
			{ "T*<hkMeshBody>", "hkMeshBody" },
			{ "T*<hkRefPtr<hkxTextureInplace>>", "hkxTextureInplace" },
			{ "hkRefPtr<hkcdPlanarGeometryPolygonCollection>", "hkcdPlanarGeometryPolygonCollection" },
			{ "hkRefPtr<hkaiGatePath>", "hkaiGatePath" },
			{ "T*<hknpWorldSnapshot::ConstraintGroupInfo>", "hknpWorldSnapshot::ConstraintGroupInfo" },
			{ "T*<hkArray<hkHandle<hkUint32, 2147483647>, hkContainerHeapAllocator>>", "std::vector<hkHandle<uint32_t>>" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkUlong, T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<uint64_t, hkHashMap<IHavokObject, object>>>" },
			{ "hkArray<hkxAttributeGroup, hkContainerHeapAllocator>", "std::vector<hkxAttributeGroup>" },
			{ "T*<hknpVehicleBrake>", "hknpVehicleBrake" },
			{ "T*<hclVolumeConstraintMx::ApplyBatchData>", "hclVolumeConstraintMx::ApplyBatchData" },
			{ "T*<fsnpCustomMeshParameter::TriangleData>", "fsnpCustomMeshParameter::TriangleData" },
			{ "T*<hkFreestd::vectorArrayElement<hknpShapeInstance>>", "hkFreestd::vectorArrayElementHknpShapeInstance" },
			{ "hkArray<hclObjectSpaceDeformer::FourBlendEntryBlock, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::FourBlendEntryBlock>" },
			{ "T*<hclOperator>", "hclOperator" },
			{ "T*<hkaiIndex<hkUint16>>", "uint16_t" },
			{ "T*<hkaiCollisionAvoidance::LineSegmentObstacle>", "hkaiCollisionAvoidance::LineSegmentObstacle" },
			{ "hkRefPtr<hkaiNavVolumePathRequest>", "hkaiNavVolumePathRequest" },
			{ "T*<hkRefPtr<hkMemoryResourceContainer>>", "hkMemoryResourceContainer" },
			{ "hknpGroupCollisionFilterTypes::Config<5, 5, 5, 16>", "hknpGroupCollisionFilterTypes::Config" },
			{ "hknpGroupCollisionFilterBase<hknpGroupCollisionFilterTypes::Config<5, 5, 5, 16>>", "hknpGroupCollisionFilterBase" },
			{ "T*<hkbStateMachine::ActiveTransitionInfo>", "hkbStateMachine::ActiveTransitionInfo" },
			{ "hkArray<hctAttributeDescription::Enum::Item, hkContainerHeapAllocator>", "std::vector<hctAttributeDescription::Enum::Item>" },
			{ "hkArray<hkcdSimdTree::Dynamic::NodeData, hkContainerHeapAllocator>", "std::vector<hkcdSimdTree::Dynamic::NodeData>" },
			{ "T*<hkaiAabbOverlapManager::Node>", "hkaiAabbOverlapManager::Node" },
			{ "hkArray<hclSimpleMeshBoneDeformOperator::TriangleBonePair, hkContainerHeapAllocator>", "std::vector<hclSimpleMeshBoneDeformOperator::TriangleBonePair>" },
			{ "T*<hkaiCollisionAvoidance::ReferencedScoreModifier>", "hkaiCollisionAvoidance::ReferencedScoreModifier" },
			{ "T*<hkMonitorStreamColorTable::ColorPair>", "hkMonitorStreamColorTable::ColorPair" },
			{ "T*<hkViewPtr<hkaiCollisionAvoidance::Character>>", "hkaiCollisionAvoidance::Character" },
			{ "T*<hkaiCollisionAvoidance::System>", "hkaiCollisionAvoidance::System" },
			{ "T*<hkRefPtr<hkaiCollisionAvoidance::ReferencedScoreModifier>>", "hkaiCollisionAvoidance::ReferencedScoreModifier" },
			{ "hkArray<hkRefPtr<hkGeometry>, hkContainerHeapAllocator>", "std::vector<hkGeometry>" },
			{ "T*<hkaiCollisionAvoidance::NeighborCollector>", "hkaiCollisionAvoidance::NeighborCollector" },
			{ "hkRefPtr<hclNamedSetupMesh>", "hclNamedSetupMesh" },
			{ "hkRefPtr<hknpHeightFieldGeometry>", "hknpHeightFieldGeometry" },
			{ "T*<hkaiPathFollowingProperties>", "hkaiPathFollowingProperties" },
			{ "T*<fsnpCustomMeshParameter>", "fsnpCustomMeshParameter" },
			{ "T*<hkFreestd::vectorArrayElement<hknpMotionProperties>>", "hkFreestd::vectorArrayElementHknpMotionProperties" },
			{ "T*<hkHandle<short, 32767>>", "hkHandle<short>" },
			{ "T*<hknpStorageParticleSystem>", "hknpStorageParticleSystem" },
			{ "hkArray<hkcdDynamicTree::CodecRawUlong, hkContainerHeapAllocator>", "std::vector<hkcdDynamicTree::CodecRawUlong>" },
			{ "T*<hkaiVolumePathfindingUtil::FindPathInput>", "hkaiVolumePathfindingUtil::FindPathInput" },
			{ "T*<hknpMotion>", "hknpMotion" },
			{ "T*<hknpVehicleSuspension::SuspensionWheelParameters>", "hknpVehicleSuspension::SuspensionWheelParameters" },
			{ "T*<hknpVehicleDefaultSuspension::WheelSpringSuspensionParameters>", "hknpVehicleDefaultSuspension::WheelSpringSuspensionParameters" },
			{ "T*<hknpVehicleDefaultBrake::WheelBrakingProperties>", "hknpVehicleDefaultBrake::WheelBrakingProperties" },
			{ "T*<hknpMotionProperties>", "hknpMotionProperties" },
			{ "T*<hknpBodyIntegrator>", "hknpBodyIntegrator" },
			{ "T*<hknpParticleCacheMoveInfo>", "hknpParticleCacheMoveInfo" },
			{ "T*<hkcdDynamicTree::Codec32>", "hkcdDynamicTree::Codec32" },
			{ "T*<hknpRefMaterial>", "hknpRefMaterial" },
			{ "T*<hkbAuxiliaryNodeInfo>", "hkbAuxiliaryNodeInfo" },
			{ "hkRefPtr<hknpPhysicsSystemData>", "hknpPhysicsSystemData" },
			{ "T*<hknpRefDragProperties>", "hknpRefDragProperties" },
			{ "T*<hknpShapeInstanceId>", "hknpShapeInstanceId" },
			{ "T*<hclSimClothData>", "hclSimClothData" },
			{ "hkArray<hkbHandIkDriverInfo::Hand, hkContainerHeapAllocator>", "std::vector<hkbHandIkDriverInfo::Hand>" },
			{ "T*<hknpConvexPolytopeShape::Connectivity>", "hknpConvexPolytopeShape::Connectivity" },
			{ "hkArray<hkbEventSequencedData::SequencedEvent, hkContainerHeapAllocator>", "std::vector<hkbEventSequencedData::SequencedEvent>" },
			{ "hkArray<T*<hctClothSetupObjectData>, hkContainerHeapAllocator>", "std::vector<hctClothSetupObjectData>" },
			{ "T*<hknpVehicleAerodynamics>", "hknpVehicleAerodynamics" },
			{ "T*<hkbVariableBindingSet>", "hkbVariableBindingSet" },
			{ "T*<hkaiCarver>", "hkaiCarver" },
			{ "hkRefPtr<hkbGenerator>", "hkbGenerator" },
			{ "T*<hkaiNavMeshClearanceCacheManager::Registration>", "hkaiNavMeshClearanceCacheManager::Registration" },
			{ "hkArray<T*<hkbRealVariableSequencedData>, hkContainerHeapAllocator>", "std::vector<hkbRealVariableSequencedData>" },
			{ "T*<hknpVehicleDriverInput>", "hknpVehicleDriverInput" },
			{ "T*<hknpExternMeshShapeGeometry>", "hknpExternMeshShapeGeometry" },
			{ "T*<hkDefaultCompoundMeshShape::MeshSection>", "hkDefaultCompoundMeshShape::MeshSection" },
			{ "hkRefPtr<hkxLight>", "hkxLight" },
			{ "T*<hkbNodeInternalStateInfo>", "hkbNodeInternalStateInfo" },
			{ "T*<hknpCompoundShape>", "hknpCompoundShape" },
			{ "T*<hknpShapeKeyMask>", "hknpShapeKeyMask" },
			{ "T*<hkxTextureFile>", "hkxTextureFile" },
			{ "hkArray<hkaiStreamingSet::NavMeshConnection, hkContainerHeapAllocator>", "std::vector<hkaiStreamingSet::NavMeshConnection>" },
			{ "T*<hkxTextureInplace>", "hkxTextureInplace" },
			{ "T*<hkxCamera>", "hkxCamera" },
			{ "hkRefPtr<hkaiCharacter>", "hkaiCharacter" },
			{ "T*<hkxIndexBuffer>", "hkxIndexBuffer" },
			{ "T*<hkxMaterialShader>", "hkxMaterialShader" },
			{ "T*<hkcdCompressedAabbCodecs::Aabb4BytesCodec>", "hkcdCompressedAabbCodecs::Aabb4BytesCodec" },
			{ "T*<hkRefPtr<hkxTextureFile>>", "hkxTextureFile" },
			{ "T*<hkRefPtr<hkxMesh>>", "hkxMesh" },
			{ "T*<hkRefPtr<hclNamedTransformSetSetupObject>>", "hclNamedTransformSetSetupObject" },
			{ "T*<hkcdStaticMeshTree::Primitive>", "hkcdStaticMeshTree::Primitive" },
			{ "T*<hkRefPtr<hkxCamera>>", "hkxCamera" },
			{ "hkHalf16Be", "float" },
			{ "T*<hkxBlendShapeCollectionChannel::KeyFrame>", "hkxBlendShapeCollectionChannel::KeyFrame" },
			{ "T*<hkxBlendShapeCollectionChannel::FloatCurveKey>", "hkxBlendShapeCollectionChannel::FloatCurveKey" },
			{ "T*<hkxBlendShapeCollectionChannel::BlendShape>", "hkxBlendShapeCollectionChannel::BlendShape" },
			{ "T*<hkxMaterial::Property>", "hkxMaterial::Property" },
			{ "T*<hkRefPtr<hkxNode>>", "hkxNode" },
			{ "hkRefPtr<hkcdStaticAabbTree>", "hkcdStaticAabbTree" },
			{ "hkArray<hkaiAvoidanceSolver::BoundaryObstacle, hkContainerHeapAllocator>", "std::vector<hkaiAvoidanceSolver::BoundaryObstacle>" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkHandle<unsigned int, -1>, hkaiDynamicUserEdgeSetInfo>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<hkHandle<uint32_t>, hkaiDynamicUserEdgeSetInfo>>" },
			{ "T*<hkpParametricCurve>", "hkpParametricCurve" },
			{ "T*<hclBonePlanesSetupObject::PerParticleAngle>", "hclBonePlanesSetupObject::PerParticleAngle" },
			{ "T*<hkpWheelFrictionConstraintAtom::Axle>", "hkpWheelFrictionConstraintAtom::Axle" },
			{ "T*<hkpConstraintMotor>", "hkpConstraintMotor" },
			{ "T*<hkSkinnedMeshShape::Part>", "hkSkinnedMeshShape::Part" },
			{ "T*<hkSkinnedMeshShape::BoneSet>", "hkSkinnedMeshShape::BoneSet" },
			{ "T*<hkbBehaviorGraph>", "hkbBehaviorGraph" },
			{ "T*<hkMultipleVertexBuffer::VertexBufferInfo>", "hkMultipleVertexBuffer::VertexBufferInfo" },
			{ "T*<hkMemoryMeshVertexBuffer>", "hkMemoryMeshVertexBuffer" },
			{ "T*<T*<hkMeshBody>>", "hkMeshBody" },
			{ "T*<hkMeshVertexBuffer>", "hkMeshVertexBuffer" },
			{ "T*<hkMeshBoneIndexMapping>", "hkMeshBoneIndexMapping" },
			{ "T*<hkcdDynamicTree::CodecRawUint>", "hkcdDynamicTree::CodecRawUint" },
			{ "T*<hkcdStaticAabbTree::Impl>", "hkcdStaticAabbTree::Impl" },
			{ "T*<hkbAttachmentSetup>", "hkbAttachmentSetup" },
			{ "T*<hkcdDynamicAabbTree::Impl>", "hkcdDynamicAabbTree::Impl" },
			{ "T*<hkcdDynamicTree::CodecRaw<unsigned int>>", "hkcdDynamicTree::CodecRaw<uint32_t>" },
			{ "T*<hkaiOverlapManager>", "hkaiOverlapManager" },
			{ "T*<hkcdDynamicTree::CodecRaw<unsigned long long>>", "hkcdDynamicTree::CodecRaw<uint64_t>" },
			{ "T*<hkcdCompressedAabbCodecs::Aabb6BytesCodec>", "hkcdCompressedAabbCodecs::Aabb6BytesCodec" },
			{ "T*<hkcdPlanarGeometryPlanesCollection>", "hkcdPlanarGeometryPlanesCollection" },
			{ "T*<hkcdStaticMeshTree::Section>", "hkcdStaticMeshTree::Section" },
			{ "hkArray<hclStretchLinkConstraintSetMx::Single, hkContainerHeapAllocator>", "std::vector<hclStretchLinkConstraintSetMx::Single>" },
			{ "T*<hkHandle<hkUint32, -1>>", "hkHandle<uint32_t>" },
			{ "hkRefPtr<hknpHeightFieldBoundingVolume>", "hknpHeightFieldBoundingVolume" },
			{ "T*<hkcdSimdTree::Dynamic::NodeData>", "hkcdSimdTree::Dynamic::NodeData" },
			{ "T*<hkcdSimdTree::Node>", "hkcdSimdTree::Node" },
			{ "T*<hkcdPlanarEntity::PlanesCollection>", "hkcdPlanarEntity::PlanesCollection" },
			{ "T*<hkcdPlanarSolid>", "hkcdPlanarSolid" },
			{ "T*<hkReflect::RecordType>", "IHavokObject" },
			{ "hkArray<hkRefPtr<hkaMeshBinding>, hkContainerHeapAllocator>", "std::vector<hkaMeshBinding>" },
			{ "T*<hkReflect::VoidType>", "IHavokObject" },
			{ "T*<hkReflect::FloatType>", "IHavokObject" },
			{ "T*<hkReflect::PointerType>", "IHavokObject" },
			{ "hkArray<hkRefPtr<hkaiVolumeNavigator>, hkContainerHeapAllocator>", "std::vector<hkaiVolumeNavigator>" },
			{ "T*<hkaiGatePath::PathGate>", "hkaiGatePath::PathGate" },
			{ "T*<hkIntRealPair>", "hkIntRealPair" },
			{ "hkRefPtr<hkxCamera>", "hkxCamera" },
			{ "T*<hkRefCountedProperties::Entry>", "hkRefCountedProperties::Entry" },
			{ "T*<hkPropertyDesc>", "hkPropertyDesc" },
			{ "T*<hkAsyncThreadPool::ThreadPriority>", "hkAsyncThreadPool::ThreadPriority" },
			{ "T*<hkRootLevelContainer::NamedVariant>", "hkRootLevelContainer::NamedVariant" },
			{ "T*<hkRefPtr<hkMemoryResourceHandle>>", "hkMemoryResourceHandle" },
			{ "T*<hclObjectSpaceDeformer::EightBlendEntryBlock>", "hclObjectSpaceDeformer::EightBlendEntryBlock" },
			{ "T*<hctFilterConfigurationSet::Configuration>", "hctFilterConfigurationSet::Configuration" },
			{ "T*<T*<hctClothSetupClothData20141Options>>", "hctClothSetupClothData20141Options" },
			{ "T*<hctAttributeGroupDescription>", "hctAttributeGroupDescription" },
			{ "T*<hctAttributeDescription>", "hctAttributeDescription" },
			{ "T*<hctAttributeDescription::Enum::Item>", "hctAttributeDescription::Enum::Item" },
			{ "T*<hctAttributeDescription::Enum>", "hctAttributeDescription::Enum" },
			{ "T*<hkcdStaticAabbTree>", "hkcdStaticAabbTree" },
			{ "T*<hkLocalFrameGroup>", "hkLocalFrameGroup" },
			{ "hkRefPtr<hkMeshMaterial>", "hkMeshMaterial" },
			{ "T*<hkMemoryResourceContainer>", "hkMemoryResourceContainer" },
			{ "T*<hkaiStreamingSet::GraphConnection>", "hkaiStreamingSet::GraphConnection" },
			{ "T*<hclSimClothData::CollidablePinchingData>", "hclSimClothData::CollidablePinchingData" },
			{ "T*<hkTransformf>", "hkMatrix4Holder" },
			{ "T*<hkbAssetBundleStringData>", "hkbAssetBundleStringData" },
			{ "T*<hkaMeshBinding>", "hkaMeshBinding" },
			{ "T*<hkaSkeletonMapperData::ChainMapping>", "hkaSkeletonMapperData::ChainMapping" },
			{ "T*<T*<hclTransformSetSetupObject>>", "hclTransformSetSetupObject" },
			{ "T*<hkaAnimatedReferenceFrame>", "hkaAnimatedReferenceFrame" },
			{ "T*<hclStorageSetupMesh::VertexChannel>", "hclStorageSetupMesh::VertexChannel" },
			{ "T*<hclNamedSetupMesh>", "hclNamedSetupMesh" },
			{ "T*<hclClothSetupObject>", "hclClothSetupObject" },
			{ "T*<hclStorageSetupMesh::TriangleChannel>", "hclStorageSetupMesh::TriangleChannel" },
			{ "T&<hkTransformf>", "hkMatrix4Holder" },
			{ "T*<hclBonePlanesSetupObject::GlobalPlane>", "hclBonePlanesSetupObject::GlobalPlane" },
			{ "hkRefPtr<hkaiNavigatorStalenessChecker>", "hkaiNavigatorStalenessChecker" },
			{ "T*<hclBonePlanesSetupObject::PerParticlePlane>", "hclBonePlanesSetupObject::PerParticlePlane" },
			{ "hkArray<hctAttributeGroupDescription, hkContainerHeapAllocator>", "std::vector<hctAttributeGroupDescription>" },
			{ "T*<T*<hclBufferSetupObject>>", "hclBufferSetupObject" },
			{ "T*<hclStorageSetupMeshSection::BoneInfluences>", "hclStorageSetupMeshSection::BoneInfluences" },
			{ "hkArray<hkbKeyframeBonesModifier::KeyframeInfo, hkContainerHeapAllocator>", "std::vector<hkbKeyframeBonesModifier::KeyframeInfo>" },
			{ "T*<hclStorageSetupMeshSection::SectionEdgeSelectionChannel>", "hclStorageSetupMeshSection::SectionEdgeSelectionChannel" },
			{ "T*<hkVariableTweakingHelper::IntVariableInfo>", "hkVariableTweakingHelper::IntVariableInfo" },
			{ "T*<hclStorageSetupMeshSection::SectionVertexChannel>", "hclStorageSetupMeshSection::SectionVertexChannel" },
			{ "hkArray<hkaiAabbOverlapManager::Node, hkContainerHeapAllocator>", "std::vector<hkaiAabbOverlapManager::Node>" },
			{ "T*<hclSceneDataSetupMeshSection>", "hclSceneDataSetupMeshSection" },
			{ "T*<hclConstraintSetSetupObject>", "hclConstraintSetSetupObject" },
			{ "T*<hclClothStateSetupObject>", "hclClothStateSetupObject" },
			{ "hkStringBuf", "std::string" },
			{ "T*<hkxMeshSection>", "hkxMeshSection" },
			{ "T*<hclStateDependencyGraph::Branch>", "hclStateDependencyGraph::Branch" },
			{ "T*<hclSimClothData::ParticleData>", "hclSimClothData::ParticleData" },
			{ "T*<hclVirtualCollisionPointsData::TriangleFanLandscape>", "hclVirtualCollisionPointsData::TriangleFanLandscape" },
			{ "T*<hclVirtualCollisionPointsData::EdgeFan>", "hclVirtualCollisionPointsData::EdgeFan" },
			{ "hkArray<hkRefPtr<hkaiNavVolumePathRequest>, hkContainerHeapAllocator>", "std::vector<hkaiNavVolumePathRequest>" },
			{ "T*<hkaiEdgeFollowingBehavior>", "hkaiEdgeFollowingBehavior" },
			{ "T*<hclVirtualCollisionPointsData::EdgeFanSection>", "hclVirtualCollisionPointsData::EdgeFanSection" },
			{ "hkArray<hknpPhysicsSystemData::bodyCinfoWithAttachment, hkContainerHeapAllocator>", "std::vector<hknpPhysicsSystemData::bodyCinfoWithAttachment>" },
			{ "T*<T*<hkbModifier>>", "hkbModifier" },
			{ "T*<hclSimulateOperator::Config>", "hclSimulateOperator::Config" },
			{ "T*<hclObjectSpaceDeformer::LocalBlockUnpackedPNTB>", "hclObjectSpaceDeformer::LocalBlockUnpackedPNTB" },
			{ "hkArray<hkaiNavMeshPathRequestInfo, hkContainerHeapAllocator>", "std::vector<hkaiNavMeshPathRequestInfo>" },
			{ "T*<hclMeshMeshDeformOperator::TriangleVertexPair>", "hclMeshMeshDeformOperator::TriangleVertexPair" },
			{ "T*<hclSimpleMeshBoneDeformOperator::TriangleBonePair>", "hclSimpleMeshBoneDeformOperator::TriangleBonePair" },
			{ "hkRefPtr<hkxVertexAnimation>", "hkxVertexAnimation" },
			{ "T*<hclObjectSpaceDeformer::FourBlendEntryBlock>", "hclObjectSpaceDeformer::FourBlendEntryBlock" },
			{ "hkRefPtr<hkbCharacterSetup>", "hkbCharacterSetup" },
			{ "T*<hclBoneSpaceDeformer::FourBlendEntryBlock>", "hclBoneSpaceDeformer::FourBlendEntryBlock" },
			{ "hkRefPtr<hkaiCollisionAvoidance::ObstacleGenerator>", "hkaiCollisionAvoidance::ObstacleGenerator" },
			{ "T*<hclBoneSpaceDeformer::LocalBlockUnpackedPNTB>", "hclBoneSpaceDeformer::LocalBlockUnpackedPNTB" },
			{ "T*<hclBoneSpaceDeformer::LocalBlockPNTB>", "hclBoneSpaceDeformer::LocalBlockPNTB" },
			{ "hkArray<hkRefPtr<hkaiCollisionAvoidance::Character>, hkContainerHeapAllocator>", "std::vector<hkaiCollisionAvoidance::Character>" },
			{ "hkTransformf", "hkMatrix4Holder" },
			{ "T*<hkRefPtr<hclClothData>>", "hclClothData" },
			{ "T*<hkRefPtr<hclCollidable>>", "hclCollidable" },
			{ "T*<hclVolumeConstraintMx::ApplySingleData>", "hclVolumeConstraintMx::ApplySingleData" },
			{ "T*<hclVolumeConstraintMx::FrameBatchData>", "hclVolumeConstraintMx::FrameBatchData" },
			{ "T*<hclVolumeConstraint::ApplyData>", "hclVolumeConstraint::ApplyData" },
			{ "hkArray<hclVirtualCollisionPointsData::EdgeFan, hkContainerHeapAllocator>", "std::vector<hclVirtualCollisionPointsData::EdgeFan>" },
			{ "T*<hclStretchLinkConstraintSetMx::Batch>", "hclStretchLinkConstraintSetMx::Batch" },
			{ "hkArray<hkaiOverlapManager::Section, hkContainerHeapAllocator>", "std::vector<hkaiOverlapManager::Section>" },
			{ "T*<hclStretchLinkConstraintSet::Link>", "hclStretchLinkConstraintSet::Link" },
			{ "T*<hclStandardLinkConstraintSetMx::Single>", "hclStandardLinkConstraintSetMx::Single" },
			{ "T*<hclStandardLinkConstraintSetMx::Batch>", "hclStandardLinkConstraintSetMx::Batch" },
			{ "hkArray<hkaSkeletonMapperData::SimpleMapping, hkContainerHeapAllocator>", "std::vector<hkaSkeletonMapperData::SimpleMapping>" },
			{ "T*<hclStandardLinkConstraintSet::Link>", "hclStandardLinkConstraintSet::Link" },
			{ "hkArray<hclStretchLinkConstraintSetMx::Batch, hkContainerHeapAllocator>", "std::vector<hclStretchLinkConstraintSetMx::Batch>" },
			{ "T*<hclCompressibleLinkConstraintSetMx::Single>", "hclCompressibleLinkConstraintSetMx::Single" },
			{ "T*<hclCompressibleLinkConstraintSet::Link>", "hclCompressibleLinkConstraintSet::Link" },
			{ "T*<hclBonePlanesConstraintSet::BonePlane>", "hclBonePlanesConstraintSet::BonePlane" },
			{ "T*<hclBendStiffnessConstraintSetMx::Batch>", "hclBendStiffnessConstraintSetMx::Batch" },
			{ "hkArray<hkHandle<hkUint32, 2147483647>, hkContainerHeapAllocator>", "std::vector<hkHandle<uint32_t>>" },
			{ "T*<hclBendStiffnessConstraintSet::Link>", "hclBendStiffnessConstraintSet::Link" },
			{ "hkArray<hknpConvexPolytopeShape::Connectivity::Edge, hkContainerHeapAllocator>", "std::vector<hknpConvexPolytopeShape::Connectivity::Edge>" },
			{ "T*<hclBendLinkConstraintSetMx::Batch>", "hclBendLinkConstraintSetMx::Batch" },
			{ "T*<hkaiCopyOnWritePtr<hkaiNavMeshClearanceCache, hkaiCopyOnWriteDefaultTraits<hkaiNavMeshClearanceCache>>>", "hkaiCopyOnWritePtr<hkaiNavMeshClearanceCache>" },
			{ "T*<hclBendLinkConstraintSet::Link>", "hclBendLinkConstraintSet::Link" },
			{ "hkArray<hclClothState::BufferAccess, hkContainerHeapAllocator>", "std::vector<hclClothState::BufferAccess>" },
			{ "T*<T*<hclAction>>", "hclAction" },
			{ "T*<hkBool>", "bool" },
			{ "T*<hkbLayerGenerator::LayerInternalState>", "hkbLayerGenerator::LayerInternalState" },
			{ "T*<T*<hclClothState>>", "hclClothState" },
			{ "T*<hkaiEdgeGeometry::Face>", "hkaiEdgeGeometry::Face" },
			{ "T*<T*<hclOperator>>", "hclOperator" },
			{ "T*<T*<hclSimClothData>>", "hclSimClothData" },
			{ "T*<hclCollidable>", "hclCollidable" },
			{ "T*<signed char>", "int8_t" },
			{ "T*<hkbBehaviorGraphInternalState>", "hkbBehaviorGraphInternalState" },
			{ "T*<hkRefPtr<hkbAuxiliaryNodeInfo>>", "hkbAuxiliaryNodeInfo" },
			{ "hkRefPtr<hkbNodeInternalStateInfo>", "hkbNodeInternalStateInfo" },
			{ "T*<hkUint64>", "uint64_t" },
			{ "hkArray<hkbRealVariableSequencedData::Sample, hkContainerHeapAllocator>", "std::vector<hkbRealVariableSequencedData::Sample>" },
			{ "hkRefPtr<hkaiEdgeFollowingBehavior>", "hkaiEdgeFollowingBehavior" },
			{ "hkArray<hkMatrix4, hkContainerHeapAllocator>", "std::vector<hkMatrix4Holder>" },
			{ "hkRefPtr<hknpMotionPropertiesLibrary>", "hknpMotionPropertiesLibrary" },
			{ "T*<hkbRadialSelectorGenerator::GeneratorPair>", "hkbRadialSelectorGenerator::GeneratorPair" },
			{ "T*<T*<hkbCustomIdSelector>>", "hkbCustomIdSelector" },
			{ "hkArray<hkxSpline::ControlPoint, hkContainerHeapAllocator>", "std::vector<hkxSpline::ControlPoint>" },
			{ "T*<hkRefPtr<hkbModifier>>", "hkbModifier" },
			{ "T*<hkUint16>", "uint16_t" },
			{ "T*<hkInt8>", "int8_t" },
			{ "T*<hkbBodyIkControlPin>", "hkbBodyIkControlPin" },
			{ "T*<hkbBodyIkControllerProfile>", "hkbBodyIkControllerProfile" },
			{ "T*<hkbNode>", "hkbNode" },
			{ "T*<short>", "short" },
			{ "T*<hkbVariableValue>", "hkbVariableValue" },
			{ "T*<hkbStateMachine::DelayedTransitionInfo>", "hkbStateMachine::DelayedTransitionInfo" },
			{ "T*<hkbCondition>", "hkbCondition" },
			{ "hkArray<hkbVariableBindingSet::Binding, hkContainerHeapAllocator>", "std::vector<hkbVariableBindingSet::Binding>" },
			{ "hkRefPtr<hkbBoneIndexArray>", "hkbBoneIndexArray" },
			{ "T*<hkaiUserEdgeUtils::UserEdgeSetup>", "hkaiUserEdgeUtils::UserEdgeSetup" },
			{ "T*<hkbEventSequencedData::SequencedEvent>", "hkbEventSequencedData::SequencedEvent" },
			{ "T*<hkbProjectStringData>", "hkbProjectStringData" },
			{ "T*<hkbSenseHandleModifier::Range>", "hkbSenseHandleModifier::Range" },
			{ "T*<hkbFootIkModifier::InternalLegData>", "hkbFootIkModifier::InternalLegData" },
			{ "T*<hkbFootIkControlsModifier::Leg>", "hkbFootIkControlsModifier::Leg" },
			{ "T*<hkbEventRangeDataArray>", "hkbEventRangeDataArray" },
			{ "hkRefPtr<hkaiWorld>", "hkaiWorld" },
			{ "T*<hkbEvaluateExpressionModifier::InternalExpressionData>", "hkbEvaluateExpressionModifier::InternalExpressionData" },
			{ "T*<hkbExpressionDataArray>", "hkbExpressionDataArray" },
			{ "T*<hkbAttributeModifier::Assignment>", "hkbAttributeModifier::Assignment" },
			{ "T*<T*<hkbGenerator>>", "hkbGenerator" },
			{ "T*<hkbClipGenerator::Echo>", "hkbClipGenerator::Echo" },
			{ "T*<hkbClipTriggerArray>", "hkbClipTriggerArray" },
			{ "hkRefPtr<hkaiSilhouetteGenerator>", "hkaiSilhouetteGenerator" },
			{ "T*<T*<hkbBlenderGeneratorChild>>", "hkbBlenderGeneratorChild" },
			{ "hkArray<hknpConstraintCinfo, hkContainerHeapAllocator>", "std::vector<hknpConstraintCinfo>" },
			{ "T*<T*<hkbLayer>>", "hkbLayer" },
			{ "T*<hkbHandIkDriverInfo::Hand>", "hkbHandIkDriverInfo::Hand" },
			{ "T*<hkbCharacterData>", "hkbCharacterData" },
			{ "T*<hkRefPtr<hkbCustomPropertySheet>>", "hkbCustomPropertySheet" },
			{ "T*<hkMatrix4>", "hkMatrix4Holder" },
			{ "T*<hkArray<int, hkContainerHeapAllocator>>", "std::vector<int>" },
			{ "T*<hkbProjectData>", "hkbProjectData" },
			{ "T*<hkbCharacterSetup>", "hkbCharacterSetup" },
			{ "T*<hkInt16>", "short" },
			{ "T*<hkReferencedObject>", "hkReferencedObject" },
			{ "T*<hkaiVolume>", "hkaiVolume" },
			{ "char[N]<2>", "std::string" },
			{ "T*<hkbBoolVariableSequencedData>", "hkbBoolVariableSequencedData" },
			{ "T*<hkLocalFrame>", "hkLocalFrame" },
			{ "T*<hkbStateMachine::TransitionInfoArray>", "hkbStateMachine::TransitionInfoArray" },
			{ "T*<hkbGeneratorOutputstd::vectorener>", "hkbGeneratorOutputstd::vectorener" },
			{ "T*<hkaiIndex<int>>", "int" },
			{ "T*<hkHashMapDetail::MapTuple<int, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>>", "hkHashMapDetail::MapTuple<int, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>" },
			{ "T*<hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::Section>>", "hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::Section>" },
			{ "T*<hkHashMapDetail::MapTuple<int, int>>", "hkHashMapDetail::MapTuple<int, int>" },
			{ "T*<hkHashMapDetail::MapTuple<hkHandle<unsigned int, -1>, hkaiDynamicUserEdgeSetInfo>>", "hkHashMapDetail::MapTuple<hkHandle<uint32_t>, hkaiDynamicUserEdgeSetInfo>" },
			{ "T*<hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::FaceInfo>>", "hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::FaceInfo>" },
			{ "T*<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiDefaultDynamicUserEdgeSetInfo::Section>>", "hkHashMapDetail::MapTuple<int, hkaiDefaultDynamicUserEdgeSetInfo::Section>" },
			{ "T*<hkaiNavMeshGenerationUtilsSettings::MaterialConstructionPair>", "hkaiNavMeshGenerationUtilsSettings::MaterialConstructionPair" },
			{ "T*<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkRefPtr<hkaiDynamicUserEdgeSetInfo::ExternalEdges>>>", "hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::ExternalEdges>" },
			{ "T*<hkHashMapDetail::MapTuple<hkaiDynamicUserEdgeSetInfoBase::ClusterGraphEdge, int>>", "hkHashMapDetail::MapTuple<hkaiDynamicUserEdgeSetInfoBase::ClusterGraphEdge, int>" },
			{ "T*<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkRefPtr<hkaiStreamingSet>>>", "hkHashMapDetail::MapTuple<int, hkaiStreamingSet>" },
			{ "T*<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, int>>", "hkHashMapDetail::MapTuple<int, int>" },
			{ "hkArray<hkbBlenderGenerator::ChildInternalState, hkContainerHeapAllocator>", "std::vector<hkbBlenderGenerator::ChildInternalState>" },
			{ "T*<hkHashMapDetail::MapTuple<hkHandle<hkUint32, -1>, hkaiDynamicUserEdgeSetInfo>>", "hkHashMapDetail::MapTuple<hkHandle<uint32_t>, hkaiDynamicUserEdgeSetInfo>" },
			{ "T*<hkaiReferenceFrame>", "hkaiReferenceFrame" },
			{ "T*<T*<hkaiStreamingSet>>", "hkaiStreamingSet" },
			{ "T*<hkaiStreamingSetInstance>", "hkaiStreamingSetInstance" },
			{ "hkRefPtr<hkbProjectData>", "hkbProjectData" },
			{ "T*<hkaiNavVolumeInstanceData>", "hkaiNavVolumeInstanceData" },
			{ "hkArray<hclSetupMeshSection::Triangle, hkContainerHeapAllocator>", "std::vector<hclSetupMeshSection::Triangle>" },
			{ "T*<hkcdDynamicAabbTree>", "hkcdDynamicAabbTree" },
			{ "T*<hkaiDirectedGraphInstanceData>", "hkaiDirectedGraphInstanceData" },
			{ "T*<hkVector2f>", "hkVector2f" },
			{ "T*<hkaiDynamicUserEdgeSetInfo::ExternalEdges>", "hkaiDynamicUserEdgeSetInfo::ExternalEdges" },
			{ "T*<hkaiNavMeshCutConfiguration::DynamicUserEdge>", "hkaiNavMeshCutConfiguration::DynamicUserEdge" },
			{ "T*<hkaiNavVolumePathRequestInfo>", "hkaiNavVolumePathRequestInfo" },
			{ "T*<hkaiPathRequestQueue>", "hkaiPathRequestQueue" },
			{ "T*<hkaiVolumePathfindingUtil::FindPathOutput>", "hkaiVolumePathfindingUtil::FindPathOutput" },
			{ "T*<hkaiNavMeshInstanceCutter>", "hkaiNavMeshInstanceCutter" },
			{ "T*<hkRefPtr<hkaiObstacleGenerator>>", "hkaiObstacleGenerator" },
			{ "T*<hkRefPtr<hkaiPathRequestQueue>>", "hkaiPathRequestQueue" },
			{ "T*<hkRefPtr<hkaiNavMeshPathRequest>>", "hkaiNavMeshPathRequest" },
			{ "T*<hkaiPathfindingUtil::FindPathOutput>", "hkaiPathfindingUtil::FindPathOutput" },
			{ "T*<hkaiPathfindingUtil::FindPathInput>", "hkaiPathfindingUtil::FindPathInput" },
			{ "hkArray<hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::BigFaceInfo>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::BigFaceInfo>>" },
			{ "T*<hkaiSearchExpansionRecord::hkaiSingleExpansionRecord>", "hkaiSearchExpansionRecord::hkaiSingleExpansionRecord" },
			{ "T*<hkReal>", "float" },
			{ "T*<hkViewPtr<hkaiVolumeNavigator>>", "hkaiVolumeNavigator" },
			{ "T*<hkaiVolumeNavigator::PathRequestInput>", "hkaiVolumeNavigator::PathRequestInput" },
			{ "T*<hkaiVolumeNavigator::NavigatorSettings>", "hkaiVolumeNavigator::NavigatorSettings" },
			{ "T*<hkaiVolumeNavigator::PathRequest>", "hkaiVolumeNavigator::PathRequest" },
			{ "T*<hkaiNavigator::Goal>", "hkaiNavigator::Goal" },
			{ "T*<hkaiNavVolume::Cell>", "hkaiNavVolume::Cell" },
			{ "T*<unsigned char>", "uint8_t" },
			{ "T*<hkaiNavMeshClearanceCacheSeeding::CacheDataSet>", "hkaiNavMeshClearanceCacheSeeding::CacheDataSet" },
			{ "T*<hkaiNavMesh::Face>", "hkaiNavMesh::Face" },
			{ "T*<hkaiStreamingSet::NavMeshConnection>", "hkaiStreamingSet::NavMeshConnection" },
			{ "T*<hkaiCopyOnWritePtr<hkaiStreamingSetInstance, hkaiCopyOnWriteDefaultTraits<hkaiStreamingSetInstance>>>", "hkaiCopyOnWritePtr<hkaiStreamingSetInstance>" },
			{ "T*<hkaiStreamingCollectionInstanceInfo>", "hkaiStreamingCollectionInstanceInfo" },
			{ "T*<hkaiNavMeshClearanceCache>", "hkaiNavMeshClearanceCache" },
			{ "T*<hkaiDirectedGraphExplicitCost>", "hkaiDirectedGraphExplicitCost" },
			{ "T*<hkUint32>", "uint32_t" },
			{ "T*<hkaiDirectedGraphExplicitCost::Node>", "hkaiDirectedGraphExplicitCost::Node" },
			{ "T*<hkaiOverlapManager::Generator>", "hkaiOverlapManager::Generator" },
			{ "T*<hkaiPath::PathPoint>", "hkaiPath::PathPoint" },
			{ "hkRefPtr<hknpConvexShape>", "hknpConvexShape" },
			{ "T*<hkaiAvoidancePairProperties::PairData>", "hkaiAvoidancePairProperties::PairData" },
			{ "T*<hkaiEdgePath::Edge>", "hkaiEdgePath::Edge" },
			{ "T*<hkaiCharacter>", "hkaiCharacter" },
			{ "T*<hkaiEdgePath>", "hkaiEdgePath" },
			{ "hkArray<hclVirtualCollisionPointsData::TriangleFan, hkContainerHeapAllocator>", "std::vector<hclVirtualCollisionPointsData::TriangleFan>" },
			{ "T*<hkaiStreamingSet>", "hkaiStreamingSet" },
			{ "T*<hkaiReferencedArray<int>>", "hkaiReferencedArray<int>" },
			{ "T*<hkaiReferencedArray<unsigned int>>", "hkaiReferencedArray<uint32_t>" },
			{ "T*<hkaiReferencedArray<hkaiIndex<hkInt32>>>", "hkaiReferencedArray<int>" },
			{ "T*<hkaiReferencedArray<hkaiUserEdgeUtils::UserEdgeSetup>>", "hkaiReferencedArray<hkaiUserEdgeUtils::UserEdgeSetup>" },
			{ "T*<hkaiDirectedGraphInstance>", "hkaiDirectedGraphInstance" },
			{ "T*<hkaiReferencedArray<T*<hkaiStreamingSet>>>", "hkaiReferencedArray<hkaiStreamingSet>" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkPropertyId, hkReflect::Any>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<hkPropertyId, object>>" },
			{ "hkArray<T*<hclStorageSetupMeshSection::BoneInfluences>, hkContainerHeapAllocator>", "std::vector<hclStorageSetupMeshSection::BoneInfluences>" },
			{ "T*<hknpShape>", "hknpShape" },
			{ "T*<int>", "int" },
			{ "hkRefPtr<hkxNode>", "hkxNode" },
			{ "T*<hkaiMaterialPainter>", "hkaiMaterialPainter" },
			{ "T*<hkaiNavMeshGenerationUtilsSettings::RegionPruningSettings::RegionConnection>", "hkaiNavMeshGenerationUtilsSettings::RegionPruningSettings::RegionConnection" },
			{ "hkArray<T*<hkbBlenderGeneratorChild>, hkContainerHeapAllocator>", "std::vector<hkbBlenderGeneratorChild>" },
			{ "T&<hkQuaternionf>", "Eigen::Quaternionf" },
			{ "T*<hkRefPtr<hkaiCarver>>", "hkaiCarver" },
			{ "T*<hkInt32>", "int" },
			{ "hkRefPtr<hknpRefMaterial>", "hknpRefMaterial" },
			{ "T*<hkRefPtr<hkGeometry>>", "hkGeometry" },
			{ "T*<hkGeometry>", "hkGeometry" },
			{ "T*<hkaiEdgeGeometry::Edge>", "hkaiEdgeGeometry::Edge" },
			{ "hkRefPtr<hkaiNavMeshClearanceCacheSeeding::CacheDataSet>", "hkaiNavMeshClearanceCacheSeeding::CacheDataSet" },
			{ "hkViewPtr<hkaiNavigator>", "hkaiNavigator" },
			{ "hkRefPtr<hkaiCollisionAvoidance::Filter>", "hkaiCollisionAvoidance::Filter" },
			{ "hkRefPtr<hkaiCollisionAvoidance::BoundaryGatherer>", "hkaiCollisionAvoidance::BoundaryGatherer" },
			{ "hkArray<char, hkContainerHeapAllocator>", "std::vector<uint8_t>" },
			{ "hkRefPtr<hknpBodyIntegrator>", "hknpBodyIntegrator" },
			{ "hkRefPtr<hknpBodyQualityLibrary>", "hknpBodyQualityLibrary" },
			{ "hkArray<hkRefPtr<hclNamedTransformSetSetupObject>, hkContainerHeapAllocator>", "std::vector<hclNamedTransformSetSetupObject>" },
			{ "hkRefPtr<hknpRefDragProperties>", "hknpRefDragProperties" },
			{ "hkArray<hclBendStiffnessConstraintSet::Link, hkContainerHeapAllocator>", "std::vector<hclBendStiffnessConstraintSet::Link>" },
			{ "hkRefPtr<hkxNodeSelectionSet>", "hkxNodeSelectionSet" },
			{ "hkRefPtr<hkxMesh::UserChannelInfo>", "hkxMesh::UserChannelInfo" },
			{ "hkRefPtr<hkxMeshSection>", "hkxMeshSection" },
			{ "hkRefPtr<hkxVertexBuffer>", "hkxVertexBuffer" },
			{ "hkRefPtr<hkMeshTexture>", "hkMeshTexture" },
			{ "hkRefPtr<hkLocalFrame>", "hkLocalFrame" },
			{ "hkArray<hkRefPtr<hkxSpline>, hkContainerHeapAllocator>", "std::vector<hkxSpline>" },
			{ "hkRefPtr<hkMemoryMeshVertexBuffer>", "hkMemoryMeshVertexBuffer" },
			{ "hkRefPtr<hkMeshVertexBuffer>", "hkMeshVertexBuffer" },
			{ "hkRefPtr<hkcdPlanarSolid::NodeStorage>", "hkcdPlanarSolid::NodeStorage" },
			{ "hkArray<hkRefCountedProperties::Entry, hkContainerHeapAllocator>", "std::vector<hkRefCountedProperties::Entry>" },
			{ "hkColorfAlpha", "hkVector4Holder" },
			{ "hkRefPtr<hkcdPlanarEntity::PlanesCollection>", "hkcdPlanarEntity::PlanesCollection" },
			{ "hkRefPtr<hkcdPlanarSolid>", "hkcdPlanarSolid" },
			{ "hkRefPtr<hkMemoryResourceHandle>", "hkMemoryResourceHandle" },
			{ "hkRefPtr<hkaFootstepAnalysisInfo>", "hkaFootstepAnalysisInfo" },
			{ "hkArray<hkInt8, hkContainerHeapAllocator>", "std::vector<int8_t>" },
			{ "hkRefPtr<hkaAnimatedReferenceFrame>", "hkaAnimatedReferenceFrame" },
			{ "hkRefPtr<hclClothSetupObject>", "hclClothSetupObject" },
			{ "hkRefPtr<hclSimClothBufferSetupObject>", "hclSimClothBufferSetupObject" },
			{ "hkRefPtr<hkbAuxiliaryNodeInfo>", "hkbAuxiliaryNodeInfo" },
			{ "hkRefPtr<hkbCustomPropertySheet>", "hkbCustomPropertySheet" },
			{ "hkRefPtr<hkbCondition>", "hkbCondition" },
			{ "hkRefPtr<hkbVariableBindingSet>", "hkbVariableBindingSet" },
			{ "hkArray<hclBoneSpaceDeformer::TwoBlendEntryBlock, hkContainerHeapAllocator>", "std::vector<hclBoneSpaceDeformer::TwoBlendEntryBlock>" },
			{ "hkRefPtr<hkbExpressionDataArray>", "hkbExpressionDataArray" },
			{ "hkRefPtr<hkbModifier>", "hkbModifier" },
			{ "hkRefPtr<hkbCustomIdSelector>", "hkbCustomIdSelector" },
			{ "hkRefPtr<hkbVariableValueSet>", "hkbVariableValueSet" },
			{ "hkRefPtr<hkbReferencedGeneratorSyncInfo>", "hkbReferencedGeneratorSyncInfo" },
			{ "hkRefPtr<hkbBehaviorGraphData>", "hkbBehaviorGraphData" },
			{ "hkRefPtr<hkaiDirectedGraphInstanceData>", "hkaiDirectedGraphInstanceData" },
			{ "hkRefPtr<hkaiObstacleGenerator>", "hkaiObstacleGenerator" },
			{ "hkRefPtr<hkaiNavMeshPathRequest>", "hkaiNavMeshPathRequest" },
			{ "hkArray<hkxNode::AnnotationData, hkContainerHeapAllocator>", "std::vector<hkxNode::AnnotationData>" },
			{ "hkRefPtr<hkaiNavMeshInstanceCutter>", "hkaiNavMeshInstanceCutter" },
			{ "hkRefPtr<hkaiOverlapManager>", "hkaiOverlapManager" },
			{ "hkRefPtr<hkaiNavMeshClearanceCacheManager>", "hkaiNavMeshClearanceCacheManager" },
			{ "hkRefPtr<hkaiNavigator::PathRequestInput>", "hkaiNavigator::PathRequestInput" },
			{ "hkRefPtr<hkaiNavigator::PathRequest>", "hkaiNavigator::PathRequest" },
			{ "hkRefPtr<hkaiNavVolumeInstance>", "hkaiNavVolumeInstance" },
			{ "hkRefPtr<hkaiDynamicNavVolumeMediator>", "hkaiDynamicNavVolumeMediator" },
			{ "hkArray<hkxAttribute, hkContainerHeapAllocator>", "std::vector<hkxAttribute>" },
			{ "hkRefPtr<hkaiConvexSilhouetteSet>", "hkaiConvexSilhouetteSet" },
			{ "char*", "std::string" },
			{ "hkRefPtr<hkaiNavMeshQueryMediator>", "hkaiNavMeshQueryMediator" },
			{ "hkRefPtr<hkaiAstarEdgeFilter>", "hkaiAstarEdgeFilter" },
			{ "hkRefPtr<hkaiPath>", "hkaiPath" },
			{ "hkRefPtr<hkaiPathFollowingProperties>", "hkaiPathFollowingProperties" },
			{ "hkRefPtr<hkReflect::Detail::Opaque>", "IHavokObject" },
			{ "hkRefPtr<hkaiMaterialPainter>", "hkaiMaterialPainter" },
			{ "hkRefPtr<hkaiCarver>", "hkaiCarver" },
			{ "hkReflect::QualifiedType<hkReflect::ArrayType>", "IHavokObject" },
			{ "hkReflect::QualifiedType<hkReflect::OpaqueType>", "IHavokObject" },
			{ "hkRefVariant", "hkReferencedObject*" },
			{ "hkArray<hkaiMinArrayEntry<hkViewPtr<hkaiCollisionAvoidance::Character>>, hkContainerHeapAllocator>", "std::vector<hkaiMinArrayEntry<hkaiCollisionAvoidance::Character>>" },
			{ "hkArray<hkaiCollisionAvoidance::LineSegmentObstacle, hkContainerHeapAllocator>", "std::vector<hkaiCollisionAvoidance::LineSegmentObstacle>" },
			{ "hkArray<hkaiVolumeNavigator::Goal, hkContainerHeapAllocator>", "std::vector<hkaiVolumeNavigator::Goal>" },
			{ "hkArray<hkRefPtr<hkaiCollisionAvoidance::ReferencedScoreModifier>, hkContainerHeapAllocator>", "std::vector<hkaiCollisionAvoidance::ReferencedScoreModifier>" },
			{ "hkArray<hkFreestd::vectorArrayElement<hknpMotionProperties>, hkContainerHeapAllocator>", "std::vector<hkFreestd::vectorArrayElementHknpMotionProperties>" },
			{ "hkArray<hkHandle<short, 32767>, hkContainerHeapAllocator>", "std::vector<hkHandle<short>>" },
			{ "hkArray<hknpParticle4Faces, hkContainerHeapAllocator>", "std::vector<hknpParticle4Faces>" },
			{ "hkArray<hkScopedPtr<hknpParticleShapeProperties>, hkContainerHeapAllocator>", "std::vector<hknpParticleShapeProperties>" },
			{ "hkArray<hclBoneSpaceDeformer::LocalBlockPNT, hkContainerHeapAllocator>", "std::vector<hclBoneSpaceDeformer::LocalBlockPNT>" },
			{ "hkArray<hknpMotion, hkContainerHeapAllocator>", "std::vector<hknpMotion>" },
			{ "hkArray<hkHandle<hkUint32, -1>, hkContainerHeapAllocator>", "std::vector<hkHandle<uint32_t>>" },
			{ "hkArray<hknpVehicleData::WheelComponentParams, hkContainerHeapAllocator>", "std::vector<hknpVehicleData::WheelComponentParams>" },
			{ "hkArray<hkcdStaticMeshTree::Primitive, hkContainerHeapAllocator>", "std::vector<hkcdStaticMeshTree::Primitive>" },
			{ "hkArray<hknpVehicleSuspension::SuspensionWheelParameters, hkContainerHeapAllocator>", "std::vector<hknpVehicleSuspension::SuspensionWheelParameters>" },
			{ "hkArray<hknpVehicleDefaultSuspension::WheelSpringSuspensionParameters, hkContainerHeapAllocator>", "std::vector<hknpVehicleDefaultSuspension::WheelSpringSuspensionParameters>" },
			{ "hkArray<hknp1dAngularFollowCamCinfo::CameraSet, hkContainerHeapAllocator>", "std::vector<hknp1dAngularFollowCamCinfo::CameraSet>" },
			{ "hkArray<hknpMaterial, hkContainerHeapAllocator>", "std::vector<hknpMaterial>" },
			{ "hkArray<hkxVertexAnimation::UsageMap, hkContainerHeapAllocator>", "std::vector<hkxVertexAnimation::UsageMap>" },
			{ "hkArray<hkRefPtr<hkxVertexAnimation>, hkContainerHeapAllocator>", "std::vector<hkxVertexAnimation>" },
			{ "hkArray<hkRefPtr<hkxMesh::UserChannelInfo>, hkContainerHeapAllocator>", "std::vector<hkxMesh::UserChannelInfo>" },
			{ "hkArray<hkxBlendShapeCollectionChannel::Channel, hkContainerHeapAllocator>", "std::vector<hkxBlendShapeCollectionChannel::Channel>" },
			{ "hkArray<hkxBlendShapeCollectionChannel::KeyFrame, hkContainerHeapAllocator>", "std::vector<hkxBlendShapeCollectionChannel::KeyFrame>" },
			{ "hkArray<hkRefPtr<hkxMaterial>, hkContainerHeapAllocator>", "std::vector<hkxMaterial>" },
			{ "hkArray<hkSkinnedMeshShape::BoneSet, hkContainerHeapAllocator>", "std::vector<hkSkinnedMeshShape::BoneSet>" },
			{ "hkArray<hkMemoryMeshShape::Section, hkContainerHeapAllocator>", "std::vector<hkMemoryMeshShape::Section>" },
			{ "hkRelArray<char>", "std::vector<uint8_t>" },
			{ "hkArray<T*<hkMeshVertexBuffer>, hkContainerHeapAllocator>", "std::vector<hkMeshVertexBuffer>" },
			{ "hkArray<hkColor::Argb, hkContainerHeapAllocator>", "std::vector<Color>" },
			{ "hkArray<T*<hkMeshBody>, hkContainerHeapAllocator>", "std::vector<hkMeshBody>" },
			{ "hkArray<hclBendStiffnessConstraintSetMx::Batch, hkContainerHeapAllocator>", "std::vector<hclBendStiffnessConstraintSetMx::Batch>" },
			{ "hkArray<T*<hkMeshShape>, hkContainerHeapAllocator>", "std::vector<hkMeshShape>" },
			{ "hkArray<hkTuple<unsigned int, unsigned int, void, void, void, void, void, void>, hkContainerHeapAllocator>", "std::vector<hkTuple2<uint32_t, uint32_t>>" },
			{ "hkArray<hkcdStaticMeshTree::Section, hkContainerHeapAllocator>", "std::vector<hkcdStaticMeshTree::Section>" },
			{ "hkArray<T*<hkReflect::Type>, hkContainerHeapAllocator>", "std::vector<IHavokObject>" },
			{ "hkArray<hkSimpleLocalFrame::ChildPointer, hkContainerHeapAllocator>", "std::vector<hkLocalFrame>" },
			{ "hkArray<hkAsyncThreadPool::ThreadPriority, hkContainerHeapAllocator>", "std::vector<hkAsyncThreadPool::ThreadPriority>" },
			{ "hkArray<hkMemoryResourceHandle::ExternalLink, hkContainerHeapAllocator>", "std::vector<hkMemoryResourceHandle::ExternalLink>" },
			{ "hkArray<hctAttributeDescription, hkContainerHeapAllocator>", "std::vector<hctAttributeDescription>" },
			{ "hkArray<hkMonitorStreamColorTable::ColorPair, hkContainerHeapAllocator>", "std::vector<hkMonitorStreamColorTable::ColorPair>" },
			{ "hkArray<hkMonitorStreamTypeMap::TypeMap, hkContainerHeapAllocator>", "std::vector<hkMonitorStreamTypeMap::TypeMap>" },
			{ "hkArray<hkTransform, hkContainerHeapAllocator>", "std::vector<hkMatrix4Holder>" },
			{ "hkArray<hclStorageSetupMesh::Bone, hkContainerHeapAllocator>", "std::vector<hclStorageSetupMesh::Bone>" },
			{ "hkArray<hclStorageSetupMesh::TriangleChannel, hkContainerHeapAllocator>", "std::vector<hclStorageSetupMesh::TriangleChannel>" },
			{ "hkArray<hclStorageSetupMesh::VertexChannel, hkContainerHeapAllocator>", "std::vector<hclStorageSetupMesh::VertexChannel>" },
			{ "hkArray<T*<hclStorageSetupMeshSection>, hkContainerHeapAllocator>", "std::vector<hclStorageSetupMeshSection>" },
			{ "hkArray<T*<hclConstraintSetSetupObject>, hkContainerHeapAllocator>", "std::vector<hclConstraintSetSetupObject>" },
			{ "hkArray<hkRefPtr<hclClothSetupObject>, hkContainerHeapAllocator>", "std::vector<hclClothSetupObject>" },
			{ "hkArray<hkaiNavMeshGenerationUtilsSettings::RegionPruningSettings::RegionConnection, hkContainerHeapAllocator>", "std::vector<hkaiNavMeshGenerationUtilsSettings::RegionPruningSettings::RegionConnection>" },
			{ "hkArray<T*<hclOperatorSetupObject>, hkContainerHeapAllocator>", "std::vector<hclOperatorSetupObject>" },
			{ "hkArray<T*<hclTransformSetSetupObject>, hkContainerHeapAllocator>", "std::vector<hclTransformSetSetupObject>" },
			{ "hkArray<hkHandle<unsigned int, 2147483647>, hkContainerHeapAllocator>", "std::vector<hkHandle<uint32_t>>" },
			{ "hkArray<hkArray<hkHandle<hkUint32, 2147483647>, hkContainerHeapAllocator>, hkContainerHeapAllocator>", "std::vector<std::vector<hkHandle<uint32_t>>>" },
			{ "hkArray<hclStateDependencyGraph::Branch, hkContainerHeapAllocator>", "std::vector<hclStateDependencyGraph::Branch>" },
			{ "hkArray<hclClothState::TransformSetAccess, hkContainerHeapAllocator>", "std::vector<hclClothState::TransformSetAccess>" },
			{ "hkArray<hclUpdateSomeVertexFramesOperator::Triangle, hkContainerHeapAllocator>", "std::vector<hclUpdateSomeVertexFramesOperator::Triangle>" },
			{ "hkArray<hclObjectSpaceDeformer::LocalBlockUnpackedP, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::LocalBlockUnpackedP>" },
			{ "hkArray<hclObjectSpaceDeformer::LocalBlockPNT, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::LocalBlockPNT>" },
			{ "hkArray<hclMoveParticlesOperator::VertexParticlePair, hkContainerHeapAllocator>", "std::vector<hclMoveParticlesOperator::VertexParticlePair>" },
			{ "hkArray<hclMeshMeshDeformOperator::TriangleVertexPair, hkContainerHeapAllocator>", "std::vector<hclMeshMeshDeformOperator::TriangleVertexPair>" },
			{ "hkArray<hclObjectSpaceDeformer::TwoBlendEntryBlock, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::TwoBlendEntryBlock>" },
			{ "hkArray<hclObjectSpaceDeformer::SixBlendEntryBlock, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::SixBlendEntryBlock>" },
			{ "hkArray<hclObjectSpaceDeformer::EightBlendEntryBlock, hkContainerHeapAllocator>", "std::vector<hclObjectSpaceDeformer::EightBlendEntryBlock>" },
			{ "hkArray<hclBoneSpaceDeformer::OneBlendEntryBlock, hkContainerHeapAllocator>", "std::vector<hclBoneSpaceDeformer::OneBlendEntryBlock>" },
			{ "hkArray<hclBoneSpaceDeformer::ThreeBlendEntryBlock, hkContainerHeapAllocator>", "std::vector<hclBoneSpaceDeformer::ThreeBlendEntryBlock>" },
			{ "hkArray<hclBoneSpaceDeformer::LocalBlockUnpackedP, hkContainerHeapAllocator>", "std::vector<hclBoneSpaceDeformer::LocalBlockUnpackedP>" },
			{ "hkArray<hclBoneSpaceDeformer::LocalBlockP, hkContainerHeapAllocator>", "std::vector<hclBoneSpaceDeformer::LocalBlockP>" },
			{ "hkArray<hclBoneSpaceDeformer::LocalBlockUnpackedPNTB, hkContainerHeapAllocator>", "std::vector<hclBoneSpaceDeformer::LocalBlockUnpackedPNTB>" },
			{ "hkArray<hclBoneSpaceDeformer::LocalBlockPNTB, hkContainerHeapAllocator>", "std::vector<hclBoneSpaceDeformer::LocalBlockPNTB>" },
			{ "hkArray<hclBoneSpaceDeformer::LocalBlockUnpackedPN, hkContainerHeapAllocator>", "std::vector<hclBoneSpaceDeformer::LocalBlockUnpackedPN>" },
			{ "hkArray<hkRefPtr<hclCollidable>, hkContainerHeapAllocator>", "std::vector<hclCollidable>" },
			{ "hkArray<hclVolumeConstraintMx::FrameBatchData, hkContainerHeapAllocator>", "std::vector<hclVolumeConstraintMx::FrameBatchData>" },
			{ "hkArray<hclTransitionConstraintSet::PerParticle, hkContainerHeapAllocator>", "std::vector<hclTransitionConstraintSet::PerParticle>" },
			{ "hkArray<hclStandardLinkConstraintSetMx::Batch, hkContainerHeapAllocator>", "std::vector<hclStandardLinkConstraintSetMx::Batch>" },
			{ "hkArray<hclStandardLinkConstraintSet::Link, hkContainerHeapAllocator>", "std::vector<hclStandardLinkConstraintSet::Link>" },
			{ "hkArray<hclCompressibleLinkConstraintSetMx::Single, hkContainerHeapAllocator>", "std::vector<hclCompressibleLinkConstraintSetMx::Single>" },
			{ "hkArray<hclCompressibleLinkConstraintSetMx::Batch, hkContainerHeapAllocator>", "std::vector<hclCompressibleLinkConstraintSetMx::Batch>" },
			{ "hkArray<hclBonePlanesConstraintSet::BonePlane, hkContainerHeapAllocator>", "std::vector<hclBonePlanesConstraintSet::BonePlane>" },
			{ "hkArray<hclBendStiffnessConstraintSetMx::Single, hkContainerHeapAllocator>", "std::vector<hclBendStiffnessConstraintSetMx::Single>" },
			{ "hkArray<hclBendLinkConstraintSetMx::Batch, hkContainerHeapAllocator>", "std::vector<hclBendLinkConstraintSetMx::Batch>" },
			{ "hkArray<hclBendLinkConstraintSet::Link, hkContainerHeapAllocator>", "std::vector<hclBendLinkConstraintSet::Link>" },
			{ "hkArray<T*<hclAction>, hkContainerHeapAllocator>", "std::vector<hclAction>" },
			{ "hkArray<T*<hclStateTransition>, hkContainerHeapAllocator>", "std::vector<hclStateTransition>" },
			{ "hkArray<T*<hclOperator>, hkContainerHeapAllocator>", "std::vector<hclOperator>" },
			{ "hkArray<T*<hclSimClothData>, hkContainerHeapAllocator>", "std::vector<hclSimClothData>" },
			{ "hkArray<unsigned long long, hkContainerHeapAllocator>", "std::vector<uint64_t>" },
			{ "hkArray<hkbBehaviorInfo::IdToNamePair, hkContainerHeapAllocator>", "std::vector<hkbBehaviorInfo::IdToNamePair>" },
			{ "hkArray<hkRefPtr<hkbBehaviorGraph>, hkContainerHeapAllocator>", "std::vector<hkbBehaviorGraph>" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkaiDynamicUserEdgeSetInfoBase::ClusterGraphEdge, int>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<hkaiDynamicUserEdgeSetInfoBase::ClusterGraphEdge, int>>" },
			{ "hkArray<hkVector4f, hkContainerHeapAllocator>", "std::vector<Vector4>" },
			{ "hkArray<hkVariableTweakingHelper::IntVariableInfo, hkContainerHeapAllocator>", "std::vector<hkVariableTweakingHelper::IntVariableInfo>" },
			{ "hkArray<hkbShapeSetup, hkContainerHeapAllocator>", "std::vector<hkbShapeSetup>" },
			{ "hkArray<hkbRadialSelectorGenerator::GeneratorPair, hkContainerHeapAllocator>", "std::vector<hkbRadialSelectorGenerator::GeneratorPair>" },
			{ "hkArray<hkRefPtr<hkbCustomIdSelector>, hkContainerHeapAllocator>", "std::vector<hkbCustomIdSelector>" },
			{ "hkArray<T*<hkbCustomIdSelector>, hkContainerHeapAllocator>", "std::vector<hkbCustomIdSelector>" },
			{ "hkArray<hkRefPtr<hkbModifier>, hkContainerHeapAllocator>", "std::vector<hkbModifier>" },
			{ "hkArray<hkbBodyIkControlPoint, hkContainerHeapAllocator>", "std::vector<hkbBodyIkControlPoint>" },
			{ "hkArray<hkbBodyIkControllerProfile, hkContainerHeapAllocator>", "std::vector<hkbBodyIkControllerProfile>" },
			{ "hkArray<hkHashMapDetail::MapTuple<unsigned long long, T*<hkHashMap<T*<hkReflect::Type>, T*<void>>>>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<uint64_t, hkHashMap<IHavokObject, object>>>" },
			{ "hkArray<hkRefVariant, hkContainerHeapAllocator>", "std::vector<hkReferencedObject*>" },
			{ "hkArray<hkbVariableValue, hkContainerHeapAllocator>", "std::vector<hkbVariableValue>" },
			{ "hkArray<hkbCompiledExpressionSet::Token, hkContainerHeapAllocator>", "std::vector<hkbCompiledExpressionSet::Token>" },
			{ "hkArray<T*<hkbStatestd::vectorener>, hkContainerHeapAllocator>", "std::vector<hkbStatestd::vectorener>" },
			{ "hkArray<hkbStateMachine::TransitionInfo, hkContainerHeapAllocator>", "std::vector<hkbStateMachine::TransitionInfo>" },
			{ "hkArray<T*<hkbStateMachine::StateInfo>, hkContainerHeapAllocator>", "std::vector<hkbStateMachine::StateInfo>" },
			{ "hkArray<hkbIntVariableSequencedData::Sample, hkContainerHeapAllocator>", "std::vector<hkbIntVariableSequencedData::Sample>" },
			{ "hkArray<T*<hkbIntVariableSequencedData>, hkContainerHeapAllocator>", "std::vector<hkbIntVariableSequencedData>" },
			{ "hkArray<T*<hkbBoolVariableSequencedData>, hkContainerHeapAllocator>", "std::vector<hkbBoolVariableSequencedData>" },
			{ "hkArray<T*<hkbEventSequencedData>, hkContainerHeapAllocator>", "std::vector<hkbEventSequencedData>" },
			{ "hkArray<hkbSenseHandleModifier::Range, hkContainerHeapAllocator>", "std::vector<hkbSenseHandleModifier::Range>" },
			{ "hkArray<hkbHandIkModifier::Hand, hkContainerHeapAllocator>", "std::vector<hkbHandIkModifier::Hand>" },
			{ "hkArray<hkbHandIkControlsModifier::Hand, hkContainerHeapAllocator>", "std::vector<hkbHandIkControlsModifier::Hand>" },
			{ "hkArray<hkbAttributeModifier::Assignment, hkContainerHeapAllocator>", "std::vector<hkbAttributeModifier::Assignment>" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkHandle<hkUint32, -1>, hkaiDynamicUserEdgeSetInfo>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<hkHandle<uint32_t>, hkaiDynamicUserEdgeSetInfo>>" },
			{ "hkArray<hkbStateMachine::ActiveTransitionInfo, hkContainerHeapAllocator>", "std::vector<hkbStateMachine::ActiveTransitionInfo>" },
			{ "hkArray<T*<hkbGenerator>, hkContainerHeapAllocator>", "std::vector<hkbGenerator>" },
			{ "hkArray<hkbClipGenerator::Echo, hkContainerHeapAllocator>", "std::vector<hkbClipGenerator::Echo>" },
			{ "hkArray<hkbClipTrigger, hkContainerHeapAllocator>", "std::vector<hkbClipTrigger>" },
			{ "hkArray<T*<hkbLayer>, hkContainerHeapAllocator>", "std::vector<hkbLayer>" },
			{ "hkArray<hkbAssetBundleStringData, hkContainerHeapAllocator>", "std::vector<hkbAssetBundleStringData>" },
			{ "hkArray<hkbCharacterStringData::FileNameMeshNamePair, hkContainerHeapAllocator>", "std::vector<hkbCharacterStringData::FileNameMeshNamePair>" },
			{ "hkArray<T*<hkbCharacter>, hkContainerHeapAllocator>", "std::vector<hkbCharacter>" },
			{ "hkArray<hkStringPtr, hkContainerHeapAllocator>", "std::vector<std::string>" },
			{ "hkArray<hkRefPtr<hkbNodeInternalStateInfo>, hkContainerHeapAllocator>", "std::vector<hkbNodeInternalStateInfo>" },
			{ "hkArray<hkbVariableInfo, hkContainerHeapAllocator>", "std::vector<hkbVariableInfo>" },
			{ "hkArray<hkaiPackedKey_<hkaiIndex<int>, hkaiIndex<int>>, hkContainerHeapAllocator>", "std::vector<uint32_t>" },
			{ "hkArray<hkHashMapDetail::MapTuple<int, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiNavMeshInstanceData::FaceDynUserEdgeBases>>" },
			{ "hkArray<hkHashMapDetail::MapTuple<int, hkaiDefaultDynamicUserEdgeSetInfo::Section>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiDefaultDynamicUserEdgeSetInfo::Section>>" },
			{ "hkArray<hkHashMapDetail::MapTuple<int, hkArray<hkaiNavMeshCutConfiguration::DynamicUserEdge, hkContainerHeapAllocator>>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, std::vector<hkaiNavMeshCutConfiguration::DynamicUserEdge>>>" },
			{ "hkArray<hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::FaceInfo>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::FaceInfo>>" },
			{ "hkArray<hkaiOverlapManager::Generator, hkContainerHeapAllocator>", "std::vector<hkaiOverlapManager::Generator>" },
			{ "hkArray<hkaiDynamicUserEdgeSetInfo::UserEdgePair, hkContainerHeapAllocator>", "std::vector<hkaiDynamicUserEdgeSetInfo::UserEdgePair>" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiDynamicUserEdgeSetInfo::Section>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiDynamicUserEdgeSetInfo::Section>>" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, int>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, int>>" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiNavMeshCutConfiguration::BigFaceInfo>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::BigFaceInfo>>" },
			{ "hkArray<hkHashMapDetail::MapTuple<hkaiIndex<hkInt32>, hkaiNavMeshCutConfiguration::FaceInfo>, hkContainerHeapAllocator>", "std::vector<hkHashMapDetail::MapTuple<int, hkaiNavMeshCutConfiguration::FaceInfo>>" },
			{ "hkArray<T*<hkaiStreamingSet>, hkContainerHeapAllocator>", "std::vector<hkaiStreamingSet>" },
			{ "hkArray<float, hkContainerHeapAllocator>", "std::vector<float>" },
			{ "hkArray<unsigned short, hkContainerHeapAllocator>", "std::vector<uint16_t>" },
			{ "hkArray<unsigned int, hkContainerHeapAllocator>", "std::vector<uint32_t>" },
			{ "hkArray<hkaiLocalSteeringInput, hkContainerHeapAllocator>", "std::vector<hkaiLocalSteeringInput>" },
			{ "hkArray<hkRefPtr<hkaiObstacleGenerator>, hkContainerHeapAllocator>", "std::vector<hkaiObstacleGenerator>" },
			{ "hkArray<hkRefPtr<hkaiSilhouetteGenerator>, hkContainerHeapAllocator>", "std::vector<hkaiSilhouetteGenerator>" },
			{ "hkArray<hkRefPtr<hkaiNavMeshPathRequest>, hkContainerHeapAllocator>", "std::vector<hkaiNavMeshPathRequest>" },
			{ "hkArray<hkReal, hkContainerHeapAllocator>", "std::vector<float>" },
			{ "hkArray<hkViewPtr<hkaiVolumeNavigator>, hkContainerHeapAllocator>", "std::vector<hkaiVolumeNavigator>" },
			{ "hkArray<hkViewPtr<hkaiNavigator>, hkContainerHeapAllocator>", "std::vector<hkaiNavigator>" },
			{ "hkArray<hkaiNavigator::Goal, hkContainerHeapAllocator>", "std::vector<hkaiNavigator::Goal>" },
			{ "hkArray<hkaiNavVolumeInstanceData::CellInstance, hkContainerHeapAllocator>", "std::vector<hkaiNavVolumeInstanceData::CellInstance>" },
			{ "hkFloat32Le", "float" },
			{ "hkArray<hkaiNavVolume::UserEdgeInfo, hkContainerHeapAllocator>", "std::vector<hkaiNavVolume::UserEdgeInfo>" },
			{ "hkArray<hkaiNavVolume::Edge, hkContainerHeapAllocator>", "std::vector<hkaiNavVolume::Edge>" },
			{ "hkArray<hkaiNavVolume::Cell, hkContainerHeapAllocator>", "std::vector<hkaiNavVolume::Cell>" },
			{ "hkArray<hkaiCopyOnWritePtr<hkaiNavMeshClearanceCache, hkaiCopyOnWriteDefaultTraits<hkaiNavMeshClearanceCache>>, hkContainerHeapAllocator>", "std::vector<hkaiCopyOnWritePtr<hkaiNavMeshClearanceCache>>" },
			{ "hkArray<hkaiNavMesh::Edge, hkContainerHeapAllocator>", "std::vector<hkaiNavMesh::Edge>" },
			{ "hkArray<hkaiUserEdgeUtils::UserEdgeSetup, hkContainerHeapAllocator>", "std::vector<hkaiUserEdgeUtils::UserEdgeSetup>" },
			{ "hkArray<hkaiStreamingSetInstance::DynUserEdgeConnection, hkContainerHeapAllocator>", "std::vector<hkaiStreamingSetInstance::DynUserEdgeConnection>" },
			{ "hkArray<hkaiStreamingSet::VolumeConnection, hkContainerHeapAllocator>", "std::vector<hkaiStreamingSet::VolumeConnection>" },
			{ "hkArray<hkaiStreamingSet::GraphConnection, hkContainerHeapAllocator>", "std::vector<hkaiStreamingSet::GraphConnection>" },
			{ "hkArray<hkaiNavMeshClearanceCacheSeeding::CacheData, hkContainerHeapAllocator>", "std::vector<hkaiNavMeshClearanceCacheSeeding::CacheData>" },
			{ "hkArray<hkaiNavMeshClearanceCacheManager::CacheInfo, hkContainerHeapAllocator>", "std::vector<hkaiNavMeshClearanceCacheManager::CacheInfo>" },
			{ "hkArray<hkUint8, hkContainerHeapAllocator>", "std::vector<uint8_t>" },
			{ "hkVector4", "hkVector4Holder" },
			{ "hkArray<hkaiDirectedGraphInstanceData::FreeBlockstd::vector, hkContainerHeapAllocator>", "std::vector<hkaiDirectedGraphInstanceData::FreeBlockstd::vector>" },
			{ "hkArray<hkUint32, hkContainerHeapAllocator>", "std::vector<uint32_t>" },
			{ "hkArray<hkaiDirectedGraphExplicitCost::Edge, hkContainerHeapAllocator>", "std::vector<hkaiDirectedGraphExplicitCost::Edge>" },
			{ "hkArray<hkaiDirectedGraphExplicitCost::Node, hkContainerHeapAllocator>", "std::vector<hkaiDirectedGraphExplicitCost::Node>" },
			{ "hkArray<hkArray<int, hkContainerHeapAllocator>, hkContainerHeapAllocator>", "std::vector<std::vector<int>>" },
			{ "hkArray<hkaiOverlapManager::Overlap, hkContainerHeapAllocator>", "std::vector<hkaiOverlapManager::Overlap>" },
			{ "hkArray<hkaiAabbOverlapManager::Overlap, hkContainerHeapAllocator>", "std::vector<hkaiAabbOverlapManager::Overlap>" },
			{ "hkArray<hkAabb, hkContainerHeapAllocator>", "std::vector<hkAabb>" },
			{ "hkArray<hkRefPtr<hkaiNavMeshInstanceCutter>, hkContainerHeapAllocator>", "std::vector<hkaiNavMeshInstanceCutter>" },
			{ "hkArray<hkaiPath::PathPoint, hkContainerHeapAllocator>", "std::vector<hkaiPath::PathPoint>" },
			{ "hkArray<hkReflect::Detail::Opaque, hkContainerHeapAllocator>", "std::vector<IHavokObject>" },
			{ "hkArray<hkaiAvoidanceSolver::SphereObstacle, hkContainerHeapAllocator>", "std::vector<hkaiAvoidanceSolver::SphereObstacle>" },
			{ "hkArray<hkaiCornerPredictor::UserEdgeTraversal, hkContainerHeapAllocator>", "std::vector<hkaiCornerPredictor::UserEdgeTraversal>" },
			{ "hkArray<hkaiSingleCharacterBehavior::RequestedGoalPoint, hkContainerHeapAllocator>", "std::vector<hkaiSingleCharacterBehavior::RequestedGoalPoint>" },
			{ "hkArray<hkArray<hkVector4f, hkContainerHeapAllocator>, hkContainerHeapAllocator>", "std::vector<std::vector<Vector4>>" },
			{ "hkArray<hkRefPtr<hkaiCarver>, hkContainerHeapAllocator>", "std::vector<hkaiCarver>" },
			{ "hkArray<hkaiEdgeGeometry::Edge, hkContainerHeapAllocator>", "std::vector<hkaiEdgeGeometry::Edge>" },
			{ "hkArray<hkArray<hkVector4, hkContainerHeapAllocator>, hkContainerHeapAllocator>", "std::vector<std::vector<Vector4>>" },
			{ "hkArray<hkInt32, hkContainerHeapAllocator>", "std::vector<int>" },
			{ "hkArray<hkVector4, hkContainerHeapAllocator>", "std::vector<Vector4>" },
			{ "hkArray<hkaiEdgeGeometry::Face, hkContainerHeapAllocator>", "std::vector<hkaiEdgeGeometry::Face>" },
			{ "hkRelArray<hkUint8>", "std::vector<uint8_t>" },
			{ "hkRelArray<hknpConvexPolytopeShape::Face>", "std::vector<hknpConvexPolytopeShape::Face>" },
			{ "hkRelArray<hkVector4>", "std::vector<Vector4>" },
			{ "hkArrayView<hknpParticleCollisionPair>", "ArraySegment<hknpParticleCollisionPair>" },
			{ "hkArrayView<int>", "ArraySegment<int>" },
			{ "hk::ValueArray<hk::FileDialogFilter>", "std::vector<hk::FileDialogFilter>" },
			{ "hk::ValueArray<const char*>", "std::vector<std::string>" },
			{ "hkColorf", "hkVector4Holder" },
			{ "hkReflect::Any", "object" },
			{ "hkVector4f", "hkVector4Holder" },
			{ "hkVector4d", "hkVector4Holder" },
			{ "hkQuaterniond", "Eigen::Quaterniond" },
			{ "hkMatrix3", "Eigen::Matrix3f" },
			{ "char[N]<65>", "std::string" },
			{ "char[N]<41>", "std::string" },
			{ "char[N]<31>", "std::string" },
			{ "hkReflect::Detail::StringOut", "std::string" },
			{ "hkStringView", "std::string" },
			{ "hkFloat64Be", "double" },
			{ "hkHalf32", "float" },
			{ "hkReal", "float" },
			{ "hkSimdDouble64", "Vector128<double>" },
			{ "hkBool32Be", "bool" },
			{ "hkBool32Le", "bool" },
			{ "hkBool8Be", "bool" },
			{ "hkBool", "bool" },
		};

	};
}