### CapsuleGenGeoNode.py ###
# Automatically generated by NodeToPython Addon: https://github.com/BrendanParmer/NodeToPython/releases/tag/v2.2.0

import bpy

#initialize capsule_gen node group
def capsule_gen_node_group():
	capsule_gen= bpy.data.node_groups.new(type = 'GeometryNodeTree', name = "Capsule_Gen")

	#initialize capsule_gen nodes
	#node Vector Math
	vector_math = capsule_gen.nodes.new("ShaderNodeVectorMath")
	vector_math.operation = 'SUBTRACT'
	#Vector_002
	vector_math.inputs[2].default_value = (0.0, 0.0, 0.0)
	#Scale
	vector_math.inputs[3].default_value = 1.0

	#node Vector Math.001
	vector_math_001 = capsule_gen.nodes.new("ShaderNodeVectorMath")
	vector_math_001.operation = 'LENGTH'
	#Vector_001
	vector_math_001.inputs[1].default_value = (0.0, 0.0, 0.0)
	#Vector_002
	vector_math_001.inputs[2].default_value = (0.0, 0.0, 0.0)
	#Scale
	vector_math_001.inputs[3].default_value = 1.0

	#node Math
	math = capsule_gen.nodes.new("ShaderNodeMath")
	math.operation = 'DIVIDE'
	#Value_002
	math.inputs[2].default_value = 9.999999747378752e-05

	#node Math.001
	math_001 = capsule_gen.nodes.new("ShaderNodeMath")
	math_001.operation = 'ARCCOSINE'
	#Value_001
	math_001.inputs[1].default_value = 0.5
	#Value_002
	math_001.inputs[2].default_value = 9.999999747378752e-05

	#capsule_gen outputs
	#output Geometry
	capsule_gen.outputs.new('NodeSocketGeometry', "Geometry")
	capsule_gen.outputs[0].attribute_domain = 'POINT'


	#node Group Output
	group_output = capsule_gen.nodes.new("NodeGroupOutput")

	#node Math.002
	math_002 = capsule_gen.nodes.new("ShaderNodeMath")
	math_002.operation = 'SUBTRACT'
	#Value_002
	math_002.inputs[2].default_value = 9.999999747378752e-05

	#node Vector Math.002
	vector_math_002 = capsule_gen.nodes.new("ShaderNodeVectorMath")
	vector_math_002.operation = 'MULTIPLY'
	#Vector_002
	vector_math_002.inputs[2].default_value = (0.0, 0.0, 0.0)
	#Scale
	vector_math_002.inputs[3].default_value = 1.0

	#node Vector Math.003
	vector_math_003 = capsule_gen.nodes.new("ShaderNodeVectorMath")
	vector_math_003.operation = 'MULTIPLY_ADD'
	#Scale
	vector_math_003.inputs[3].default_value = 1.0

	#node Math.003
	math_003 = capsule_gen.nodes.new("ShaderNodeMath")
	math_003.operation = 'SUBTRACT'
	#Value
	math_003.inputs[0].default_value = 1.0
	#Value_002
	math_003.inputs[2].default_value = 9.999999747378752e-05

	#node Math.004
	math_004 = capsule_gen.nodes.new("ShaderNodeMath")
	math_004.operation = 'DIVIDE'
	#Value_002
	math_004.inputs[2].default_value = 9.999999747378752e-05

	#capsule_gen inputs
	#input Start/Big
	capsule_gen.inputs.new('NodeSocketVectorTranslation', "Start/Big")
	capsule_gen.inputs[0].default_value = (0.0, 0.0, 0.0)
	capsule_gen.inputs[0].min_value = -3.4028234663852886e+38
	capsule_gen.inputs[0].max_value = 3.4028234663852886e+38
	capsule_gen.inputs[0].attribute_domain = 'POINT'

	#input End/Small
	capsule_gen.inputs.new('NodeSocketVectorTranslation', "End/Small")
	capsule_gen.inputs[1].default_value = (1.0, 0.0, 0.0)
	capsule_gen.inputs[1].min_value = -3.4028234663852886e+38
	capsule_gen.inputs[1].max_value = 3.4028234663852886e+38
	capsule_gen.inputs[1].attribute_domain = 'POINT'

	#input bigRadius
	capsule_gen.inputs.new('NodeSocketFloat', "bigRadius")
	capsule_gen.inputs[2].default_value = 0.5
	capsule_gen.inputs[2].min_value = -10000.0
	capsule_gen.inputs[2].max_value = 10000.0
	capsule_gen.inputs[2].attribute_domain = 'POINT'

	#input smallRadius
	capsule_gen.inputs.new('NodeSocketFloat', "smallRadius")
	capsule_gen.inputs[3].default_value = 0.5
	capsule_gen.inputs[3].min_value = -10000.0
	capsule_gen.inputs[3].max_value = 10000.0
	capsule_gen.inputs[3].attribute_domain = 'POINT'


	#node Group Input
	group_input = capsule_gen.nodes.new("NodeGroupInput")

	#initialize arc_instance node group
	def arc_instance_node_group():
		arc_instance= bpy.data.node_groups.new(type = 'GeometryNodeTree', name = "Arc Instance")

		#initialize arc_instance nodes
		#node Math
		math_1 = arc_instance.nodes.new("ShaderNodeMath")
		math_1.operation = 'SUBTRACT'
		#Value
		math_1.inputs[0].default_value = 0.0
		#Value_002
		math_1.inputs[2].default_value = 0.5

		#node Math.001
		math_001_1 = arc_instance.nodes.new("ShaderNodeMath")
		math_001_1.operation = 'MULTIPLY'
		#Value_001
		math_001_1.inputs[1].default_value = 2.0
		#Value_002
		math_001_1.inputs[2].default_value = 0.5

		#node Translate Instances
		translate_instances = arc_instance.nodes.new("GeometryNodeTranslateInstances")
		#Selection
		translate_instances.inputs[1].default_value = True
		#Local Space
		translate_instances.inputs[3].default_value = True

		#node Realize Instances
		realize_instances = arc_instance.nodes.new("GeometryNodeRealizeInstances")

		#node Translate Instances.001
		translate_instances_001 = arc_instance.nodes.new("GeometryNodeTranslateInstances")
		#Selection
		translate_instances_001.inputs[1].default_value = True
		#Local Space
		translate_instances_001.inputs[3].default_value = True

		#node Rotate Instances
		rotate_instances = arc_instance.nodes.new("GeometryNodeRotateInstances")
		#Selection
		rotate_instances.inputs[1].default_value = True
		#Local Space
		rotate_instances.inputs[4].default_value = True

		#node Realize Instances.001
		realize_instances_001 = arc_instance.nodes.new("GeometryNodeRealizeInstances")

		#node Rotate Instances.001
		rotate_instances_001 = arc_instance.nodes.new("GeometryNodeRotateInstances")
		#Selection
		rotate_instances_001.inputs[1].default_value = True
		#Rotation
		rotate_instances_001.inputs[2].default_value = (0.0, 0.0, 0.5235987901687622)
		#Local Space
		rotate_instances_001.inputs[4].default_value = True

		#node Arc
		arc = arc_instance.nodes.new("GeometryNodeCurveArc")
		arc.mode = 'RADIUS'
		#Resolution
		arc.inputs[0].default_value = 12
		#Start
		arc.inputs[1].default_value = (-1.0, 0.0, 0.0)
		#Middle
		arc.inputs[2].default_value = (0.0, 2.0, 0.0)
		#End
		arc.inputs[3].default_value = (1.0, 0.0, 0.0)
		#Offset Angle
		arc.inputs[7].default_value = 0.0
		#Connect Center
		arc.inputs[8].default_value = False

		#arc_instance outputs
		#output Instances
		arc_instance.outputs.new('NodeSocketGeometry', "Instances")
		arc_instance.outputs[0].attribute_domain = 'POINT'


		#node Group Output
		group_output_1 = arc_instance.nodes.new("NodeGroupOutput")

		#node Translate Instances.002
		translate_instances_002 = arc_instance.nodes.new("GeometryNodeTranslateInstances")
		#Selection
		translate_instances_002.inputs[1].default_value = True
		#Local Space
		translate_instances_002.inputs[3].default_value = True

		#node Rotate Instances.002
		rotate_instances_002 = arc_instance.nodes.new("GeometryNodeRotateInstances")
		#Selection
		rotate_instances_002.inputs[1].default_value = True
		#Local Space
		rotate_instances_002.inputs[4].default_value = True

		#node Rotate Instances.003
		rotate_instances_003 = arc_instance.nodes.new("GeometryNodeRotateInstances")
		#Selection
		rotate_instances_003.inputs[1].default_value = True
		#Rotation
		rotate_instances_003.inputs[2].default_value = (0.0, 0.0, 1.0471975803375244)
		#Local Space
		rotate_instances_003.inputs[4].default_value = True

		#node Geometry to Instance
		geometry_to_instance = arc_instance.nodes.new("GeometryNodeGeometryToInstance")

		#node Translate Instances.003
		translate_instances_003 = arc_instance.nodes.new("GeometryNodeTranslateInstances")
		#Selection
		translate_instances_003.inputs[1].default_value = True
		#Local Space
		translate_instances_003.inputs[3].default_value = True

		#node Rotate Instances.004
		rotate_instances_004 = arc_instance.nodes.new("GeometryNodeRotateInstances")
		#Selection
		rotate_instances_004.inputs[1].default_value = True
		#Rotation
		rotate_instances_004.inputs[2].default_value = (0.0, 0.0, 1.5707963705062866)
		#Local Space
		rotate_instances_004.inputs[4].default_value = True

		#node Rotate Instances.005
		rotate_instances_005 = arc_instance.nodes.new("GeometryNodeRotateInstances")
		#Selection
		rotate_instances_005.inputs[1].default_value = True
		#Local Space
		rotate_instances_005.inputs[4].default_value = True

		#node Realize Instances.002
		realize_instances_002 = arc_instance.nodes.new("GeometryNodeRealizeInstances")

		#node Realize Instances.003
		realize_instances_003 = arc_instance.nodes.new("GeometryNodeRealizeInstances")

		#node Translate Instances.004
		translate_instances_004 = arc_instance.nodes.new("GeometryNodeTranslateInstances")
		#Selection
		translate_instances_004.inputs[1].default_value = True
		#Local Space
		translate_instances_004.inputs[3].default_value = True

		#node Rotate Instances.006
		rotate_instances_006 = arc_instance.nodes.new("GeometryNodeRotateInstances")
		#Selection
		rotate_instances_006.inputs[1].default_value = True
		#Rotation
		rotate_instances_006.inputs[2].default_value = (0.0, 0.0, 2.094395160675049)
		#Local Space
		rotate_instances_006.inputs[4].default_value = True

		#node Rotate Instances.007
		rotate_instances_007 = arc_instance.nodes.new("GeometryNodeRotateInstances")
		#Selection
		rotate_instances_007.inputs[1].default_value = True
		#Local Space
		rotate_instances_007.inputs[4].default_value = True

		#node Realize Instances.004
		realize_instances_004 = arc_instance.nodes.new("GeometryNodeRealizeInstances")

		#node Translate Instances.005
		translate_instances_005 = arc_instance.nodes.new("GeometryNodeTranslateInstances")
		#Selection
		translate_instances_005.inputs[1].default_value = True
		#Local Space
		translate_instances_005.inputs[3].default_value = True

		#node Rotate Instances.008
		rotate_instances_008 = arc_instance.nodes.new("GeometryNodeRotateInstances")
		#Selection
		rotate_instances_008.inputs[1].default_value = True
		#Rotation
		rotate_instances_008.inputs[2].default_value = (0.0, 0.0, 2.6179938316345215)
		#Local Space
		rotate_instances_008.inputs[4].default_value = True

		#node Rotate Instances.009
		rotate_instances_009 = arc_instance.nodes.new("GeometryNodeRotateInstances")
		#Selection
		rotate_instances_009.inputs[1].default_value = True
		#Local Space
		rotate_instances_009.inputs[4].default_value = True

		#node Realize Instances.005
		realize_instances_005 = arc_instance.nodes.new("GeometryNodeRealizeInstances")

		#node Reroute
		reroute = arc_instance.nodes.new("NodeReroute")
		#node Reroute.001
		reroute_001 = arc_instance.nodes.new("NodeReroute")
		#node Geometry to Instance.001
		geometry_to_instance_001 = arc_instance.nodes.new("GeometryNodeGeometryToInstance")

		#node Rotate Instances.010
		rotate_instances_010 = arc_instance.nodes.new("GeometryNodeRotateInstances")
		#Selection
		rotate_instances_010.inputs[1].default_value = True
		#Local Space
		rotate_instances_010.inputs[4].default_value = True

		#arc_instance inputs
		#input Translation
		arc_instance.inputs.new('NodeSocketVectorTranslation', "Translation")
		arc_instance.inputs[0].default_value = (0.0, 0.0, 0.0)
		arc_instance.inputs[0].min_value = -3.4028234663852886e+38
		arc_instance.inputs[0].max_value = 3.4028234663852886e+38
		arc_instance.inputs[0].attribute_domain = 'POINT'

		#input Rotation
		arc_instance.inputs.new('NodeSocketVectorEuler', "Rotation")
		arc_instance.inputs[1].default_value = (0.0, 0.0, 0.0)
		arc_instance.inputs[1].min_value = -3.4028234663852886e+38
		arc_instance.inputs[1].max_value = 3.4028234663852886e+38
		arc_instance.inputs[1].attribute_domain = 'POINT'

		#input Angle
		arc_instance.inputs.new('NodeSocketFloat', "Angle")
		arc_instance.inputs[2].default_value = 0.5
		arc_instance.inputs[2].min_value = -10000.0
		arc_instance.inputs[2].max_value = 10000.0
		arc_instance.inputs[2].attribute_domain = 'POINT'

		#input Radius
		arc_instance.inputs.new('NodeSocketFloatDistance', "Radius")
		arc_instance.inputs[3].default_value = 1.0
		arc_instance.inputs[3].min_value = 0.0
		arc_instance.inputs[3].max_value = 3.4028234663852886e+38
		arc_instance.inputs[3].attribute_domain = 'POINT'

		#input Invert Arc
		arc_instance.inputs.new('NodeSocketBool', "Invert Arc")
		arc_instance.inputs[4].default_value = False
		arc_instance.inputs[4].attribute_domain = 'POINT'


		#node Group Input
		group_input_1 = arc_instance.nodes.new("NodeGroupInput")


		#Set locations
		math_1.location = (-80.0, 90.245849609375)
		math_001_1.location = (-80.0, -90.245849609375)
		translate_instances.location = (920.0, 40.0)
		realize_instances.location = (1140.0, 40.0)
		translate_instances_001.location = (920.0, -160.0)
		rotate_instances.location = (760.0, -160.0)
		realize_instances_001.location = (1140.0, -140.0)
		rotate_instances_001.location = (540.0, -160.0)
		arc.location = (100.0, 49.754150390625)
		group_output_1.location = (1820.0, -40.0)
		translate_instances_002.location = (920.0, -420.0)
		rotate_instances_002.location = (760.0, -420.0)
		rotate_instances_003.location = (540.0, -420.0)
		geometry_to_instance.location = (1380.0, -20.0)
		translate_instances_003.location = (920.0, -680.0)
		rotate_instances_004.location = (540.0, -680.0)
		rotate_instances_005.location = (760.0, -680.0)
		realize_instances_002.location = (1140.0, -660.0)
		realize_instances_003.location = (1140.0, -400.0)
		translate_instances_004.location = (920.0, -960.0)
		rotate_instances_006.location = (540.0, -960.0)
		rotate_instances_007.location = (760.0, -960.0)
		realize_instances_004.location = (1140.0, -940.0)
		translate_instances_005.location = (920.0, -1300.0)
		rotate_instances_008.location = (540.0, -1300.0)
		rotate_instances_009.location = (760.0, -1300.0)
		realize_instances_005.location = (1140.0, -1280.0)
		reroute.location = (473.7552795410156, -1126.493896484375)
		reroute_001.location = (460.017822265625, -891.22216796875)
		geometry_to_instance_001.location = (320.0, 40.0)
		rotate_instances_010.location = (760.0, 40.0)
		group_input_1.location = (-460.0, 0.0)

		#Set dimensions
		math_1.width, math_1.height = 140.0, 100.0
		math_001_1.width, math_001_1.height = 140.0, 100.0
		translate_instances.width, translate_instances.height = 140.0, 100.0
		realize_instances.width, realize_instances.height = 140.0, 100.0
		translate_instances_001.width, translate_instances_001.height = 140.0, 100.0
		rotate_instances.width, rotate_instances.height = 140.0, 100.0
		realize_instances_001.width, realize_instances_001.height = 140.0, 100.0
		rotate_instances_001.width, rotate_instances_001.height = 140.0, 100.0
		arc.width, arc.height = 140.0, 100.0
		group_output_1.width, group_output_1.height = 140.0, 100.0
		translate_instances_002.width, translate_instances_002.height = 140.0, 100.0
		rotate_instances_002.width, rotate_instances_002.height = 140.0, 100.0
		rotate_instances_003.width, rotate_instances_003.height = 140.0, 100.0
		geometry_to_instance.width, geometry_to_instance.height = 160.0, 100.0
		translate_instances_003.width, translate_instances_003.height = 140.0, 100.0
		rotate_instances_004.width, rotate_instances_004.height = 140.0, 100.0
		rotate_instances_005.width, rotate_instances_005.height = 140.0, 100.0
		realize_instances_002.width, realize_instances_002.height = 140.0, 100.0
		realize_instances_003.width, realize_instances_003.height = 140.0, 100.0
		translate_instances_004.width, translate_instances_004.height = 140.0, 100.0
		rotate_instances_006.width, rotate_instances_006.height = 140.0, 100.0
		rotate_instances_007.width, rotate_instances_007.height = 140.0, 100.0
		realize_instances_004.width, realize_instances_004.height = 140.0, 100.0
		translate_instances_005.width, translate_instances_005.height = 140.0, 100.0
		rotate_instances_008.width, rotate_instances_008.height = 140.0, 100.0
		rotate_instances_009.width, rotate_instances_009.height = 140.0, 100.0
		realize_instances_005.width, realize_instances_005.height = 140.0, 100.0
		reroute.width, reroute.height = 16.0, 100.0
		reroute_001.width, reroute_001.height = 16.0, 100.0
		geometry_to_instance_001.width, geometry_to_instance_001.height = 160.0, 100.0
		rotate_instances_010.width, rotate_instances_010.height = 140.0, 100.0
		group_input_1.width, group_input_1.height = 146.3162078857422, 100.0

		#initialize arc_instance links
		#math_001_1.Value -> arc.Sweep Angle
		arc_instance.links.new(math_001_1.outputs[0], arc.inputs[6])
		#arc.Curve -> geometry_to_instance_001.Geometry
		arc_instance.links.new(arc.outputs[0], geometry_to_instance_001.inputs[0])
		#math_1.Value -> arc.Start Angle
		arc_instance.links.new(math_1.outputs[0], arc.inputs[5])
		#group_input_1.Rotation -> rotate_instances_010.Rotation
		arc_instance.links.new(group_input_1.outputs[1], rotate_instances_010.inputs[2])
		#group_input_1.Angle -> math_1.Value
		arc_instance.links.new(group_input_1.outputs[2], math_1.inputs[1])
		#group_input_1.Angle -> math_001_1.Value
		arc_instance.links.new(group_input_1.outputs[2], math_001_1.inputs[0])
		#group_input_1.Radius -> arc.Radius
		arc_instance.links.new(group_input_1.outputs[3], arc.inputs[4])
		#group_input_1.Invert Arc -> arc.Invert Arc
		arc_instance.links.new(group_input_1.outputs[4], arc.inputs[9])
		#rotate_instances_010.Instances -> translate_instances.Instances
		arc_instance.links.new(rotate_instances_010.outputs[0], translate_instances.inputs[0])
		#geometry_to_instance_001.Instances -> rotate_instances_010.Instances
		arc_instance.links.new(geometry_to_instance_001.outputs[0], rotate_instances_010.inputs[0])
		#rotate_instances.Instances -> translate_instances_001.Instances
		arc_instance.links.new(rotate_instances.outputs[0], translate_instances_001.inputs[0])
		#group_input_1.Translation -> rotate_instances_010.Pivot Point
		arc_instance.links.new(group_input_1.outputs[0], rotate_instances_010.inputs[3])
		#group_input_1.Translation -> rotate_instances.Pivot Point
		arc_instance.links.new(group_input_1.outputs[0], rotate_instances.inputs[3])
		#group_input_1.Translation -> translate_instances_001.Translation
		arc_instance.links.new(group_input_1.outputs[0], translate_instances_001.inputs[2])
		#group_input_1.Translation -> translate_instances.Translation
		arc_instance.links.new(group_input_1.outputs[0], translate_instances.inputs[2])
		#group_input_1.Translation -> rotate_instances_001.Pivot Point
		arc_instance.links.new(group_input_1.outputs[0], rotate_instances_001.inputs[3])
		#geometry_to_instance_001.Instances -> rotate_instances_001.Instances
		arc_instance.links.new(geometry_to_instance_001.outputs[0], rotate_instances_001.inputs[0])
		#rotate_instances_001.Instances -> rotate_instances.Instances
		arc_instance.links.new(rotate_instances_001.outputs[0], rotate_instances.inputs[0])
		#translate_instances.Instances -> realize_instances.Geometry
		arc_instance.links.new(translate_instances.outputs[0], realize_instances.inputs[0])
		#translate_instances_001.Instances -> realize_instances_001.Geometry
		arc_instance.links.new(translate_instances_001.outputs[0], realize_instances_001.inputs[0])
		#realize_instances.Geometry -> geometry_to_instance.Geometry
		arc_instance.links.new(realize_instances.outputs[0], geometry_to_instance.inputs[0])
		#realize_instances_001.Geometry -> geometry_to_instance.Geometry
		arc_instance.links.new(realize_instances_001.outputs[0], geometry_to_instance.inputs[0])
		#geometry_to_instance.Instances -> group_output_1.Instances
		arc_instance.links.new(geometry_to_instance.outputs[0], group_output_1.inputs[0])
		#group_input_1.Rotation -> rotate_instances.Rotation
		arc_instance.links.new(group_input_1.outputs[1], rotate_instances.inputs[2])
		#rotate_instances_002.Instances -> translate_instances_002.Instances
		arc_instance.links.new(rotate_instances_002.outputs[0], translate_instances_002.inputs[0])
		#rotate_instances_003.Instances -> rotate_instances_002.Instances
		arc_instance.links.new(rotate_instances_003.outputs[0], rotate_instances_002.inputs[0])
		#translate_instances_002.Instances -> realize_instances_003.Geometry
		arc_instance.links.new(translate_instances_002.outputs[0], realize_instances_003.inputs[0])
		#group_input_1.Translation -> rotate_instances_003.Pivot Point
		arc_instance.links.new(group_input_1.outputs[0], rotate_instances_003.inputs[3])
		#group_input_1.Translation -> rotate_instances_002.Pivot Point
		arc_instance.links.new(group_input_1.outputs[0], rotate_instances_002.inputs[3])
		#group_input_1.Translation -> translate_instances_002.Translation
		arc_instance.links.new(group_input_1.outputs[0], translate_instances_002.inputs[2])
		#geometry_to_instance_001.Instances -> rotate_instances_003.Instances
		arc_instance.links.new(geometry_to_instance_001.outputs[0], rotate_instances_003.inputs[0])
		#group_input_1.Rotation -> rotate_instances_002.Rotation
		arc_instance.links.new(group_input_1.outputs[1], rotate_instances_002.inputs[2])
		#rotate_instances_005.Instances -> translate_instances_003.Instances
		arc_instance.links.new(rotate_instances_005.outputs[0], translate_instances_003.inputs[0])
		#rotate_instances_004.Instances -> rotate_instances_005.Instances
		arc_instance.links.new(rotate_instances_004.outputs[0], rotate_instances_005.inputs[0])
		#translate_instances_003.Instances -> realize_instances_002.Geometry
		arc_instance.links.new(translate_instances_003.outputs[0], realize_instances_002.inputs[0])
		#group_input_1.Translation -> rotate_instances_004.Pivot Point
		arc_instance.links.new(group_input_1.outputs[0], rotate_instances_004.inputs[3])
		#group_input_1.Translation -> rotate_instances_005.Pivot Point
		arc_instance.links.new(group_input_1.outputs[0], rotate_instances_005.inputs[3])
		#group_input_1.Rotation -> rotate_instances_005.Rotation
		arc_instance.links.new(group_input_1.outputs[1], rotate_instances_005.inputs[2])
		#group_input_1.Translation -> translate_instances_003.Translation
		arc_instance.links.new(group_input_1.outputs[0], translate_instances_003.inputs[2])
		#realize_instances_002.Geometry -> geometry_to_instance.Geometry
		arc_instance.links.new(realize_instances_002.outputs[0], geometry_to_instance.inputs[0])
		#realize_instances_003.Geometry -> geometry_to_instance.Geometry
		arc_instance.links.new(realize_instances_003.outputs[0], geometry_to_instance.inputs[0])
		#geometry_to_instance_001.Instances -> rotate_instances_004.Instances
		arc_instance.links.new(geometry_to_instance_001.outputs[0], rotate_instances_004.inputs[0])
		#rotate_instances_007.Instances -> translate_instances_004.Instances
		arc_instance.links.new(rotate_instances_007.outputs[0], translate_instances_004.inputs[0])
		#rotate_instances_006.Instances -> rotate_instances_007.Instances
		arc_instance.links.new(rotate_instances_006.outputs[0], rotate_instances_007.inputs[0])
		#translate_instances_004.Instances -> realize_instances_004.Geometry
		arc_instance.links.new(translate_instances_004.outputs[0], realize_instances_004.inputs[0])
		#rotate_instances_009.Instances -> translate_instances_005.Instances
		arc_instance.links.new(rotate_instances_009.outputs[0], translate_instances_005.inputs[0])
		#rotate_instances_008.Instances -> rotate_instances_009.Instances
		arc_instance.links.new(rotate_instances_008.outputs[0], rotate_instances_009.inputs[0])
		#translate_instances_005.Instances -> realize_instances_005.Geometry
		arc_instance.links.new(translate_instances_005.outputs[0], realize_instances_005.inputs[0])
		#reroute.Output -> rotate_instances_006.Pivot Point
		arc_instance.links.new(reroute.outputs[0], rotate_instances_006.inputs[3])
		#group_input_1.Translation -> reroute.Input
		arc_instance.links.new(group_input_1.outputs[0], reroute.inputs[0])
		#reroute.Output -> rotate_instances_007.Pivot Point
		arc_instance.links.new(reroute.outputs[0], rotate_instances_007.inputs[3])
		#reroute.Output -> translate_instances_004.Translation
		arc_instance.links.new(reroute.outputs[0], translate_instances_004.inputs[2])
		#reroute.Output -> rotate_instances_008.Pivot Point
		arc_instance.links.new(reroute.outputs[0], rotate_instances_008.inputs[3])
		#reroute.Output -> rotate_instances_009.Pivot Point
		arc_instance.links.new(reroute.outputs[0], rotate_instances_009.inputs[3])
		#reroute.Output -> translate_instances_005.Translation
		arc_instance.links.new(reroute.outputs[0], translate_instances_005.inputs[2])
		#reroute_001.Output -> rotate_instances_007.Rotation
		arc_instance.links.new(reroute_001.outputs[0], rotate_instances_007.inputs[2])
		#group_input_1.Rotation -> reroute_001.Input
		arc_instance.links.new(group_input_1.outputs[1], reroute_001.inputs[0])
		#reroute_001.Output -> rotate_instances_009.Rotation
		arc_instance.links.new(reroute_001.outputs[0], rotate_instances_009.inputs[2])
		#realize_instances_004.Geometry -> geometry_to_instance.Geometry
		arc_instance.links.new(realize_instances_004.outputs[0], geometry_to_instance.inputs[0])
		#geometry_to_instance_001.Instances -> rotate_instances_006.Instances
		arc_instance.links.new(geometry_to_instance_001.outputs[0], rotate_instances_006.inputs[0])
		#geometry_to_instance_001.Instances -> rotate_instances_008.Instances
		arc_instance.links.new(geometry_to_instance_001.outputs[0], rotate_instances_008.inputs[0])
		#realize_instances_005.Geometry -> geometry_to_instance.Geometry
		arc_instance.links.new(realize_instances_005.outputs[0], geometry_to_instance.inputs[0])
		return arc_instance

	arc_instance = arc_instance_node_group()

	#node Group.001
	group_001 = capsule_gen.nodes.new("GeometryNodeGroup")
	group_001.node_tree = bpy.data.node_groups["Arc Instance"]
	#Input_2
	group_001.inputs[1].default_value = (0.0, 1.5707963705062866, 0.0)

	#node Realize Instances
	realize_instances_1 = capsule_gen.nodes.new("GeometryNodeRealizeInstances")

	#node Rotate Instances
	rotate_instances_1 = capsule_gen.nodes.new("GeometryNodeRotateInstances")
	#Selection
	rotate_instances_1.inputs[1].default_value = True
	#Local Space
	rotate_instances_1.inputs[4].default_value = False

	#node Rotate Instances.001
	rotate_instances_001_1 = capsule_gen.nodes.new("GeometryNodeRotateInstances")
	#Selection
	rotate_instances_001_1.inputs[1].default_value = True
	#Local Space
	rotate_instances_001_1.inputs[4].default_value = False

	#node Realize Instances.001
	realize_instances_001_1 = capsule_gen.nodes.new("GeometryNodeRealizeInstances")

	#node Group Input.001
	group_input_001 = capsule_gen.nodes.new("NodeGroupInput")

	#node Reroute
	reroute_1 = capsule_gen.nodes.new("NodeReroute")
	#node Reroute.001
	reroute_001_1 = capsule_gen.nodes.new("NodeReroute")
	#node Reroute.002
	reroute_002 = capsule_gen.nodes.new("NodeReroute")
	#node Reroute.003
	reroute_003 = capsule_gen.nodes.new("NodeReroute")
	#node Group Input.002
	group_input_002 = capsule_gen.nodes.new("NodeGroupInput")

	#node Group Input.003
	group_input_003 = capsule_gen.nodes.new("NodeGroupInput")

	#node Compare
	compare = capsule_gen.nodes.new("FunctionNodeCompare")
	compare.data_type = 'FLOAT'
	compare.operation = 'GREATER_THAN'
	compare.mode = 'ELEMENT'
	#A_INT
	compare.inputs[2].default_value = 0
	#B_INT
	compare.inputs[3].default_value = 0
	#A_VEC3
	compare.inputs[4].default_value = (0.0, 0.0, 0.0)
	#B_VEC3
	compare.inputs[5].default_value = (0.0, 0.0, 0.0)
	#A_COL
	compare.inputs[6].default_value = (0.0, 0.0, 0.0, 0.0)
	#B_COL
	compare.inputs[7].default_value = (0.0, 0.0, 0.0, 0.0)
	#A_STR
	compare.inputs[8].default_value = ""
	#B_STR
	compare.inputs[9].default_value = ""
	#C
	compare.inputs[10].default_value = 0.8999999761581421
	#Angle
	compare.inputs[11].default_value = 0.08726649731397629
	#Epsilon
	compare.inputs[12].default_value = 0.0010000000474974513

	#node Join Geometry
	join_geometry = capsule_gen.nodes.new("GeometryNodeJoinGeometry")

	#node Vector Math.004
	vector_math_004 = capsule_gen.nodes.new("ShaderNodeVectorMath")
	vector_math_004.operation = 'SUBTRACT'
	#Vector_002
	vector_math_004.inputs[2].default_value = (0.0, 0.0, 0.0)
	#Scale
	vector_math_004.inputs[3].default_value = 1.0

	#node Align Euler to Vector
	align_euler_to_vector = capsule_gen.nodes.new("FunctionNodeAlignEulerToVector")
	align_euler_to_vector.axis = 'Z'
	align_euler_to_vector.pivot_axis = 'AUTO'
	#Rotation
	align_euler_to_vector.inputs[0].default_value = (0.0, 0.0, 0.0)
	#Factor
	align_euler_to_vector.inputs[1].default_value = 1.0

	#node Reroute.004
	reroute_004 = capsule_gen.nodes.new("NodeReroute")
	#node Rotate Euler
	rotate_euler = capsule_gen.nodes.new("FunctionNodeRotateEuler")
	rotate_euler.type = 'EULER'
	rotate_euler.space = 'LOCAL'
	#Axis
	rotate_euler.inputs[2].default_value = (0.0, 0.0, 1.0)
	#Angle
	rotate_euler.inputs[3].default_value = 0.0

	#node Boolean Math
	boolean_math = capsule_gen.nodes.new("FunctionNodeBooleanMath")
	boolean_math.operation = 'NOT'
	#Boolean_001
	boolean_math.inputs[1].default_value = False

	#node Combine XYZ
	combine_xyz = capsule_gen.nodes.new("ShaderNodeCombineXYZ")
	#X
	combine_xyz.inputs[0].default_value = 0.0
	#Z
	combine_xyz.inputs[2].default_value = 0.0

	#node Math.005
	math_005 = capsule_gen.nodes.new("ShaderNodeMath")
	math_005.operation = 'RADIANS'
	#Value_001
	math_005.inputs[1].default_value = 0.5
	#Value_002
	math_005.inputs[2].default_value = 0.5

	#node Math.006
	math_006 = capsule_gen.nodes.new("ShaderNodeMath")
	math_006.operation = 'MULTIPLY'
	#Value_001
	math_006.inputs[1].default_value = 180.0
	#Value_002
	math_006.inputs[2].default_value = 0.5

	#node Convex Hull
	convex_hull = capsule_gen.nodes.new("GeometryNodeConvexHull")

	#node Group
	group = capsule_gen.nodes.new("GeometryNodeGroup")
	group.node_tree = bpy.data.node_groups["Arc Instance"]
	#Input_2
	group.inputs[1].default_value = (0.0, 1.5707963705062866, 0.0)


	#Set locations
	vector_math.location = (560.0, -200.0)
	vector_math_001.location = (720.0, -200.0)
	math.location = (900.0, -160.0)
	math_001.location = (1060.0, -160.0)
	group_output.location = (2580.0, 40.0)
	math_002.location = (-220.0, -160.0)
	vector_math_002.location = (140.0, -340.0)
	vector_math_003.location = (340.0, -320.0)
	math_003.location = (140.0, -160.0)
	math_004.location = (-40.0, -160.0)
	group_input.location = (1500.0, -380.0)
	group_001.location = (1520.0, 340.0)
	realize_instances_1.location = (1960.0, 40.0)
	rotate_instances_1.location = (1740.0, 340.0)
	rotate_instances_001_1.location = (1740.0, 40.0)
	realize_instances_001_1.location = (1960.0, 340.0)
	group_input_001.location = (1060.0, 120.0)
	reroute_1.location = (-302.72174072265625, -336.5884704589844)
	reroute_001_1.location = (-299.21417236328125, -387.1701354980469)
	reroute_002.location = (-302.72174072265625, -356.1435852050781)
	reroute_003.location = (-302.72174072265625, -360.2455139160156)
	group_input_002.location = (-480.0, -300.0)
	group_input_003.location = (896.810546875, -525.8162841796875)
	compare.location = (1080.6395263671875, -497.12890625)
	join_geometry.location = (2140.0, 40.0)
	vector_math_004.location = (1660.0, -380.0)
	align_euler_to_vector.location = (1820.0, -380.0)
	reroute_004.location = (1879.368408203125, -228.6984405517578)
	rotate_euler.location = (1980.0, -380.0)
	boolean_math.location = (1231.3818359375, -545.0707397460938)
	combine_xyz.location = (1820.0, -580.0)
	math_005.location = (1660.0, -580.0)
	math_006.location = (1500.0, -580.0)
	convex_hull.location = (2360.0, 40.0)
	group.location = (1520.0, 40.0)

	#Set dimensions
	vector_math.width, vector_math.height = 140.0, 100.0
	vector_math_001.width, vector_math_001.height = 140.0, 100.0
	math.width, math.height = 140.0, 100.0
	math_001.width, math_001.height = 140.0, 100.0
	group_output.width, group_output.height = 140.0, 100.0
	math_002.width, math_002.height = 140.0, 100.0
	vector_math_002.width, vector_math_002.height = 140.0, 100.0
	vector_math_003.width, vector_math_003.height = 140.0, 100.0
	math_003.width, math_003.height = 140.0, 100.0
	math_004.width, math_004.height = 140.0, 100.0
	group_input.width, group_input.height = 140.0, 100.0
	group_001.width, group_001.height = 140.0, 100.0
	realize_instances_1.width, realize_instances_1.height = 140.0, 100.0
	rotate_instances_1.width, rotate_instances_1.height = 140.0, 100.0
	rotate_instances_001_1.width, rotate_instances_001_1.height = 140.0, 100.0
	realize_instances_001_1.width, realize_instances_001_1.height = 140.0, 100.0
	group_input_001.width, group_input_001.height = 140.0, 100.0
	reroute_1.width, reroute_1.height = 16.0, 100.0
	reroute_001_1.width, reroute_001_1.height = 16.0, 100.0
	reroute_002.width, reroute_002.height = 16.0, 100.0
	reroute_003.width, reroute_003.height = 16.0, 100.0
	group_input_002.width, group_input_002.height = 140.0, 100.0
	group_input_003.width, group_input_003.height = 140.0, 100.0
	compare.width, compare.height = 140.0, 100.0
	join_geometry.width, join_geometry.height = 140.0, 100.0
	vector_math_004.width, vector_math_004.height = 140.0, 100.0
	align_euler_to_vector.width, align_euler_to_vector.height = 140.0, 100.0
	reroute_004.width, reroute_004.height = 16.0, 100.0
	rotate_euler.width, rotate_euler.height = 140.0, 100.0
	boolean_math.width, boolean_math.height = 140.0, 100.0
	combine_xyz.width, combine_xyz.height = 140.0, 100.0
	math_005.width, math_005.height = 140.0, 100.0
	math_006.width, math_006.height = 140.0, 100.0
	convex_hull.width, convex_hull.height = 140.0, 100.0
	group.width, group.height = 140.0, 100.0

	#initialize capsule_gen links
	#reroute_003.Output -> math_002.Value
	capsule_gen.links.new(reroute_003.outputs[0], math_002.inputs[1])
	#reroute_001_1.Output -> math_002.Value
	capsule_gen.links.new(reroute_001_1.outputs[0], math_002.inputs[0])
	#math_002.Value -> math_004.Value
	capsule_gen.links.new(math_002.outputs[0], math_004.inputs[1])
	#reroute_001_1.Output -> math_004.Value
	capsule_gen.links.new(reroute_001_1.outputs[0], math_004.inputs[0])
	#math_004.Value -> math_003.Value
	capsule_gen.links.new(math_004.outputs[0], math_003.inputs[1])
	#vector_math_002.Vector -> vector_math_003.Vector
	capsule_gen.links.new(vector_math_002.outputs[0], vector_math_003.inputs[2])
	#math_003.Value -> vector_math_003.Vector
	capsule_gen.links.new(math_003.outputs[0], vector_math_003.inputs[1])
	#math_004.Value -> vector_math_002.Vector
	capsule_gen.links.new(math_004.outputs[0], vector_math_002.inputs[1])
	#reroute_1.Output -> vector_math_002.Vector
	capsule_gen.links.new(reroute_1.outputs[0], vector_math_002.inputs[0])
	#reroute_002.Output -> vector_math_003.Vector
	capsule_gen.links.new(reroute_002.outputs[0], vector_math_003.inputs[0])
	#vector_math_003.Vector -> vector_math.Vector
	capsule_gen.links.new(vector_math_003.outputs[0], vector_math.inputs[1])
	#reroute_002.Output -> vector_math.Vector
	capsule_gen.links.new(reroute_002.outputs[0], vector_math.inputs[0])
	#vector_math.Vector -> vector_math_001.Vector
	capsule_gen.links.new(vector_math.outputs[0], vector_math_001.inputs[0])
	#vector_math_001.Value -> math.Value
	capsule_gen.links.new(vector_math_001.outputs[1], math.inputs[1])
	#reroute_001_1.Output -> math.Value
	capsule_gen.links.new(reroute_001_1.outputs[0], math.inputs[0])
	#math.Value -> math_001.Value
	capsule_gen.links.new(math.outputs[0], math_001.inputs[0])
	#math_001.Value -> group.Angle
	capsule_gen.links.new(math_001.outputs[0], group.inputs[2])
	#math_001.Value -> group_001.Angle
	capsule_gen.links.new(math_001.outputs[0], group_001.inputs[2])
	#group_input_001.Start/Big -> group_001.Translation
	capsule_gen.links.new(group_input_001.outputs[0], group_001.inputs[0])
	#group_input_001.End/Small -> group.Translation
	capsule_gen.links.new(group_input_001.outputs[1], group.inputs[0])
	#rotate_instances_001_1.Instances -> realize_instances_1.Geometry
	capsule_gen.links.new(rotate_instances_001_1.outputs[0], realize_instances_1.inputs[0])
	#realize_instances_001_1.Geometry -> join_geometry.Geometry
	capsule_gen.links.new(realize_instances_001_1.outputs[0], join_geometry.inputs[0])
	#realize_instances_1.Geometry -> join_geometry.Geometry
	capsule_gen.links.new(realize_instances_1.outputs[0], join_geometry.inputs[0])
	#group_input_001.bigRadius -> group_001.Radius
	capsule_gen.links.new(group_input_001.outputs[2], group_001.inputs[3])
	#group_input_001.smallRadius -> group.Radius
	capsule_gen.links.new(group_input_001.outputs[3], group.inputs[3])
	#group_input.Start/Big -> vector_math_004.Vector
	capsule_gen.links.new(group_input.outputs[0], vector_math_004.inputs[0])
	#group_input.End/Small -> vector_math_004.Vector
	capsule_gen.links.new(group_input.outputs[1], vector_math_004.inputs[1])
	#vector_math_004.Vector -> align_euler_to_vector.Vector
	capsule_gen.links.new(vector_math_004.outputs[0], align_euler_to_vector.inputs[2])
	#group_input_001.Start/Big -> rotate_instances_1.Pivot Point
	capsule_gen.links.new(group_input_001.outputs[0], rotate_instances_1.inputs[3])
	#group_001.Instances -> rotate_instances_1.Instances
	capsule_gen.links.new(group_001.outputs[0], rotate_instances_1.inputs[0])
	#rotate_instances_1.Instances -> realize_instances_001_1.Geometry
	capsule_gen.links.new(rotate_instances_1.outputs[0], realize_instances_001_1.inputs[0])
	#group.Instances -> rotate_instances_001_1.Instances
	capsule_gen.links.new(group.outputs[0], rotate_instances_001_1.inputs[0])
	#group_input_001.End/Small -> rotate_instances_001_1.Pivot Point
	capsule_gen.links.new(group_input_001.outputs[1], rotate_instances_001_1.inputs[3])
	#reroute_004.Output -> rotate_instances_001_1.Rotation
	capsule_gen.links.new(reroute_004.outputs[0], rotate_instances_001_1.inputs[2])
	#reroute_004.Output -> rotate_instances_1.Rotation
	capsule_gen.links.new(reroute_004.outputs[0], rotate_instances_1.inputs[2])
	#join_geometry.Geometry -> convex_hull.Geometry
	capsule_gen.links.new(join_geometry.outputs[0], convex_hull.inputs[0])
	#group_input_002.bigRadius -> reroute_003.Input
	capsule_gen.links.new(group_input_002.outputs[2], reroute_003.inputs[0])
	#group_input_002.Start/Big -> reroute_1.Input
	capsule_gen.links.new(group_input_002.outputs[0], reroute_1.inputs[0])
	#group_input_002.smallRadius -> reroute_001_1.Input
	capsule_gen.links.new(group_input_002.outputs[3], reroute_001_1.inputs[0])
	#group_input_002.End/Small -> reroute_002.Input
	capsule_gen.links.new(group_input_002.outputs[1], reroute_002.inputs[0])
	#group_input_003.bigRadius -> compare.A
	capsule_gen.links.new(group_input_003.outputs[2], compare.inputs[0])
	#group_input_003.smallRadius -> compare.B
	capsule_gen.links.new(group_input_003.outputs[3], compare.inputs[1])
	#compare.Result -> boolean_math.Boolean
	capsule_gen.links.new(compare.outputs[0], boolean_math.inputs[0])
	#align_euler_to_vector.Rotation -> rotate_euler.Rotation
	capsule_gen.links.new(align_euler_to_vector.outputs[0], rotate_euler.inputs[0])
	#rotate_euler.Rotation -> reroute_004.Input
	capsule_gen.links.new(rotate_euler.outputs[0], reroute_004.inputs[0])
	#math_005.Value -> combine_xyz.Y
	capsule_gen.links.new(math_005.outputs[0], combine_xyz.inputs[1])
	#boolean_math.Boolean -> math_006.Value
	capsule_gen.links.new(boolean_math.outputs[0], math_006.inputs[0])
	#math_006.Value -> math_005.Value
	capsule_gen.links.new(math_006.outputs[0], math_005.inputs[0])
	#combine_xyz.Vector -> rotate_euler.Rotate By
	capsule_gen.links.new(combine_xyz.outputs[0], rotate_euler.inputs[1])
	#compare.Result -> group_001.Invert Arc
	capsule_gen.links.new(compare.outputs[0], group_001.inputs[4])
	#boolean_math.Boolean -> group.Invert Arc
	capsule_gen.links.new(boolean_math.outputs[0], group.inputs[4])
	#convex_hull.Convex Hull -> group_output.Geometry
	capsule_gen.links.new(convex_hull.outputs[0], group_output.inputs[0])
	capsule_gen.use_fake_user = True
	return capsule_gen

def GetGeoNode():
	if "Capsule_Gen" in bpy.data.node_groups:
		return bpy.data.node_groups["Capsule_Gen"]
	else:
		return capsule_gen_node_group()